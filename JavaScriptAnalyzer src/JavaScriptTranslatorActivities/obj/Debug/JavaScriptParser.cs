//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 JavaScript.g3 2013-05-13 09:18:00

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace JavaScriptTranslatorActivities
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class JavaScriptParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARGUMENT", "ARRAY", "BLOCK", "BOOLEAN", "BREAK", "CALL", "CASE", "CATCH", "CONDITION", "CONDITON", "CONDITONALOPERATOR", "CONTINUE", "CharacterEscapeSequence", "Comment", "DEBUGGER", "DEFAULT", "DOWHILE", "DecimalDigit", "DecimalLiteral", "DoubleStringCharacter", "ELSE", "EMPTYSTATEMENT", "EscapeCharacter", "EscapeSequence", "ExponentPart", "FINALLY", "FOR", "FORIN", "FUNCTION", "FUNCTIONBODY", "HexDigit", "HexEscapeSequence", "HexIntegerLiteral", "IDENTIFIER", "IF", "INDEX", "ITERATE", "Identifier", "IdentifierPart", "IdentifierStart", "LT", "LineComment", "NEW", "NULL", "NUMERIC", "NonEscapeCharacter", "NumericLiteral", "OBJECT", "OPERATOR", "PARAMETER", "PROGRAM", "PROPERTY", "REGULAREXPRESSION", "RETURN", "RegularExpressionBody", "RegularExpressionChar", "RegularExpressionFirstChar", "RegularExpressionFlags", "RegularExpressionLiteral", "STRING", "SWITCH", "SingleEscapeCharacter", "SingleStringCharacter", "StringLiteral", "THROW", "TRY", "UnicodeCombiningMark", "UnicodeConnectorPunctuation", "UnicodeDigit", "UnicodeEscapeSequence", "UnicodeLetter", "VAR", "WHILE", "WITH", "WhiteSpace", "'!'", "'!='", "'!=='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'.'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'==='", "'>'", "'>='", "'>>'", "'>>='", "'>>>'", "'>>>='", "'?'", "'['", "']'", "'^'", "'^='", "'break'", "'case'", "'catch'", "'continue'", "'debugger'", "'default'", "'delete'", "'do'", "'else'", "'false'", "'finally'", "'for'", "'function'", "'if'", "'in'", "'instanceof'", "'new'", "'null'", "'return'", "'switch'", "'this'", "'throw'", "'true'", "'try'", "'typeof'", "'var'", "'void'", "'while'", "'with'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
	};
	public const int EOF=-1;
	public const int ARGUMENT=4;
	public const int ARRAY=5;
	public const int BLOCK=6;
	public const int BOOLEAN=7;
	public const int BREAK=8;
	public const int CALL=9;
	public const int CASE=10;
	public const int CATCH=11;
	public const int CONDITION=12;
	public const int CONDITON=13;
	public const int CONDITONALOPERATOR=14;
	public const int CONTINUE=15;
	public const int CharacterEscapeSequence=16;
	public const int Comment=17;
	public const int DEBUGGER=18;
	public const int DEFAULT=19;
	public const int DOWHILE=20;
	public const int DecimalDigit=21;
	public const int DecimalLiteral=22;
	public const int DoubleStringCharacter=23;
	public const int ELSE=24;
	public const int EMPTYSTATEMENT=25;
	public const int EscapeCharacter=26;
	public const int EscapeSequence=27;
	public const int ExponentPart=28;
	public const int FINALLY=29;
	public const int FOR=30;
	public const int FORIN=31;
	public const int FUNCTION=32;
	public const int FUNCTIONBODY=33;
	public const int HexDigit=34;
	public const int HexEscapeSequence=35;
	public const int HexIntegerLiteral=36;
	public const int IDENTIFIER=37;
	public const int IF=38;
	public const int INDEX=39;
	public const int ITERATE=40;
	public const int Identifier=41;
	public const int IdentifierPart=42;
	public const int IdentifierStart=43;
	public const int LT=44;
	public const int LineComment=45;
	public const int NEW=46;
	public const int NULL=47;
	public const int NUMERIC=48;
	public const int NonEscapeCharacter=49;
	public const int NumericLiteral=50;
	public const int OBJECT=51;
	public const int OPERATOR=52;
	public const int PARAMETER=53;
	public const int PROGRAM=54;
	public const int PROPERTY=55;
	public const int REGULAREXPRESSION=56;
	public const int RETURN=57;
	public const int RegularExpressionBody=58;
	public const int RegularExpressionChar=59;
	public const int RegularExpressionFirstChar=60;
	public const int RegularExpressionFlags=61;
	public const int RegularExpressionLiteral=62;
	public const int STRING=63;
	public const int SWITCH=64;
	public const int SingleEscapeCharacter=65;
	public const int SingleStringCharacter=66;
	public const int StringLiteral=67;
	public const int THROW=68;
	public const int TRY=69;
	public const int UnicodeCombiningMark=70;
	public const int UnicodeConnectorPunctuation=71;
	public const int UnicodeDigit=72;
	public const int UnicodeEscapeSequence=73;
	public const int UnicodeLetter=74;
	public const int VAR=75;
	public const int WHILE=76;
	public const int WITH=77;
	public const int WhiteSpace=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;

	public JavaScriptParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaScriptParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[397+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return JavaScriptParser.tokenNames; } }
	public override string GrammarFileName { get { return "JavaScript.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// JavaScript.g3:77:8: public program : ( LT )* ( sourceElements )? ( LT )* EOF -> ^( PROGRAM ( sourceElements )? ) ;
	[GrammarRule("program")]
	public AstParserRuleReturnScope<object, IToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int program_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT1 = default(IToken);
		IToken LT3 = default(IToken);
		IToken EOF4 = default(IToken);
		AstParserRuleReturnScope<object, IToken> sourceElements2 = default(AstParserRuleReturnScope<object, IToken>);

		object LT1_tree = default(object);
		object LT3_tree = default(object);
		object EOF4_tree = default(object);
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_sourceElements=new RewriteRuleSubtreeStream(adaptor,"rule sourceElements");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(77, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// JavaScript.g3:78:2: ( ( LT )* ( sourceElements )? ( LT )* EOF -> ^( PROGRAM ( sourceElements )? ) )
			DebugEnterAlt(1);
			// JavaScript.g3:78:4: ( LT )* ( sourceElements )? ( LT )* EOF
			{
			DebugLocation(78, 4);
			// JavaScript.g3:78:4: ( LT )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==LT))
				{
					int LA1_2 = input.LA(2);

					if ((EvaluatePredicate(synpred1_JavaScript_fragment)))
					{
						alt1 = 1;
					}


				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:78:4: LT
					{
					DebugLocation(78, 4);
					LT1=(IToken)Match(input,LT,Follow._LT_in_program283); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(78, 8);
			// JavaScript.g3:78:8: ( sourceElements )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==Identifier||LA2_1==NumericLiteral||LA2_1==RegularExpressionLiteral||LA2_1==StringLiteral||LA2_1==79||LA2_1==87||(LA2_1>=91 && LA2_1<=92)||(LA2_1>=95 && LA2_1<=96)||LA2_1==102||LA2_1==117||LA2_1==121||(LA2_1>=124 && LA2_1<=125)||(LA2_1>=127 && LA2_1<=128)||LA2_1==130||(LA2_1>=132 && LA2_1<=134)||(LA2_1>=137 && LA2_1<=150)||LA2_1==155))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:78:8: sourceElements
				{
				DebugLocation(78, 8);
				PushFollow(Follow._sourceElements_in_program286);
				sourceElements2=sourceElements();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sourceElements.Add(sourceElements2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(78, 24);
			// JavaScript.g3:78:24: ( LT )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==LT))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:78:24: LT
					{
					DebugLocation(78, 24);
					LT3=(IToken)Match(input,LT,Follow._LT_in_program289); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT3);


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(78, 28);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_program292); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: sourceElements
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 78:32: -> ^( PROGRAM ( sourceElements )? )
			{
				DebugLocation(78, 35);
				// JavaScript.g3:78:35: ^( PROGRAM ( sourceElements )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(78, 37);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

				DebugLocation(78, 45);
				// JavaScript.g3:78:45: ( sourceElements )?
				if (stream_sourceElements.HasNext)
				{
					DebugLocation(78, 45);
					adaptor.AddChild(root_1, stream_sourceElements.NextTree());

				}
				stream_sourceElements.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
			if (state.backtracking > 0) { Memoize(input, 1, program_StartIndex); }

		}
		DebugLocation(79, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_sourceElements();
	partial void LeaveRule_sourceElements();
	// $ANTLR start "sourceElements"
	// JavaScript.g3:81:1: sourceElements : sourceElement ( ( LT !)* sourceElement )* ;
	[GrammarRule("sourceElements")]
	private AstParserRuleReturnScope<object, IToken> sourceElements()
	{
		EnterRule_sourceElements();
		EnterRule("sourceElements", 2);
		TraceIn("sourceElements", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int sourceElements_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT6 = default(IToken);
		AstParserRuleReturnScope<object, IToken> sourceElement5 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> sourceElement7 = default(AstParserRuleReturnScope<object, IToken>);

		object LT6_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "sourceElements");
		DebugLocation(81, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// JavaScript.g3:82:2: ( sourceElement ( ( LT !)* sourceElement )* )
			DebugEnterAlt(1);
			// JavaScript.g3:82:4: sourceElement ( ( LT !)* sourceElement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(82, 4);
			PushFollow(Follow._sourceElement_in_sourceElements313);
			sourceElement5=sourceElement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, sourceElement5.Tree);
			DebugLocation(82, 18);
			// JavaScript.g3:82:18: ( ( LT !)* sourceElement )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				try
				{
					alt5 = dfa5.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:82:19: ( LT !)* sourceElement
					{
					DebugLocation(82, 21);
					// JavaScript.g3:82:21: ( LT !)*
					try { DebugEnterSubRule(4);
					while (true)
					{
						int alt4=2;
						try { DebugEnterDecision(4, false);
						int LA4_1 = input.LA(1);

						if ((LA4_1==LT))
						{
							alt4 = 1;
						}


						} finally { DebugExitDecision(4); }
						switch ( alt4 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:82:21: LT !
							{
							DebugLocation(82, 21);
							LT6=(IToken)Match(input,LT,Follow._LT_in_sourceElements316); if (state.failed) return retval;

							}
							break;

						default:
							goto loop4;
						}
					}

					loop4:
						;

					} finally { DebugExitSubRule(4); }

					DebugLocation(82, 24);
					PushFollow(Follow._sourceElement_in_sourceElements320);
					sourceElement7=sourceElement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, sourceElement7.Tree);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sourceElements", 2);
			LeaveRule("sourceElements", 2);
			LeaveRule_sourceElements();
			if (state.backtracking > 0) { Memoize(input, 2, sourceElements_StartIndex); }

		}
		DebugLocation(83, 1);
		} finally { DebugExitRule(GrammarFileName, "sourceElements"); }
		return retval;

	}
	// $ANTLR end "sourceElements"

	partial void EnterRule_sourceElement();
	partial void LeaveRule_sourceElement();
	// $ANTLR start "sourceElement"
	// JavaScript.g3:85:1: sourceElement : ( statement | functionDeclaration );
	[GrammarRule("sourceElement")]
	private AstParserRuleReturnScope<object, IToken> sourceElement()
	{
		EnterRule_sourceElement();
		EnterRule("sourceElement", 3);
		TraceIn("sourceElement", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int sourceElement_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> statement8 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionDeclaration9 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "sourceElement");
		DebugLocation(85, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// JavaScript.g3:86:2: ( statement | functionDeclaration )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==Identifier||LA6_1==NumericLiteral||LA6_1==RegularExpressionLiteral||LA6_1==StringLiteral||LA6_1==79||LA6_1==87||(LA6_1>=91 && LA6_1<=92)||(LA6_1>=95 && LA6_1<=96)||LA6_1==102||LA6_1==117||LA6_1==121||(LA6_1>=124 && LA6_1<=125)||(LA6_1>=127 && LA6_1<=128)||LA6_1==130||LA6_1==132||LA6_1==134||(LA6_1>=137 && LA6_1<=150)||LA6_1==155))
			{
				alt6 = 1;
			}
			else if ((LA6_1==133))
			{
				int LA6_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_JavaScript_fragment)))
				{
					alt6 = 1;
				}
				else if ((true))
				{
					alt6 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 6, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:86:4: statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(86, 4);
				PushFollow(Follow._statement_in_sourceElement334);
				statement8=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement8.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:87:4: functionDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(87, 4);
				PushFollow(Follow._functionDeclaration_in_sourceElement339);
				functionDeclaration9=functionDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionDeclaration9.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sourceElement", 3);
			LeaveRule("sourceElement", 3);
			LeaveRule_sourceElement();
			if (state.backtracking > 0) { Memoize(input, 3, sourceElement_StartIndex); }

		}
		DebugLocation(88, 1);
		} finally { DebugExitRule(GrammarFileName, "sourceElement"); }
		return retval;

	}
	// $ANTLR end "sourceElement"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// JavaScript.g3:91:1: statement : ( blockStatement | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | debuggerStatement );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<object, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 4);
		TraceIn("statement", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> blockStatement10 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableStatement11 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> emptyStatement12 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expressionStatement13 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> ifStatement14 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> iterationStatement15 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> continueStatement16 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> breakStatement17 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> returnStatement18 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> withStatement19 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> labelledStatement20 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> switchStatement21 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> throwStatement22 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> tryStatement23 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> debuggerStatement24 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(91, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// JavaScript.g3:92:2: ( blockStatement | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | debuggerStatement )
			int alt7=15;
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case 150:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred7_JavaScript_fragment)))
				{
					alt7 = 1;
				}
				else if ((EvaluatePredicate(synpred10_JavaScript_fragment)))
				{
					alt7 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 146:
				{
				alt7 = 2;
				}
				break;
			case 102:
				{
				alt7 = 3;
				}
				break;
			case NumericLiteral:
			case RegularExpressionLiteral:
			case StringLiteral:
			case 79:
			case 87:
			case 91:
			case 92:
			case 95:
			case 96:
			case 117:
			case 127:
			case 130:
			case 133:
			case 137:
			case 138:
			case 141:
			case 143:
			case 145:
			case 147:
			case 155:
				{
				alt7 = 4;
				}
				break;
			case Identifier:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_JavaScript_fragment)))
				{
					alt7 = 4;
				}
				else if ((EvaluatePredicate(synpred17_JavaScript_fragment)))
				{
					alt7 = 11;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 134:
				{
				alt7 = 5;
				}
				break;
			case 128:
			case 132:
			case 148:
				{
				alt7 = 6;
				}
				break;
			case 124:
				{
				alt7 = 7;
				}
				break;
			case 121:
				{
				alt7 = 8;
				}
				break;
			case 139:
				{
				alt7 = 9;
				}
				break;
			case 149:
				{
				alt7 = 10;
				}
				break;
			case 140:
				{
				alt7 = 12;
				}
				break;
			case 142:
				{
				alt7 = 13;
				}
				break;
			case 144:
				{
				alt7 = 14;
				}
				break;
			case 125:
				{
				alt7 = 15;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:92:4: blockStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(92, 4);
				PushFollow(Follow._blockStatement_in_statement351);
				blockStatement10=blockStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement10.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:93:4: variableStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(93, 4);
				PushFollow(Follow._variableStatement_in_statement356);
				variableStatement11=variableStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableStatement11.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g3:94:4: emptyStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(94, 4);
				PushFollow(Follow._emptyStatement_in_statement361);
				emptyStatement12=emptyStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, emptyStatement12.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaScript.g3:95:4: expressionStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(95, 4);
				PushFollow(Follow._expressionStatement_in_statement366);
				expressionStatement13=expressionStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressionStatement13.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaScript.g3:96:4: ifStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(96, 4);
				PushFollow(Follow._ifStatement_in_statement371);
				ifStatement14=ifStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ifStatement14.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// JavaScript.g3:97:4: iterationStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(97, 4);
				PushFollow(Follow._iterationStatement_in_statement376);
				iterationStatement15=iterationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, iterationStatement15.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// JavaScript.g3:98:4: continueStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(98, 4);
				PushFollow(Follow._continueStatement_in_statement381);
				continueStatement16=continueStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, continueStatement16.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// JavaScript.g3:99:4: breakStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(99, 4);
				PushFollow(Follow._breakStatement_in_statement386);
				breakStatement17=breakStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, breakStatement17.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// JavaScript.g3:100:4: returnStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(100, 4);
				PushFollow(Follow._returnStatement_in_statement391);
				returnStatement18=returnStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, returnStatement18.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// JavaScript.g3:101:4: withStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(101, 4);
				PushFollow(Follow._withStatement_in_statement396);
				withStatement19=withStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, withStatement19.Tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// JavaScript.g3:102:4: labelledStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(102, 4);
				PushFollow(Follow._labelledStatement_in_statement401);
				labelledStatement20=labelledStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, labelledStatement20.Tree);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// JavaScript.g3:103:4: switchStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(103, 4);
				PushFollow(Follow._switchStatement_in_statement406);
				switchStatement21=switchStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, switchStatement21.Tree);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// JavaScript.g3:104:4: throwStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(104, 4);
				PushFollow(Follow._throwStatement_in_statement411);
				throwStatement22=throwStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, throwStatement22.Tree);

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// JavaScript.g3:105:4: tryStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(105, 4);
				PushFollow(Follow._tryStatement_in_statement416);
				tryStatement23=tryStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tryStatement23.Tree);

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// JavaScript.g3:106:4: debuggerStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(106, 4);
				PushFollow(Follow._debuggerStatement_in_statement421);
				debuggerStatement24=debuggerStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, debuggerStatement24.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 4);
			LeaveRule("statement", 4);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 4, statement_StartIndex); }

		}
		DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();
	// $ANTLR start "blockStatement"
	// JavaScript.g3:109:1: blockStatement : '{' ( LT )* ( statementList )? ( LT )* '}' -> ^( BLOCK ( statementList )? ) ;
	[GrammarRule("blockStatement")]
	private AstParserRuleReturnScope<object, IToken> blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 5);
		TraceIn("blockStatement", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int blockStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal25 = default(IToken);
		IToken LT26 = default(IToken);
		IToken LT28 = default(IToken);
		IToken char_literal29 = default(IToken);
		AstParserRuleReturnScope<object, IToken> statementList27 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal25_tree = default(object);
		object LT26_tree = default(object);
		object LT28_tree = default(object);
		object char_literal29_tree = default(object);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_statementList=new RewriteRuleSubtreeStream(adaptor,"rule statementList");
		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(109, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// JavaScript.g3:110:2: ( '{' ( LT )* ( statementList )? ( LT )* '}' -> ^( BLOCK ( statementList )? ) )
			DebugEnterAlt(1);
			// JavaScript.g3:110:4: '{' ( LT )* ( statementList )? ( LT )* '}'
			{
			DebugLocation(110, 4);
			char_literal25=(IToken)Match(input,150,Follow._150_in_blockStatement432); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_150.Add(char_literal25);

			DebugLocation(110, 8);
			// JavaScript.g3:110:8: ( LT )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==LT))
				{
					int LA8_2 = input.LA(2);

					if ((EvaluatePredicate(synpred21_JavaScript_fragment)))
					{
						alt8 = 1;
					}


				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:110:8: LT
					{
					DebugLocation(110, 8);
					LT26=(IToken)Match(input,LT,Follow._LT_in_blockStatement434); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT26);


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(110, 12);
			// JavaScript.g3:110:12: ( statementList )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==Identifier||LA9_1==NumericLiteral||LA9_1==RegularExpressionLiteral||LA9_1==StringLiteral||LA9_1==79||LA9_1==87||(LA9_1>=91 && LA9_1<=92)||(LA9_1>=95 && LA9_1<=96)||LA9_1==102||LA9_1==117||LA9_1==121||(LA9_1>=124 && LA9_1<=125)||(LA9_1>=127 && LA9_1<=128)||LA9_1==130||(LA9_1>=132 && LA9_1<=134)||(LA9_1>=137 && LA9_1<=150)||LA9_1==155))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:110:12: statementList
				{
				DebugLocation(110, 12);
				PushFollow(Follow._statementList_in_blockStatement437);
				statementList27=statementList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statementList.Add(statementList27.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(110, 27);
			// JavaScript.g3:110:27: ( LT )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==LT))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:110:27: LT
					{
					DebugLocation(110, 27);
					LT28=(IToken)Match(input,LT,Follow._LT_in_blockStatement440); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT28);


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(110, 31);
			char_literal29=(IToken)Match(input,154,Follow._154_in_blockStatement443); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_154.Add(char_literal29);



			{
			// AST REWRITE
			// elements: statementList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 110:35: -> ^( BLOCK ( statementList )? )
			{
				DebugLocation(110, 38);
				// JavaScript.g3:110:38: ^( BLOCK ( statementList )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(110, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(110, 46);
				// JavaScript.g3:110:46: ( statementList )?
				if (stream_statementList.HasNext)
				{
					DebugLocation(110, 46);
					adaptor.AddChild(root_1, stream_statementList.NextTree());

				}
				stream_statementList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("blockStatement", 5);
			LeaveRule("blockStatement", 5);
			LeaveRule_blockStatement();
			if (state.backtracking > 0) { Memoize(input, 5, blockStatement_StartIndex); }

		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return retval;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_statementList();
	partial void LeaveRule_statementList();
	// $ANTLR start "statementList"
	// JavaScript.g3:113:1: statementList : statement ( ( LT !)* statement )* ;
	[GrammarRule("statementList")]
	private AstParserRuleReturnScope<object, IToken> statementList()
	{
		EnterRule_statementList();
		EnterRule("statementList", 6);
		TraceIn("statementList", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int statementList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT31 = default(IToken);
		AstParserRuleReturnScope<object, IToken> statement30 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement32 = default(AstParserRuleReturnScope<object, IToken>);

		object LT31_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "statementList");
		DebugLocation(113, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// JavaScript.g3:114:2: ( statement ( ( LT !)* statement )* )
			DebugEnterAlt(1);
			// JavaScript.g3:114:4: statement ( ( LT !)* statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(114, 4);
			PushFollow(Follow._statement_in_statementList463);
			statement30=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement30.Tree);
			DebugLocation(114, 14);
			// JavaScript.g3:114:14: ( ( LT !)* statement )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				try
				{
					alt12 = dfa12.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:114:15: ( LT !)* statement
					{
					DebugLocation(114, 17);
					// JavaScript.g3:114:17: ( LT !)*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_1 = input.LA(1);

						if ((LA11_1==LT))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:114:17: LT !
							{
							DebugLocation(114, 17);
							LT31=(IToken)Match(input,LT,Follow._LT_in_statementList466); if (state.failed) return retval;

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(114, 20);
					PushFollow(Follow._statement_in_statementList470);
					statement32=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement32.Tree);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementList", 6);
			LeaveRule("statementList", 6);
			LeaveRule_statementList();
			if (state.backtracking > 0) { Memoize(input, 6, statementList_StartIndex); }

		}
		DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "statementList"); }
		return retval;

	}
	// $ANTLR end "statementList"

	partial void EnterRule_variableStatement();
	partial void LeaveRule_variableStatement();
	// $ANTLR start "variableStatement"
	// JavaScript.g3:117:1: variableStatement : 'var' ! ( LT !)* variableDeclarationList ( LT | ';' ) !;
	[GrammarRule("variableStatement")]
	private AstParserRuleReturnScope<object, IToken> variableStatement()
	{
		EnterRule_variableStatement();
		EnterRule("variableStatement", 7);
		TraceIn("variableStatement", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal33 = default(IToken);
		IToken LT34 = default(IToken);
		IToken set36 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableDeclarationList35 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal33_tree = default(object);
		object LT34_tree = default(object);
		object set36_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableStatement");
		DebugLocation(117, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// JavaScript.g3:118:2: ( 'var' ! ( LT !)* variableDeclarationList ( LT | ';' ) !)
			DebugEnterAlt(1);
			// JavaScript.g3:118:4: 'var' ! ( LT !)* variableDeclarationList ( LT | ';' ) !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(118, 9);
			string_literal33=(IToken)Match(input,146,Follow._146_in_variableStatement483); if (state.failed) return retval;
			DebugLocation(118, 13);
			// JavaScript.g3:118:13: ( LT !)*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1==LT))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:118:13: LT !
					{
					DebugLocation(118, 13);
					LT34=(IToken)Match(input,LT,Follow._LT_in_variableStatement486); if (state.failed) return retval;

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(118, 16);
			PushFollow(Follow._variableDeclarationList_in_variableStatement490);
			variableDeclarationList35=variableDeclarationList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationList35.Tree);
			DebugLocation(118, 50);

			set36=(IToken)input.LT(1);
			if (input.LA(1)==LT||input.LA(1)==102)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableStatement", 7);
			LeaveRule("variableStatement", 7);
			LeaveRule_variableStatement();
			if (state.backtracking > 0) { Memoize(input, 7, variableStatement_StartIndex); }

		}
		DebugLocation(119, 1);
		} finally { DebugExitRule(GrammarFileName, "variableStatement"); }
		return retval;

	}
	// $ANTLR end "variableStatement"

	partial void EnterRule_variableDeclarationList();
	partial void LeaveRule_variableDeclarationList();
	// $ANTLR start "variableDeclarationList"
	// JavaScript.g3:121:1: variableDeclarationList : variableDeclaration ( ( LT )* ',' ( LT )* variableDeclaration )* -> ( ^( VAR variableDeclaration ) )+ ;
	[GrammarRule("variableDeclarationList")]
	private AstParserRuleReturnScope<object, IToken> variableDeclarationList()
	{
		EnterRule_variableDeclarationList();
		EnterRule("variableDeclarationList", 8);
		TraceIn("variableDeclarationList", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableDeclarationList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT38 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken LT40 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableDeclaration37 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclaration41 = default(AstParserRuleReturnScope<object, IToken>);

		object LT38_tree = default(object);
		object char_literal39_tree = default(object);
		object LT40_tree = default(object);
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleSubtreeStream stream_variableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaration");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationList");
		DebugLocation(121, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// JavaScript.g3:122:2: ( variableDeclaration ( ( LT )* ',' ( LT )* variableDeclaration )* -> ( ^( VAR variableDeclaration ) )+ )
			DebugEnterAlt(1);
			// JavaScript.g3:122:4: variableDeclaration ( ( LT )* ',' ( LT )* variableDeclaration )*
			{
			DebugLocation(122, 4);
			PushFollow(Follow._variableDeclaration_in_variableDeclarationList510);
			variableDeclaration37=variableDeclaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaration.Add(variableDeclaration37.Tree);
			DebugLocation(122, 24);
			// JavaScript.g3:122:24: ( ( LT )* ',' ( LT )* variableDeclaration )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				try
				{
					alt16 = dfa16.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:122:25: ( LT )* ',' ( LT )* variableDeclaration
					{
					DebugLocation(122, 25);
					// JavaScript.g3:122:25: ( LT )*
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_1 = input.LA(1);

						if ((LA14_1==LT))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch ( alt14 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:122:25: LT
							{
							DebugLocation(122, 25);
							LT38=(IToken)Match(input,LT,Follow._LT_in_variableDeclarationList513); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_LT.Add(LT38);


							}
							break;

						default:
							goto loop14;
						}
					}

					loop14:
						;

					} finally { DebugExitSubRule(14); }

					DebugLocation(122, 29);
					char_literal39=(IToken)Match(input,94,Follow._94_in_variableDeclarationList516); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal39);

					DebugLocation(122, 33);
					// JavaScript.g3:122:33: ( LT )*
					try { DebugEnterSubRule(15);
					while (true)
					{
						int alt15=2;
						try { DebugEnterDecision(15, false);
						int LA15_1 = input.LA(1);

						if ((LA15_1==LT))
						{
							alt15 = 1;
						}


						} finally { DebugExitDecision(15); }
						switch ( alt15 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:122:33: LT
							{
							DebugLocation(122, 33);
							LT40=(IToken)Match(input,LT,Follow._LT_in_variableDeclarationList518); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_LT.Add(LT40);


							}
							break;

						default:
							goto loop15;
						}
					}

					loop15:
						;

					} finally { DebugExitSubRule(15); }

					DebugLocation(122, 37);
					PushFollow(Follow._variableDeclaration_in_variableDeclarationList521);
					variableDeclaration41=variableDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_variableDeclaration.Add(variableDeclaration41.Tree);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }



			{
			// AST REWRITE
			// elements: variableDeclaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 122:59: -> ( ^( VAR variableDeclaration ) )+
			{
				DebugLocation(122, 62);
				if (!(stream_variableDeclaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_variableDeclaration.HasNext )
				{
					DebugLocation(122, 62);
					// JavaScript.g3:122:62: ^( VAR variableDeclaration )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(122, 64);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(VAR, "VAR"), root_1);

					DebugLocation(122, 68);
					adaptor.AddChild(root_1, stream_variableDeclaration.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}
				stream_variableDeclaration.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationList", 8);
			LeaveRule("variableDeclarationList", 8);
			LeaveRule_variableDeclarationList();
			if (state.backtracking > 0) { Memoize(input, 8, variableDeclarationList_StartIndex); }

		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationList"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationList"

	partial void EnterRule_variableDeclarationListNoIn();
	partial void LeaveRule_variableDeclarationListNoIn();
	// $ANTLR start "variableDeclarationListNoIn"
	// JavaScript.g3:125:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LT )* ',' ( LT )* variableDeclarationNoIn )* -> ( ^( VAR variableDeclarationNoIn ) )+ ;
	[GrammarRule("variableDeclarationListNoIn")]
	private AstParserRuleReturnScope<object, IToken> variableDeclarationListNoIn()
	{
		EnterRule_variableDeclarationListNoIn();
		EnterRule("variableDeclarationListNoIn", 9);
		TraceIn("variableDeclarationListNoIn", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableDeclarationListNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT43 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken LT45 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableDeclarationNoIn42 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarationNoIn46 = default(AstParserRuleReturnScope<object, IToken>);

		object LT43_tree = default(object);
		object char_literal44_tree = default(object);
		object LT45_tree = default(object);
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleSubtreeStream stream_variableDeclarationNoIn=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarationNoIn");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationListNoIn");
		DebugLocation(125, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// JavaScript.g3:126:2: ( variableDeclarationNoIn ( ( LT )* ',' ( LT )* variableDeclarationNoIn )* -> ( ^( VAR variableDeclarationNoIn ) )+ )
			DebugEnterAlt(1);
			// JavaScript.g3:126:4: variableDeclarationNoIn ( ( LT )* ',' ( LT )* variableDeclarationNoIn )*
			{
			DebugLocation(126, 4);
			PushFollow(Follow._variableDeclarationNoIn_in_variableDeclarationListNoIn543);
			variableDeclarationNoIn42=variableDeclarationNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclarationNoIn.Add(variableDeclarationNoIn42.Tree);
			DebugLocation(126, 28);
			// JavaScript.g3:126:28: ( ( LT )* ',' ( LT )* variableDeclarationNoIn )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				try
				{
					alt19 = dfa19.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:126:29: ( LT )* ',' ( LT )* variableDeclarationNoIn
					{
					DebugLocation(126, 29);
					// JavaScript.g3:126:29: ( LT )*
					try { DebugEnterSubRule(17);
					while (true)
					{
						int alt17=2;
						try { DebugEnterDecision(17, false);
						int LA17_1 = input.LA(1);

						if ((LA17_1==LT))
						{
							alt17 = 1;
						}


						} finally { DebugExitDecision(17); }
						switch ( alt17 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:126:29: LT
							{
							DebugLocation(126, 29);
							LT43=(IToken)Match(input,LT,Follow._LT_in_variableDeclarationListNoIn546); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_LT.Add(LT43);


							}
							break;

						default:
							goto loop17;
						}
					}

					loop17:
						;

					} finally { DebugExitSubRule(17); }

					DebugLocation(126, 33);
					char_literal44=(IToken)Match(input,94,Follow._94_in_variableDeclarationListNoIn549); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal44);

					DebugLocation(126, 37);
					// JavaScript.g3:126:37: ( LT )*
					try { DebugEnterSubRule(18);
					while (true)
					{
						int alt18=2;
						try { DebugEnterDecision(18, false);
						int LA18_1 = input.LA(1);

						if ((LA18_1==LT))
						{
							alt18 = 1;
						}


						} finally { DebugExitDecision(18); }
						switch ( alt18 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:126:37: LT
							{
							DebugLocation(126, 37);
							LT45=(IToken)Match(input,LT,Follow._LT_in_variableDeclarationListNoIn551); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_LT.Add(LT45);


							}
							break;

						default:
							goto loop18;
						}
					}

					loop18:
						;

					} finally { DebugExitSubRule(18); }

					DebugLocation(126, 41);
					PushFollow(Follow._variableDeclarationNoIn_in_variableDeclarationListNoIn554);
					variableDeclarationNoIn46=variableDeclarationNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_variableDeclarationNoIn.Add(variableDeclarationNoIn46.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }



			{
			// AST REWRITE
			// elements: variableDeclarationNoIn
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 126:67: -> ( ^( VAR variableDeclarationNoIn ) )+
			{
				DebugLocation(126, 70);
				if (!(stream_variableDeclarationNoIn.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_variableDeclarationNoIn.HasNext )
				{
					DebugLocation(126, 70);
					// JavaScript.g3:126:70: ^( VAR variableDeclarationNoIn )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(126, 72);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(VAR, "VAR"), root_1);

					DebugLocation(126, 76);
					adaptor.AddChild(root_1, stream_variableDeclarationNoIn.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}
				stream_variableDeclarationNoIn.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationListNoIn", 9);
			LeaveRule("variableDeclarationListNoIn", 9);
			LeaveRule_variableDeclarationListNoIn();
			if (state.backtracking > 0) { Memoize(input, 9, variableDeclarationListNoIn_StartIndex); }

		}
		DebugLocation(127, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationListNoIn"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationListNoIn"

	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();
	// $ANTLR start "variableDeclaration"
	// JavaScript.g3:129:1: variableDeclaration : ( Identifier -> ^( IDENTIFIER Identifier ) | Identifier ( LT )* '=' ( LT )* assignmentExpression -> ^( OPERATOR '=' ^( IDENTIFIER Identifier ) assignmentExpression ) );
	[GrammarRule("variableDeclaration")]
	private AstParserRuleReturnScope<object, IToken> variableDeclaration()
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 10);
		TraceIn("variableDeclaration", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Identifier47 = default(IToken);
		IToken Identifier48 = default(IToken);
		IToken LT49 = default(IToken);
		IToken char_literal50 = default(IToken);
		IToken LT51 = default(IToken);
		AstParserRuleReturnScope<object, IToken> assignmentExpression52 = default(AstParserRuleReturnScope<object, IToken>);

		object Identifier47_tree = default(object);
		object Identifier48_tree = default(object);
		object LT49_tree = default(object);
		object char_literal50_tree = default(object);
		object LT51_tree = default(object);
		RewriteRuleITokenStream stream_Identifier=new RewriteRuleITokenStream(adaptor,"token Identifier");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(129, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// JavaScript.g3:130:2: ( Identifier -> ^( IDENTIFIER Identifier ) | Identifier ( LT )* '=' ( LT )* assignmentExpression -> ^( OPERATOR '=' ^( IDENTIFIER Identifier ) assignmentExpression ) )
			int alt22=2;
			try { DebugEnterDecision(22, false);
			try
			{
				alt22 = dfa22.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:130:4: Identifier
				{
				DebugLocation(130, 4);
				Identifier47=(IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclaration576); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Identifier.Add(Identifier47);



				{
				// AST REWRITE
				// elements: Identifier
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 130:15: -> ^( IDENTIFIER Identifier )
				{
					DebugLocation(130, 18);
					// JavaScript.g3:130:18: ^( IDENTIFIER Identifier )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(130, 20);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_1);

					DebugLocation(130, 31);
					adaptor.AddChild(root_1, stream_Identifier.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:131:4: Identifier ( LT )* '=' ( LT )* assignmentExpression
				{
				DebugLocation(131, 4);
				Identifier48=(IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclaration589); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Identifier.Add(Identifier48);

				DebugLocation(131, 15);
				// JavaScript.g3:131:15: ( LT )*
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_1 = input.LA(1);

					if ((LA20_1==LT))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch ( alt20 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:131:15: LT
						{
						DebugLocation(131, 15);
						LT49=(IToken)Match(input,LT,Follow._LT_in_variableDeclaration591); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT49);


						}
						break;

					default:
						goto loop20;
					}
				}

				loop20:
					;

				} finally { DebugExitSubRule(20); }

				DebugLocation(131, 19);
				char_literal50=(IToken)Match(input,107,Follow._107_in_variableDeclaration594); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_107.Add(char_literal50);

				DebugLocation(131, 23);
				// JavaScript.g3:131:23: ( LT )*
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_1 = input.LA(1);

					if ((LA21_1==LT))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch ( alt21 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:131:23: LT
						{
						DebugLocation(131, 23);
						LT51=(IToken)Match(input,LT,Follow._LT_in_variableDeclaration596); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT51);


						}
						break;

					default:
						goto loop21;
					}
				}

				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(131, 27);
				PushFollow(Follow._assignmentExpression_in_variableDeclaration599);
				assignmentExpression52=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression52.Tree);


				{
				// AST REWRITE
				// elements: 107, Identifier, assignmentExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 131:48: -> ^( OPERATOR '=' ^( IDENTIFIER Identifier ) assignmentExpression )
				{
					DebugLocation(131, 51);
					// JavaScript.g3:131:51: ^( OPERATOR '=' ^( IDENTIFIER Identifier ) assignmentExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(131, 53);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(131, 62);
					adaptor.AddChild(root_1, stream_107.NextNode());
					DebugLocation(131, 66);
					// JavaScript.g3:131:66: ^( IDENTIFIER Identifier )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(131, 68);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_2);

					DebugLocation(131, 79);
					adaptor.AddChild(root_2, stream_Identifier.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(131, 91);
					adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclaration", 10);
			LeaveRule("variableDeclaration", 10);
			LeaveRule_variableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 10, variableDeclaration_StartIndex); }

		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return retval;

	}
	// $ANTLR end "variableDeclaration"

	partial void EnterRule_variableDeclarationNoIn();
	partial void LeaveRule_variableDeclarationNoIn();
	// $ANTLR start "variableDeclarationNoIn"
	// JavaScript.g3:134:1: variableDeclarationNoIn : ( Identifier -> ^( IDENTIFIER Identifier ) | Identifier ( LT )* '=' ( LT )* assignmentExpressionNoIn -> ^( OPERATOR '=' ^( IDENTIFIER Identifier ) assignmentExpressionNoIn ) );
	[GrammarRule("variableDeclarationNoIn")]
	private AstParserRuleReturnScope<object, IToken> variableDeclarationNoIn()
	{
		EnterRule_variableDeclarationNoIn();
		EnterRule("variableDeclarationNoIn", 11);
		TraceIn("variableDeclarationNoIn", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableDeclarationNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Identifier53 = default(IToken);
		IToken Identifier54 = default(IToken);
		IToken LT55 = default(IToken);
		IToken char_literal56 = default(IToken);
		IToken LT57 = default(IToken);
		AstParserRuleReturnScope<object, IToken> assignmentExpressionNoIn58 = default(AstParserRuleReturnScope<object, IToken>);

		object Identifier53_tree = default(object);
		object Identifier54_tree = default(object);
		object LT55_tree = default(object);
		object char_literal56_tree = default(object);
		object LT57_tree = default(object);
		RewriteRuleITokenStream stream_Identifier=new RewriteRuleITokenStream(adaptor,"token Identifier");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_assignmentExpressionNoIn=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpressionNoIn");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationNoIn");
		DebugLocation(134, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// JavaScript.g3:135:2: ( Identifier -> ^( IDENTIFIER Identifier ) | Identifier ( LT )* '=' ( LT )* assignmentExpressionNoIn -> ^( OPERATOR '=' ^( IDENTIFIER Identifier ) assignmentExpressionNoIn ) )
			int alt25=2;
			try { DebugEnterDecision(25, false);
			try
			{
				alt25 = dfa25.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:135:4: Identifier
				{
				DebugLocation(135, 4);
				Identifier53=(IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclarationNoIn626); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Identifier.Add(Identifier53);



				{
				// AST REWRITE
				// elements: Identifier
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 135:15: -> ^( IDENTIFIER Identifier )
				{
					DebugLocation(135, 18);
					// JavaScript.g3:135:18: ^( IDENTIFIER Identifier )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(135, 20);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_1);

					DebugLocation(135, 31);
					adaptor.AddChild(root_1, stream_Identifier.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:136:4: Identifier ( LT )* '=' ( LT )* assignmentExpressionNoIn
				{
				DebugLocation(136, 4);
				Identifier54=(IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclarationNoIn639); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Identifier.Add(Identifier54);

				DebugLocation(136, 15);
				// JavaScript.g3:136:15: ( LT )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_1 = input.LA(1);

					if ((LA23_1==LT))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:136:15: LT
						{
						DebugLocation(136, 15);
						LT55=(IToken)Match(input,LT,Follow._LT_in_variableDeclarationNoIn641); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT55);


						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }

				DebugLocation(136, 19);
				char_literal56=(IToken)Match(input,107,Follow._107_in_variableDeclarationNoIn644); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_107.Add(char_literal56);

				DebugLocation(136, 23);
				// JavaScript.g3:136:23: ( LT )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_1 = input.LA(1);

					if ((LA24_1==LT))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:136:23: LT
						{
						DebugLocation(136, 23);
						LT57=(IToken)Match(input,LT,Follow._LT_in_variableDeclarationNoIn646); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT57);


						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(136, 27);
				PushFollow(Follow._assignmentExpressionNoIn_in_variableDeclarationNoIn649);
				assignmentExpressionNoIn58=assignmentExpressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_assignmentExpressionNoIn.Add(assignmentExpressionNoIn58.Tree);


				{
				// AST REWRITE
				// elements: 107, Identifier, assignmentExpressionNoIn
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 136:52: -> ^( OPERATOR '=' ^( IDENTIFIER Identifier ) assignmentExpressionNoIn )
				{
					DebugLocation(136, 55);
					// JavaScript.g3:136:55: ^( OPERATOR '=' ^( IDENTIFIER Identifier ) assignmentExpressionNoIn )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(136, 57);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(136, 66);
					adaptor.AddChild(root_1, stream_107.NextNode());
					DebugLocation(136, 70);
					// JavaScript.g3:136:70: ^( IDENTIFIER Identifier )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(136, 72);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_2);

					DebugLocation(136, 83);
					adaptor.AddChild(root_2, stream_Identifier.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(136, 95);
					adaptor.AddChild(root_1, stream_assignmentExpressionNoIn.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationNoIn", 11);
			LeaveRule("variableDeclarationNoIn", 11);
			LeaveRule_variableDeclarationNoIn();
			if (state.backtracking > 0) { Memoize(input, 11, variableDeclarationNoIn_StartIndex); }

		}
		DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationNoIn"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationNoIn"

	partial void EnterRule_emptyStatement();
	partial void LeaveRule_emptyStatement();
	// $ANTLR start "emptyStatement"
	// JavaScript.g3:139:1: emptyStatement : ';' -> ^( EMPTYSTATEMENT ) ;
	[GrammarRule("emptyStatement")]
	private AstParserRuleReturnScope<object, IToken> emptyStatement()
	{
		EnterRule_emptyStatement();
		EnterRule("emptyStatement", 12);
		TraceIn("emptyStatement", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int emptyStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal59 = default(IToken);

		object char_literal59_tree = default(object);
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		try { DebugEnterRule(GrammarFileName, "emptyStatement");
		DebugLocation(139, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// JavaScript.g3:140:2: ( ';' -> ^( EMPTYSTATEMENT ) )
			DebugEnterAlt(1);
			// JavaScript.g3:140:4: ';'
			{
			DebugLocation(140, 4);
			char_literal59=(IToken)Match(input,102,Follow._102_in_emptyStatement676); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_102.Add(char_literal59);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 140:8: -> ^( EMPTYSTATEMENT )
			{
				DebugLocation(140, 11);
				// JavaScript.g3:140:11: ^( EMPTYSTATEMENT )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(140, 13);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EMPTYSTATEMENT, "EMPTYSTATEMENT"), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("emptyStatement", 12);
			LeaveRule("emptyStatement", 12);
			LeaveRule_emptyStatement();
			if (state.backtracking > 0) { Memoize(input, 12, emptyStatement_StartIndex); }

		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "emptyStatement"); }
		return retval;

	}
	// $ANTLR end "emptyStatement"

	partial void EnterRule_expressionStatement();
	partial void LeaveRule_expressionStatement();
	// $ANTLR start "expressionStatement"
	// JavaScript.g3:143:1: expressionStatement : expression ( LT | ';' ) !;
	[GrammarRule("expressionStatement")]
	private AstParserRuleReturnScope<object, IToken> expressionStatement()
	{
		EnterRule_expressionStatement();
		EnterRule("expressionStatement", 13);
		TraceIn("expressionStatement", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expressionStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set61 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression60 = default(AstParserRuleReturnScope<object, IToken>);

		object set61_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expressionStatement");
		DebugLocation(143, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// JavaScript.g3:144:2: ( expression ( LT | ';' ) !)
			DebugEnterAlt(1);
			// JavaScript.g3:144:4: expression ( LT | ';' ) !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(144, 4);
			PushFollow(Follow._expression_in_expressionStatement693);
			expression60=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression60.Tree);
			DebugLocation(144, 25);

			set61=(IToken)input.LT(1);
			if (input.LA(1)==LT||input.LA(1)==102)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionStatement", 13);
			LeaveRule("expressionStatement", 13);
			LeaveRule_expressionStatement();
			if (state.backtracking > 0) { Memoize(input, 13, expressionStatement_StartIndex); }

		}
		DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionStatement"); }
		return retval;

	}
	// $ANTLR end "expressionStatement"

	partial void EnterRule_ifStatement();
	partial void LeaveRule_ifStatement();
	// $ANTLR start "ifStatement"
	// JavaScript.g3:147:1: ifStatement : ( 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement ( LT )* 'else' ( LT )* statement -> ^( IF expression statement ) ^( ELSE statement ) | 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( IF expression statement ) );
	[GrammarRule("ifStatement")]
	private AstParserRuleReturnScope<object, IToken> ifStatement()
	{
		EnterRule_ifStatement();
		EnterRule("ifStatement", 14);
		TraceIn("ifStatement", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ifStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal62 = default(IToken);
		IToken LT63 = default(IToken);
		IToken char_literal64 = default(IToken);
		IToken LT65 = default(IToken);
		IToken LT67 = default(IToken);
		IToken char_literal68 = default(IToken);
		IToken LT69 = default(IToken);
		IToken LT71 = default(IToken);
		IToken string_literal72 = default(IToken);
		IToken LT73 = default(IToken);
		IToken string_literal75 = default(IToken);
		IToken LT76 = default(IToken);
		IToken char_literal77 = default(IToken);
		IToken LT78 = default(IToken);
		IToken LT80 = default(IToken);
		IToken char_literal81 = default(IToken);
		IToken LT82 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression66 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement70 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement74 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression79 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement83 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal62_tree = default(object);
		object LT63_tree = default(object);
		object char_literal64_tree = default(object);
		object LT65_tree = default(object);
		object LT67_tree = default(object);
		object char_literal68_tree = default(object);
		object LT69_tree = default(object);
		object LT71_tree = default(object);
		object string_literal72_tree = default(object);
		object LT73_tree = default(object);
		object string_literal75_tree = default(object);
		object LT76_tree = default(object);
		object char_literal77_tree = default(object);
		object LT78_tree = default(object);
		object LT80_tree = default(object);
		object char_literal81_tree = default(object);
		object LT82_tree = default(object);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "ifStatement");
		DebugLocation(147, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// JavaScript.g3:148:2: ( 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement ( LT )* 'else' ( LT )* statement -> ^( IF expression statement ) ^( ELSE statement ) | 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( IF expression statement ) )
			int alt36=2;
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==134))
			{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_JavaScript_fragment)))
				{
					alt36 = 1;
				}
				else if ((true))
				{
					alt36 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:148:4: 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement ( LT )* 'else' ( LT )* statement
				{
				DebugLocation(148, 4);
				string_literal62=(IToken)Match(input,134,Follow._134_in_ifStatement714); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_134.Add(string_literal62);

				DebugLocation(148, 9);
				// JavaScript.g3:148:9: ( LT )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_1 = input.LA(1);

					if ((LA26_1==LT))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:148:9: LT
						{
						DebugLocation(148, 9);
						LT63=(IToken)Match(input,LT,Follow._LT_in_ifStatement716); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT63);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(148, 13);
				char_literal64=(IToken)Match(input,87,Follow._87_in_ifStatement719); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_87.Add(char_literal64);

				DebugLocation(148, 17);
				// JavaScript.g3:148:17: ( LT )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_1 = input.LA(1);

					if ((LA27_1==LT))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:148:17: LT
						{
						DebugLocation(148, 17);
						LT65=(IToken)Match(input,LT,Follow._LT_in_ifStatement721); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT65);


						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }

				DebugLocation(148, 21);
				PushFollow(Follow._expression_in_ifStatement724);
				expression66=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression66.Tree);
				DebugLocation(148, 32);
				// JavaScript.g3:148:32: ( LT )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_1 = input.LA(1);

					if ((LA28_1==LT))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:148:32: LT
						{
						DebugLocation(148, 32);
						LT67=(IToken)Match(input,LT,Follow._LT_in_ifStatement726); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT67);


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(148, 36);
				char_literal68=(IToken)Match(input,88,Follow._88_in_ifStatement729); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal68);

				DebugLocation(148, 40);
				// JavaScript.g3:148:40: ( LT )*
				try { DebugEnterSubRule(29);
				while (true)
				{
					int alt29=2;
					try { DebugEnterDecision(29, false);
					int LA29_1 = input.LA(1);

					if ((LA29_1==LT))
					{
						alt29 = 1;
					}


					} finally { DebugExitDecision(29); }
					switch ( alt29 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:148:40: LT
						{
						DebugLocation(148, 40);
						LT69=(IToken)Match(input,LT,Follow._LT_in_ifStatement731); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT69);


						}
						break;

					default:
						goto loop29;
					}
				}

				loop29:
					;

				} finally { DebugExitSubRule(29); }

				DebugLocation(148, 44);
				PushFollow(Follow._statement_in_ifStatement734);
				statement70=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement70.Tree);
				DebugLocation(148, 54);
				// JavaScript.g3:148:54: ( LT )*
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_1 = input.LA(1);

					if ((LA30_1==LT))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch ( alt30 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:148:54: LT
						{
						DebugLocation(148, 54);
						LT71=(IToken)Match(input,LT,Follow._LT_in_ifStatement736); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT71);


						}
						break;

					default:
						goto loop30;
					}
				}

				loop30:
					;

				} finally { DebugExitSubRule(30); }

				DebugLocation(148, 58);
				string_literal72=(IToken)Match(input,129,Follow._129_in_ifStatement739); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_129.Add(string_literal72);

				DebugLocation(148, 65);
				// JavaScript.g3:148:65: ( LT )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_1 = input.LA(1);

					if ((LA31_1==LT))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:148:65: LT
						{
						DebugLocation(148, 65);
						LT73=(IToken)Match(input,LT,Follow._LT_in_ifStatement741); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT73);


						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }

				DebugLocation(148, 69);
				PushFollow(Follow._statement_in_ifStatement744);
				statement74=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement74.Tree);


				{
				// AST REWRITE
				// elements: expression, statement, statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 148:79: -> ^( IF expression statement ) ^( ELSE statement )
				{
					DebugLocation(148, 82);
					// JavaScript.g3:148:82: ^( IF expression statement )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(148, 84);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(IF, "IF"), root_1);

					DebugLocation(148, 87);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(148, 98);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}
					DebugLocation(148, 109);
					// JavaScript.g3:148:109: ^( ELSE statement )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(148, 111);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ELSE, "ELSE"), root_1);

					DebugLocation(148, 116);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:149:4: 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement
				{
				DebugLocation(149, 4);
				string_literal75=(IToken)Match(input,134,Follow._134_in_ifStatement765); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_134.Add(string_literal75);

				DebugLocation(149, 9);
				// JavaScript.g3:149:9: ( LT )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_1 = input.LA(1);

					if ((LA32_1==LT))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:149:9: LT
						{
						DebugLocation(149, 9);
						LT76=(IToken)Match(input,LT,Follow._LT_in_ifStatement767); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT76);


						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }

				DebugLocation(149, 13);
				char_literal77=(IToken)Match(input,87,Follow._87_in_ifStatement770); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_87.Add(char_literal77);

				DebugLocation(149, 17);
				// JavaScript.g3:149:17: ( LT )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_1 = input.LA(1);

					if ((LA33_1==LT))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:149:17: LT
						{
						DebugLocation(149, 17);
						LT78=(IToken)Match(input,LT,Follow._LT_in_ifStatement772); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT78);


						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }

				DebugLocation(149, 21);
				PushFollow(Follow._expression_in_ifStatement775);
				expression79=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression79.Tree);
				DebugLocation(149, 32);
				// JavaScript.g3:149:32: ( LT )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_1 = input.LA(1);

					if ((LA34_1==LT))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:149:32: LT
						{
						DebugLocation(149, 32);
						LT80=(IToken)Match(input,LT,Follow._LT_in_ifStatement777); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT80);


						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(149, 36);
				char_literal81=(IToken)Match(input,88,Follow._88_in_ifStatement780); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal81);

				DebugLocation(149, 40);
				// JavaScript.g3:149:40: ( LT )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_1 = input.LA(1);

					if ((LA35_1==LT))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:149:40: LT
						{
						DebugLocation(149, 40);
						LT82=(IToken)Match(input,LT,Follow._LT_in_ifStatement782); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT82);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(149, 44);
				PushFollow(Follow._statement_in_ifStatement785);
				statement83=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement83.Tree);


				{
				// AST REWRITE
				// elements: expression, statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 149:54: -> ^( IF expression statement )
				{
					DebugLocation(149, 57);
					// JavaScript.g3:149:57: ^( IF expression statement )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(149, 59);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(IF, "IF"), root_1);

					DebugLocation(149, 62);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(149, 73);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifStatement", 14);
			LeaveRule("ifStatement", 14);
			LeaveRule_ifStatement();
			if (state.backtracking > 0) { Memoize(input, 14, ifStatement_StartIndex); }

		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "ifStatement"); }
		return retval;

	}
	// $ANTLR end "ifStatement"

	partial void EnterRule_iterationStatement();
	partial void LeaveRule_iterationStatement();
	// $ANTLR start "iterationStatement"
	// JavaScript.g3:152:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
	[GrammarRule("iterationStatement")]
	private AstParserRuleReturnScope<object, IToken> iterationStatement()
	{
		EnterRule_iterationStatement();
		EnterRule("iterationStatement", 15);
		TraceIn("iterationStatement", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int iterationStatement_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> doWhileStatement84 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> whileStatement85 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forStatement86 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forInStatement87 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "iterationStatement");
		DebugLocation(152, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// JavaScript.g3:153:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
			int alt37=4;
			try { DebugEnterDecision(37, false);
			switch (input.LA(1))
			{
			case 128:
				{
				alt37 = 1;
				}
				break;
			case 148:
				{
				alt37 = 2;
				}
				break;
			case 132:
				{
				int LA37_2 = input.LA(2);

				if ((EvaluatePredicate(synpred54_JavaScript_fragment)))
				{
					alt37 = 3;
				}
				else if ((true))
				{
					alt37 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 37, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:153:4: doWhileStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(153, 4);
				PushFollow(Follow._doWhileStatement_in_iterationStatement806);
				doWhileStatement84=doWhileStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, doWhileStatement84.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:154:4: whileStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(154, 4);
				PushFollow(Follow._whileStatement_in_iterationStatement811);
				whileStatement85=whileStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whileStatement85.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g3:155:4: forStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(155, 4);
				PushFollow(Follow._forStatement_in_iterationStatement816);
				forStatement86=forStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forStatement86.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaScript.g3:156:4: forInStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(156, 4);
				PushFollow(Follow._forInStatement_in_iterationStatement821);
				forInStatement87=forInStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forInStatement87.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iterationStatement", 15);
			LeaveRule("iterationStatement", 15);
			LeaveRule_iterationStatement();
			if (state.backtracking > 0) { Memoize(input, 15, iterationStatement_StartIndex); }

		}
		DebugLocation(157, 1);
		} finally { DebugExitRule(GrammarFileName, "iterationStatement"); }
		return retval;

	}
	// $ANTLR end "iterationStatement"

	partial void EnterRule_doWhileStatement();
	partial void LeaveRule_doWhileStatement();
	// $ANTLR start "doWhileStatement"
	// JavaScript.g3:159:1: doWhileStatement : 'do' ( LT )* statement ( LT )* 'while' ( LT )* '(' expression ')' ( LT | ';' ) -> ^( DOWHILE expression statement ) ;
	[GrammarRule("doWhileStatement")]
	private AstParserRuleReturnScope<object, IToken> doWhileStatement()
	{
		EnterRule_doWhileStatement();
		EnterRule("doWhileStatement", 16);
		TraceIn("doWhileStatement", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int doWhileStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal88 = default(IToken);
		IToken LT89 = default(IToken);
		IToken LT91 = default(IToken);
		IToken string_literal92 = default(IToken);
		IToken LT93 = default(IToken);
		IToken char_literal94 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken LT97 = default(IToken);
		IToken char_literal98 = default(IToken);
		AstParserRuleReturnScope<object, IToken> statement90 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression95 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal88_tree = default(object);
		object LT89_tree = default(object);
		object LT91_tree = default(object);
		object string_literal92_tree = default(object);
		object LT93_tree = default(object);
		object char_literal94_tree = default(object);
		object char_literal96_tree = default(object);
		object LT97_tree = default(object);
		object char_literal98_tree = default(object);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "doWhileStatement");
		DebugLocation(159, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// JavaScript.g3:160:2: ( 'do' ( LT )* statement ( LT )* 'while' ( LT )* '(' expression ')' ( LT | ';' ) -> ^( DOWHILE expression statement ) )
			DebugEnterAlt(1);
			// JavaScript.g3:160:4: 'do' ( LT )* statement ( LT )* 'while' ( LT )* '(' expression ')' ( LT | ';' )
			{
			DebugLocation(160, 4);
			string_literal88=(IToken)Match(input,128,Follow._128_in_doWhileStatement832); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_128.Add(string_literal88);

			DebugLocation(160, 9);
			// JavaScript.g3:160:9: ( LT )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_1 = input.LA(1);

				if ((LA38_1==LT))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:160:9: LT
					{
					DebugLocation(160, 9);
					LT89=(IToken)Match(input,LT,Follow._LT_in_doWhileStatement834); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT89);


					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }

			DebugLocation(160, 13);
			PushFollow(Follow._statement_in_doWhileStatement837);
			statement90=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_statement.Add(statement90.Tree);
			DebugLocation(160, 23);
			// JavaScript.g3:160:23: ( LT )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_1 = input.LA(1);

				if ((LA39_1==LT))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:160:23: LT
					{
					DebugLocation(160, 23);
					LT91=(IToken)Match(input,LT,Follow._LT_in_doWhileStatement839); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT91);


					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }

			DebugLocation(160, 27);
			string_literal92=(IToken)Match(input,148,Follow._148_in_doWhileStatement842); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_148.Add(string_literal92);

			DebugLocation(160, 35);
			// JavaScript.g3:160:35: ( LT )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==LT))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:160:35: LT
					{
					DebugLocation(160, 35);
					LT93=(IToken)Match(input,LT,Follow._LT_in_doWhileStatement844); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT93);


					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }

			DebugLocation(160, 39);
			char_literal94=(IToken)Match(input,87,Follow._87_in_doWhileStatement847); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_87.Add(char_literal94);

			DebugLocation(160, 43);
			PushFollow(Follow._expression_in_doWhileStatement849);
			expression95=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression95.Tree);
			DebugLocation(160, 54);
			char_literal96=(IToken)Match(input,88,Follow._88_in_doWhileStatement851); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_88.Add(char_literal96);

			DebugLocation(160, 58);
			// JavaScript.g3:160:58: ( LT | ';' )
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_1 = input.LA(1);

			if ((LA41_1==LT))
			{
				alt41 = 1;
			}
			else if ((LA41_1==102))
			{
				alt41 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:160:59: LT
				{
				DebugLocation(160, 59);
				LT97=(IToken)Match(input,LT,Follow._LT_in_doWhileStatement854); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LT.Add(LT97);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:160:64: ';'
				{
				DebugLocation(160, 64);
				char_literal98=(IToken)Match(input,102,Follow._102_in_doWhileStatement858); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_102.Add(char_literal98);


				}
				break;

			}
			} finally { DebugExitSubRule(41); }



			{
			// AST REWRITE
			// elements: expression, statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 161:3: -> ^( DOWHILE expression statement )
			{
				DebugLocation(161, 6);
				// JavaScript.g3:161:6: ^( DOWHILE expression statement )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(161, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DOWHILE, "DOWHILE"), root_1);

				DebugLocation(161, 16);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(161, 27);
				adaptor.AddChild(root_1, stream_statement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("doWhileStatement", 16);
			LeaveRule("doWhileStatement", 16);
			LeaveRule_doWhileStatement();
			if (state.backtracking > 0) { Memoize(input, 16, doWhileStatement_StartIndex); }

		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "doWhileStatement"); }
		return retval;

	}
	// $ANTLR end "doWhileStatement"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();
	// $ANTLR start "whileStatement"
	// JavaScript.g3:164:1: whileStatement : 'while' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( WHILE expression statement ) ;
	[GrammarRule("whileStatement")]
	private AstParserRuleReturnScope<object, IToken> whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 17);
		TraceIn("whileStatement", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int whileStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal99 = default(IToken);
		IToken LT100 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken LT102 = default(IToken);
		IToken LT104 = default(IToken);
		IToken char_literal105 = default(IToken);
		IToken LT106 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression103 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement107 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal99_tree = default(object);
		object LT100_tree = default(object);
		object char_literal101_tree = default(object);
		object LT102_tree = default(object);
		object LT104_tree = default(object);
		object char_literal105_tree = default(object);
		object LT106_tree = default(object);
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(164, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// JavaScript.g3:165:2: ( 'while' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( WHILE expression statement ) )
			DebugEnterAlt(1);
			// JavaScript.g3:165:4: 'while' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement
			{
			DebugLocation(165, 4);
			string_literal99=(IToken)Match(input,148,Follow._148_in_whileStatement884); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_148.Add(string_literal99);

			DebugLocation(165, 12);
			// JavaScript.g3:165:12: ( LT )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_1 = input.LA(1);

				if ((LA42_1==LT))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:165:12: LT
					{
					DebugLocation(165, 12);
					LT100=(IToken)Match(input,LT,Follow._LT_in_whileStatement886); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT100);


					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }

			DebugLocation(165, 16);
			char_literal101=(IToken)Match(input,87,Follow._87_in_whileStatement889); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_87.Add(char_literal101);

			DebugLocation(165, 20);
			// JavaScript.g3:165:20: ( LT )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_1 = input.LA(1);

				if ((LA43_1==LT))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:165:20: LT
					{
					DebugLocation(165, 20);
					LT102=(IToken)Match(input,LT,Follow._LT_in_whileStatement891); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT102);


					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }

			DebugLocation(165, 24);
			PushFollow(Follow._expression_in_whileStatement894);
			expression103=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression103.Tree);
			DebugLocation(165, 35);
			// JavaScript.g3:165:35: ( LT )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==LT))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:165:35: LT
					{
					DebugLocation(165, 35);
					LT104=(IToken)Match(input,LT,Follow._LT_in_whileStatement896); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT104);


					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }

			DebugLocation(165, 39);
			char_literal105=(IToken)Match(input,88,Follow._88_in_whileStatement899); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_88.Add(char_literal105);

			DebugLocation(165, 43);
			// JavaScript.g3:165:43: ( LT )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==LT))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:165:43: LT
					{
					DebugLocation(165, 43);
					LT106=(IToken)Match(input,LT,Follow._LT_in_whileStatement901); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT106);


					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }

			DebugLocation(165, 47);
			PushFollow(Follow._statement_in_whileStatement904);
			statement107=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_statement.Add(statement107.Tree);


			{
			// AST REWRITE
			// elements: expression, statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 165:57: -> ^( WHILE expression statement )
			{
				DebugLocation(165, 60);
				// JavaScript.g3:165:60: ^( WHILE expression statement )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(165, 62);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(WHILE, "WHILE"), root_1);

				DebugLocation(165, 68);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(165, 79);
				adaptor.AddChild(root_1, stream_statement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 17);
			LeaveRule("whileStatement", 17);
			LeaveRule_whileStatement();
			if (state.backtracking > 0) { Memoize(input, 17, whileStatement_StartIndex); }

		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();
	// $ANTLR start "forStatement"
	// JavaScript.g3:168:1: forStatement : 'for' ( LT )* '(' ( ( LT )* forStatementInitialiserPart )? ( LT )* ';' ( ( LT )* cond= expression )? ( LT )* ';' ( ( LT )* iter= expression )? ( LT )* ')' ( LT )* statement -> ^( FOR ( forStatementInitialiserPart )? ( ^( CONDITION $cond) )? ( ^( ITERATE $iter) )? statement ) ;
	[GrammarRule("forStatement")]
	private AstParserRuleReturnScope<object, IToken> forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 18);
		TraceIn("forStatement", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal108 = default(IToken);
		IToken LT109 = default(IToken);
		IToken char_literal110 = default(IToken);
		IToken LT111 = default(IToken);
		IToken LT113 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken LT115 = default(IToken);
		IToken LT116 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken LT118 = default(IToken);
		IToken LT119 = default(IToken);
		IToken char_literal120 = default(IToken);
		IToken LT121 = default(IToken);
		AstParserRuleReturnScope<object, IToken> cond = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> iter = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forStatementInitialiserPart112 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement122 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal108_tree = default(object);
		object LT109_tree = default(object);
		object char_literal110_tree = default(object);
		object LT111_tree = default(object);
		object LT113_tree = default(object);
		object char_literal114_tree = default(object);
		object LT115_tree = default(object);
		object LT116_tree = default(object);
		object char_literal117_tree = default(object);
		object LT118_tree = default(object);
		object LT119_tree = default(object);
		object char_literal120_tree = default(object);
		object LT121_tree = default(object);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_forStatementInitialiserPart=new RewriteRuleSubtreeStream(adaptor,"rule forStatementInitialiserPart");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(168, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// JavaScript.g3:169:2: ( 'for' ( LT )* '(' ( ( LT )* forStatementInitialiserPart )? ( LT )* ';' ( ( LT )* cond= expression )? ( LT )* ';' ( ( LT )* iter= expression )? ( LT )* ')' ( LT )* statement -> ^( FOR ( forStatementInitialiserPart )? ( ^( CONDITION $cond) )? ( ^( ITERATE $iter) )? statement ) )
			DebugEnterAlt(1);
			// JavaScript.g3:169:4: 'for' ( LT )* '(' ( ( LT )* forStatementInitialiserPart )? ( LT )* ';' ( ( LT )* cond= expression )? ( LT )* ';' ( ( LT )* iter= expression )? ( LT )* ')' ( LT )* statement
			{
			DebugLocation(169, 4);
			string_literal108=(IToken)Match(input,132,Follow._132_in_forStatement926); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_132.Add(string_literal108);

			DebugLocation(169, 10);
			// JavaScript.g3:169:10: ( LT )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==LT))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:169:10: LT
					{
					DebugLocation(169, 10);
					LT109=(IToken)Match(input,LT,Follow._LT_in_forStatement928); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT109);


					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }

			DebugLocation(169, 14);
			char_literal110=(IToken)Match(input,87,Follow._87_in_forStatement931); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_87.Add(char_literal110);

			DebugLocation(169, 18);
			// JavaScript.g3:169:18: ( ( LT )* forStatementInitialiserPart )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			try
			{
				alt48 = dfa48.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:169:19: ( LT )* forStatementInitialiserPart
				{
				DebugLocation(169, 19);
				// JavaScript.g3:169:19: ( LT )*
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_1 = input.LA(1);

					if ((LA47_1==LT))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch ( alt47 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:169:19: LT
						{
						DebugLocation(169, 19);
						LT111=(IToken)Match(input,LT,Follow._LT_in_forStatement934); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT111);


						}
						break;

					default:
						goto loop47;
					}
				}

				loop47:
					;

				} finally { DebugExitSubRule(47); }

				DebugLocation(169, 23);
				PushFollow(Follow._forStatementInitialiserPart_in_forStatement937);
				forStatementInitialiserPart112=forStatementInitialiserPart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_forStatementInitialiserPart.Add(forStatementInitialiserPart112.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(48); }

			DebugLocation(169, 53);
			// JavaScript.g3:169:53: ( LT )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_1 = input.LA(1);

				if ((LA49_1==LT))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:169:53: LT
					{
					DebugLocation(169, 53);
					LT113=(IToken)Match(input,LT,Follow._LT_in_forStatement941); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT113);


					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }

			DebugLocation(169, 57);
			char_literal114=(IToken)Match(input,102,Follow._102_in_forStatement944); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_102.Add(char_literal114);

			DebugLocation(169, 61);
			// JavaScript.g3:169:61: ( ( LT )* cond= expression )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			try
			{
				alt51 = dfa51.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:169:62: ( LT )* cond= expression
				{
				DebugLocation(169, 62);
				// JavaScript.g3:169:62: ( LT )*
				try { DebugEnterSubRule(50);
				while (true)
				{
					int alt50=2;
					try { DebugEnterDecision(50, false);
					int LA50_1 = input.LA(1);

					if ((LA50_1==LT))
					{
						alt50 = 1;
					}


					} finally { DebugExitDecision(50); }
					switch ( alt50 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:169:62: LT
						{
						DebugLocation(169, 62);
						LT115=(IToken)Match(input,LT,Follow._LT_in_forStatement947); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT115);


						}
						break;

					default:
						goto loop50;
					}
				}

				loop50:
					;

				} finally { DebugExitSubRule(50); }

				DebugLocation(169, 70);
				PushFollow(Follow._expression_in_forStatement952);
				cond=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(cond.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(51); }

			DebugLocation(169, 84);
			// JavaScript.g3:169:84: ( LT )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_1 = input.LA(1);

				if ((LA52_1==LT))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:169:84: LT
					{
					DebugLocation(169, 84);
					LT116=(IToken)Match(input,LT,Follow._LT_in_forStatement956); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT116);


					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }

			DebugLocation(169, 88);
			char_literal117=(IToken)Match(input,102,Follow._102_in_forStatement959); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_102.Add(char_literal117);

			DebugLocation(169, 92);
			// JavaScript.g3:169:92: ( ( LT )* iter= expression )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			try
			{
				alt54 = dfa54.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:169:93: ( LT )* iter= expression
				{
				DebugLocation(169, 93);
				// JavaScript.g3:169:93: ( LT )*
				try { DebugEnterSubRule(53);
				while (true)
				{
					int alt53=2;
					try { DebugEnterDecision(53, false);
					int LA53_1 = input.LA(1);

					if ((LA53_1==LT))
					{
						alt53 = 1;
					}


					} finally { DebugExitDecision(53); }
					switch ( alt53 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:169:93: LT
						{
						DebugLocation(169, 93);
						LT118=(IToken)Match(input,LT,Follow._LT_in_forStatement962); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT118);


						}
						break;

					default:
						goto loop53;
					}
				}

				loop53:
					;

				} finally { DebugExitSubRule(53); }

				DebugLocation(169, 101);
				PushFollow(Follow._expression_in_forStatement967);
				iter=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(iter.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(169, 115);
			// JavaScript.g3:169:115: ( LT )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_1 = input.LA(1);

				if ((LA55_1==LT))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:169:115: LT
					{
					DebugLocation(169, 115);
					LT119=(IToken)Match(input,LT,Follow._LT_in_forStatement971); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT119);


					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }

			DebugLocation(169, 119);
			char_literal120=(IToken)Match(input,88,Follow._88_in_forStatement974); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_88.Add(char_literal120);

			DebugLocation(169, 123);
			// JavaScript.g3:169:123: ( LT )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==LT))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:169:123: LT
					{
					DebugLocation(169, 123);
					LT121=(IToken)Match(input,LT,Follow._LT_in_forStatement976); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT121);


					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }

			DebugLocation(169, 127);
			PushFollow(Follow._statement_in_forStatement979);
			statement122=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_statement.Add(statement122.Tree);


			{
			// AST REWRITE
			// elements: forStatementInitialiserPart, cond, iter, statement
			// token labels: 
			// rule labels: cond, iter, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond",cond!=null?cond.Tree:null);
			RewriteRuleSubtreeStream stream_iter=new RewriteRuleSubtreeStream(adaptor,"rule iter",iter!=null?iter.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 170:3: -> ^( FOR ( forStatementInitialiserPart )? ( ^( CONDITION $cond) )? ( ^( ITERATE $iter) )? statement )
			{
				DebugLocation(170, 6);
				// JavaScript.g3:170:6: ^( FOR ( forStatementInitialiserPart )? ( ^( CONDITION $cond) )? ( ^( ITERATE $iter) )? statement )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(170, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FOR, "FOR"), root_1);

				DebugLocation(170, 12);
				// JavaScript.g3:170:12: ( forStatementInitialiserPart )?
				if (stream_forStatementInitialiserPart.HasNext)
				{
					DebugLocation(170, 12);
					adaptor.AddChild(root_1, stream_forStatementInitialiserPart.NextTree());

				}
				stream_forStatementInitialiserPart.Reset();
				DebugLocation(170, 41);
				// JavaScript.g3:170:41: ( ^( CONDITION $cond) )?
				if (stream_cond.HasNext)
				{
					DebugLocation(170, 41);
					// JavaScript.g3:170:41: ^( CONDITION $cond)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(170, 43);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(CONDITION, "CONDITION"), root_2);

					DebugLocation(170, 54);
					adaptor.AddChild(root_2, stream_cond.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_cond.Reset();
				DebugLocation(170, 61);
				// JavaScript.g3:170:61: ( ^( ITERATE $iter) )?
				if (stream_iter.HasNext)
				{
					DebugLocation(170, 61);
					// JavaScript.g3:170:61: ^( ITERATE $iter)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(170, 63);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(ITERATE, "ITERATE"), root_2);

					DebugLocation(170, 72);
					adaptor.AddChild(root_2, stream_iter.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_iter.Reset();
				DebugLocation(170, 79);
				adaptor.AddChild(root_1, stream_statement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forStatement", 18);
			LeaveRule("forStatement", 18);
			LeaveRule_forStatement();
			if (state.backtracking > 0) { Memoize(input, 18, forStatement_StartIndex); }

		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return retval;

	}
	// $ANTLR end "forStatement"

	partial void EnterRule_forStatementInitialiserPart();
	partial void LeaveRule_forStatementInitialiserPart();
	// $ANTLR start "forStatementInitialiserPart"
	// JavaScript.g3:173:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ! ( LT !)* variableDeclarationListNoIn );
	[GrammarRule("forStatementInitialiserPart")]
	private AstParserRuleReturnScope<object, IToken> forStatementInitialiserPart()
	{
		EnterRule_forStatementInitialiserPart();
		EnterRule("forStatementInitialiserPart", 19);
		TraceIn("forStatementInitialiserPart", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forStatementInitialiserPart_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal124 = default(IToken);
		IToken LT125 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expressionNoIn123 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarationListNoIn126 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal124_tree = default(object);
		object LT125_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forStatementInitialiserPart");
		DebugLocation(173, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// JavaScript.g3:174:2: ( expressionNoIn | 'var' ! ( LT !)* variableDeclarationListNoIn )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==Identifier||LA58_1==NumericLiteral||LA58_1==RegularExpressionLiteral||LA58_1==StringLiteral||LA58_1==79||LA58_1==87||(LA58_1>=91 && LA58_1<=92)||(LA58_1>=95 && LA58_1<=96)||LA58_1==117||LA58_1==127||LA58_1==130||LA58_1==133||(LA58_1>=137 && LA58_1<=138)||LA58_1==141||LA58_1==143||LA58_1==145||LA58_1==147||LA58_1==150||LA58_1==155))
			{
				alt58 = 1;
			}
			else if ((LA58_1==146))
			{
				alt58 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:174:4: expressionNoIn
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(174, 4);
				PushFollow(Follow._expressionNoIn_in_forStatementInitialiserPart1020);
				expressionNoIn123=expressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressionNoIn123.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:175:4: 'var' ! ( LT !)* variableDeclarationListNoIn
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(175, 9);
				string_literal124=(IToken)Match(input,146,Follow._146_in_forStatementInitialiserPart1025); if (state.failed) return retval;
				DebugLocation(175, 13);
				// JavaScript.g3:175:13: ( LT !)*
				try { DebugEnterSubRule(57);
				while (true)
				{
					int alt57=2;
					try { DebugEnterDecision(57, false);
					int LA57_1 = input.LA(1);

					if ((LA57_1==LT))
					{
						alt57 = 1;
					}


					} finally { DebugExitDecision(57); }
					switch ( alt57 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:175:13: LT !
						{
						DebugLocation(175, 13);
						LT125=(IToken)Match(input,LT,Follow._LT_in_forStatementInitialiserPart1028); if (state.failed) return retval;

						}
						break;

					default:
						goto loop57;
					}
				}

				loop57:
					;

				} finally { DebugExitSubRule(57); }

				DebugLocation(175, 16);
				PushFollow(Follow._variableDeclarationListNoIn_in_forStatementInitialiserPart1032);
				variableDeclarationListNoIn126=variableDeclarationListNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationListNoIn126.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forStatementInitialiserPart", 19);
			LeaveRule("forStatementInitialiserPart", 19);
			LeaveRule_forStatementInitialiserPart();
			if (state.backtracking > 0) { Memoize(input, 19, forStatementInitialiserPart_StartIndex); }

		}
		DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatementInitialiserPart"); }
		return retval;

	}
	// $ANTLR end "forStatementInitialiserPart"

	partial void EnterRule_forInStatement();
	partial void LeaveRule_forInStatement();
	// $ANTLR start "forInStatement"
	// JavaScript.g3:178:1: forInStatement : 'for' ( LT )* '(' ( LT )* forInStatementInitialiserPart ( LT )* 'in' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) ;
	[GrammarRule("forInStatement")]
	private AstParserRuleReturnScope<object, IToken> forInStatement()
	{
		EnterRule_forInStatement();
		EnterRule("forInStatement", 20);
		TraceIn("forInStatement", 20);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forInStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal127 = default(IToken);
		IToken LT128 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken LT130 = default(IToken);
		IToken LT132 = default(IToken);
		IToken string_literal133 = default(IToken);
		IToken LT134 = default(IToken);
		IToken LT136 = default(IToken);
		IToken char_literal137 = default(IToken);
		IToken LT138 = default(IToken);
		AstParserRuleReturnScope<object, IToken> forInStatementInitialiserPart131 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression135 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement139 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal127_tree = default(object);
		object LT128_tree = default(object);
		object char_literal129_tree = default(object);
		object LT130_tree = default(object);
		object LT132_tree = default(object);
		object string_literal133_tree = default(object);
		object LT134_tree = default(object);
		object LT136_tree = default(object);
		object char_literal137_tree = default(object);
		object LT138_tree = default(object);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_forInStatementInitialiserPart=new RewriteRuleSubtreeStream(adaptor,"rule forInStatementInitialiserPart");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "forInStatement");
		DebugLocation(178, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// JavaScript.g3:179:2: ( 'for' ( LT )* '(' ( LT )* forInStatementInitialiserPart ( LT )* 'in' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) )
			DebugEnterAlt(1);
			// JavaScript.g3:179:4: 'for' ( LT )* '(' ( LT )* forInStatementInitialiserPart ( LT )* 'in' ( LT )* expression ( LT )* ')' ( LT )* statement
			{
			DebugLocation(179, 4);
			string_literal127=(IToken)Match(input,132,Follow._132_in_forInStatement1044); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_132.Add(string_literal127);

			DebugLocation(179, 10);
			// JavaScript.g3:179:10: ( LT )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_1 = input.LA(1);

				if ((LA59_1==LT))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:179:10: LT
					{
					DebugLocation(179, 10);
					LT128=(IToken)Match(input,LT,Follow._LT_in_forInStatement1046); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT128);


					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }

			DebugLocation(179, 14);
			char_literal129=(IToken)Match(input,87,Follow._87_in_forInStatement1049); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_87.Add(char_literal129);

			DebugLocation(179, 18);
			// JavaScript.g3:179:18: ( LT )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_1 = input.LA(1);

				if ((LA60_1==LT))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:179:18: LT
					{
					DebugLocation(179, 18);
					LT130=(IToken)Match(input,LT,Follow._LT_in_forInStatement1051); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT130);


					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }

			DebugLocation(179, 22);
			PushFollow(Follow._forInStatementInitialiserPart_in_forInStatement1054);
			forInStatementInitialiserPart131=forInStatementInitialiserPart();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_forInStatementInitialiserPart.Add(forInStatementInitialiserPart131.Tree);
			DebugLocation(179, 52);
			// JavaScript.g3:179:52: ( LT )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_1 = input.LA(1);

				if ((LA61_1==LT))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:179:52: LT
					{
					DebugLocation(179, 52);
					LT132=(IToken)Match(input,LT,Follow._LT_in_forInStatement1056); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT132);


					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(179, 56);
			string_literal133=(IToken)Match(input,135,Follow._135_in_forInStatement1059); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_135.Add(string_literal133);

			DebugLocation(179, 61);
			// JavaScript.g3:179:61: ( LT )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_1 = input.LA(1);

				if ((LA62_1==LT))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:179:61: LT
					{
					DebugLocation(179, 61);
					LT134=(IToken)Match(input,LT,Follow._LT_in_forInStatement1061); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT134);


					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }

			DebugLocation(179, 65);
			PushFollow(Follow._expression_in_forInStatement1064);
			expression135=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression135.Tree);
			DebugLocation(179, 76);
			// JavaScript.g3:179:76: ( LT )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_1 = input.LA(1);

				if ((LA63_1==LT))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:179:76: LT
					{
					DebugLocation(179, 76);
					LT136=(IToken)Match(input,LT,Follow._LT_in_forInStatement1066); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT136);


					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }

			DebugLocation(179, 80);
			char_literal137=(IToken)Match(input,88,Follow._88_in_forInStatement1069); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_88.Add(char_literal137);

			DebugLocation(179, 84);
			// JavaScript.g3:179:84: ( LT )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_1 = input.LA(1);

				if ((LA64_1==LT))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:179:84: LT
					{
					DebugLocation(179, 84);
					LT138=(IToken)Match(input,LT,Follow._LT_in_forInStatement1071); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT138);


					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }

			DebugLocation(179, 88);
			PushFollow(Follow._statement_in_forInStatement1074);
			statement139=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_statement.Add(statement139.Tree);


			{
			// AST REWRITE
			// elements: forInStatementInitialiserPart, expression, statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 180:3: -> ^( FORIN forInStatementInitialiserPart expression statement )
			{
				DebugLocation(180, 6);
				// JavaScript.g3:180:6: ^( FORIN forInStatementInitialiserPart expression statement )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(180, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FORIN, "FORIN"), root_1);

				DebugLocation(180, 14);
				adaptor.AddChild(root_1, stream_forInStatementInitialiserPart.NextTree());
				DebugLocation(180, 44);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(180, 55);
				adaptor.AddChild(root_1, stream_statement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInStatement", 20);
			LeaveRule("forInStatement", 20);
			LeaveRule_forInStatement();
			if (state.backtracking > 0) { Memoize(input, 20, forInStatement_StartIndex); }

		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "forInStatement"); }
		return retval;

	}
	// $ANTLR end "forInStatement"

	partial void EnterRule_forInStatementInitialiserPart();
	partial void LeaveRule_forInStatementInitialiserPart();
	// $ANTLR start "forInStatementInitialiserPart"
	// JavaScript.g3:183:1: forInStatementInitialiserPart : ( leftHandSideExpression | 'var' ! ( LT !)* variableDeclarationNoIn );
	[GrammarRule("forInStatementInitialiserPart")]
	private AstParserRuleReturnScope<object, IToken> forInStatementInitialiserPart()
	{
		EnterRule_forInStatementInitialiserPart();
		EnterRule("forInStatementInitialiserPart", 21);
		TraceIn("forInStatementInitialiserPart", 21);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forInStatementInitialiserPart_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal141 = default(IToken);
		IToken LT142 = default(IToken);
		AstParserRuleReturnScope<object, IToken> leftHandSideExpression140 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarationNoIn143 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal141_tree = default(object);
		object LT142_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forInStatementInitialiserPart");
		DebugLocation(183, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// JavaScript.g3:184:2: ( leftHandSideExpression | 'var' ! ( LT !)* variableDeclarationNoIn )
			int alt66=2;
			try { DebugEnterDecision(66, false);
			int LA66_1 = input.LA(1);

			if ((LA66_1==Identifier||LA66_1==NumericLiteral||LA66_1==RegularExpressionLiteral||LA66_1==StringLiteral||LA66_1==87||LA66_1==117||LA66_1==130||LA66_1==133||(LA66_1>=137 && LA66_1<=138)||LA66_1==141||LA66_1==143||LA66_1==150))
			{
				alt66 = 1;
			}
			else if ((LA66_1==146))
			{
				alt66 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:184:4: leftHandSideExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(184, 4);
				PushFollow(Follow._leftHandSideExpression_in_forInStatementInitialiserPart1100);
				leftHandSideExpression140=leftHandSideExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, leftHandSideExpression140.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:185:4: 'var' ! ( LT !)* variableDeclarationNoIn
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(185, 9);
				string_literal141=(IToken)Match(input,146,Follow._146_in_forInStatementInitialiserPart1105); if (state.failed) return retval;
				DebugLocation(185, 13);
				// JavaScript.g3:185:13: ( LT !)*
				try { DebugEnterSubRule(65);
				while (true)
				{
					int alt65=2;
					try { DebugEnterDecision(65, false);
					int LA65_1 = input.LA(1);

					if ((LA65_1==LT))
					{
						alt65 = 1;
					}


					} finally { DebugExitDecision(65); }
					switch ( alt65 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:185:13: LT !
						{
						DebugLocation(185, 13);
						LT142=(IToken)Match(input,LT,Follow._LT_in_forInStatementInitialiserPart1108); if (state.failed) return retval;

						}
						break;

					default:
						goto loop65;
					}
				}

				loop65:
					;

				} finally { DebugExitSubRule(65); }

				DebugLocation(185, 16);
				PushFollow(Follow._variableDeclarationNoIn_in_forInStatementInitialiserPart1112);
				variableDeclarationNoIn143=variableDeclarationNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationNoIn143.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInStatementInitialiserPart", 21);
			LeaveRule("forInStatementInitialiserPart", 21);
			LeaveRule_forInStatementInitialiserPart();
			if (state.backtracking > 0) { Memoize(input, 21, forInStatementInitialiserPart_StartIndex); }

		}
		DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "forInStatementInitialiserPart"); }
		return retval;

	}
	// $ANTLR end "forInStatementInitialiserPart"

	partial void EnterRule_continueStatement();
	partial void LeaveRule_continueStatement();
	// $ANTLR start "continueStatement"
	// JavaScript.g3:188:1: continueStatement : 'continue' ( Identifier )? ( LT | ';' ) -> ^( CONTINUE ( ^( IDENTIFIER Identifier ) )? ) ;
	[GrammarRule("continueStatement")]
	private AstParserRuleReturnScope<object, IToken> continueStatement()
	{
		EnterRule_continueStatement();
		EnterRule("continueStatement", 22);
		TraceIn("continueStatement", 22);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int continueStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal144 = default(IToken);
		IToken Identifier145 = default(IToken);
		IToken LT146 = default(IToken);
		IToken char_literal147 = default(IToken);

		object string_literal144_tree = default(object);
		object Identifier145_tree = default(object);
		object LT146_tree = default(object);
		object char_literal147_tree = default(object);
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_Identifier=new RewriteRuleITokenStream(adaptor,"token Identifier");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		try { DebugEnterRule(GrammarFileName, "continueStatement");
		DebugLocation(188, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// JavaScript.g3:189:2: ( 'continue' ( Identifier )? ( LT | ';' ) -> ^( CONTINUE ( ^( IDENTIFIER Identifier ) )? ) )
			DebugEnterAlt(1);
			// JavaScript.g3:189:4: 'continue' ( Identifier )? ( LT | ';' )
			{
			DebugLocation(189, 4);
			string_literal144=(IToken)Match(input,124,Follow._124_in_continueStatement1123); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_124.Add(string_literal144);

			DebugLocation(189, 15);
			// JavaScript.g3:189:15: ( Identifier )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_1 = input.LA(1);

			if ((LA67_1==Identifier))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:189:15: Identifier
				{
				DebugLocation(189, 15);
				Identifier145=(IToken)Match(input,Identifier,Follow._Identifier_in_continueStatement1125); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Identifier.Add(Identifier145);


				}
				break;

			}
			} finally { DebugExitSubRule(67); }

			DebugLocation(189, 27);
			// JavaScript.g3:189:27: ( LT | ';' )
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_1 = input.LA(1);

			if ((LA68_1==LT))
			{
				alt68 = 1;
			}
			else if ((LA68_1==102))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:189:28: LT
				{
				DebugLocation(189, 28);
				LT146=(IToken)Match(input,LT,Follow._LT_in_continueStatement1129); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LT.Add(LT146);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:189:33: ';'
				{
				DebugLocation(189, 33);
				char_literal147=(IToken)Match(input,102,Follow._102_in_continueStatement1133); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_102.Add(char_literal147);


				}
				break;

			}
			} finally { DebugExitSubRule(68); }



			{
			// AST REWRITE
			// elements: Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 189:38: -> ^( CONTINUE ( ^( IDENTIFIER Identifier ) )? )
			{
				DebugLocation(189, 41);
				// JavaScript.g3:189:41: ^( CONTINUE ( ^( IDENTIFIER Identifier ) )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(189, 43);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CONTINUE, "CONTINUE"), root_1);

				DebugLocation(189, 52);
				// JavaScript.g3:189:52: ( ^( IDENTIFIER Identifier ) )?
				if (stream_Identifier.HasNext)
				{
					DebugLocation(189, 52);
					// JavaScript.g3:189:52: ^( IDENTIFIER Identifier )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(189, 54);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_2);

					DebugLocation(189, 65);
					adaptor.AddChild(root_2, stream_Identifier.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_Identifier.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("continueStatement", 22);
			LeaveRule("continueStatement", 22);
			LeaveRule_continueStatement();
			if (state.backtracking > 0) { Memoize(input, 22, continueStatement_StartIndex); }

		}
		DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "continueStatement"); }
		return retval;

	}
	// $ANTLR end "continueStatement"

	partial void EnterRule_breakStatement();
	partial void LeaveRule_breakStatement();
	// $ANTLR start "breakStatement"
	// JavaScript.g3:192:1: breakStatement : 'break' ( Identifier )? ( LT | ';' ) -> ^( BREAK ( ^( IDENTIFIER Identifier ) )? ) ;
	[GrammarRule("breakStatement")]
	private AstParserRuleReturnScope<object, IToken> breakStatement()
	{
		EnterRule_breakStatement();
		EnterRule("breakStatement", 23);
		TraceIn("breakStatement", 23);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int breakStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal148 = default(IToken);
		IToken Identifier149 = default(IToken);
		IToken LT150 = default(IToken);
		IToken char_literal151 = default(IToken);

		object string_literal148_tree = default(object);
		object Identifier149_tree = default(object);
		object LT150_tree = default(object);
		object char_literal151_tree = default(object);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_Identifier=new RewriteRuleITokenStream(adaptor,"token Identifier");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		try { DebugEnterRule(GrammarFileName, "breakStatement");
		DebugLocation(192, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// JavaScript.g3:193:2: ( 'break' ( Identifier )? ( LT | ';' ) -> ^( BREAK ( ^( IDENTIFIER Identifier ) )? ) )
			DebugEnterAlt(1);
			// JavaScript.g3:193:4: 'break' ( Identifier )? ( LT | ';' )
			{
			DebugLocation(193, 4);
			string_literal148=(IToken)Match(input,121,Follow._121_in_breakStatement1158); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_121.Add(string_literal148);

			DebugLocation(193, 12);
			// JavaScript.g3:193:12: ( Identifier )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==Identifier))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:193:12: Identifier
				{
				DebugLocation(193, 12);
				Identifier149=(IToken)Match(input,Identifier,Follow._Identifier_in_breakStatement1160); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Identifier.Add(Identifier149);


				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(193, 24);
			// JavaScript.g3:193:24: ( LT | ';' )
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_1 = input.LA(1);

			if ((LA70_1==LT))
			{
				alt70 = 1;
			}
			else if ((LA70_1==102))
			{
				alt70 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 70, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:193:25: LT
				{
				DebugLocation(193, 25);
				LT150=(IToken)Match(input,LT,Follow._LT_in_breakStatement1164); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LT.Add(LT150);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:193:30: ';'
				{
				DebugLocation(193, 30);
				char_literal151=(IToken)Match(input,102,Follow._102_in_breakStatement1168); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_102.Add(char_literal151);


				}
				break;

			}
			} finally { DebugExitSubRule(70); }



			{
			// AST REWRITE
			// elements: Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 193:35: -> ^( BREAK ( ^( IDENTIFIER Identifier ) )? )
			{
				DebugLocation(193, 38);
				// JavaScript.g3:193:38: ^( BREAK ( ^( IDENTIFIER Identifier ) )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(193, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(BREAK, "BREAK"), root_1);

				DebugLocation(193, 46);
				// JavaScript.g3:193:46: ( ^( IDENTIFIER Identifier ) )?
				if (stream_Identifier.HasNext)
				{
					DebugLocation(193, 46);
					// JavaScript.g3:193:46: ^( IDENTIFIER Identifier )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(193, 48);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_2);

					DebugLocation(193, 59);
					adaptor.AddChild(root_2, stream_Identifier.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_Identifier.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("breakStatement", 23);
			LeaveRule("breakStatement", 23);
			LeaveRule_breakStatement();
			if (state.backtracking > 0) { Memoize(input, 23, breakStatement_StartIndex); }

		}
		DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "breakStatement"); }
		return retval;

	}
	// $ANTLR end "breakStatement"

	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();
	// $ANTLR start "returnStatement"
	// JavaScript.g3:196:1: returnStatement : 'return' ( expression )? ( LT | ';' ) -> ^( RETURN ( expression )? ) ;
	[GrammarRule("returnStatement")]
	private AstParserRuleReturnScope<object, IToken> returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 24);
		TraceIn("returnStatement", 24);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int returnStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal152 = default(IToken);
		IToken LT154 = default(IToken);
		IToken char_literal155 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression153 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal152_tree = default(object);
		object LT154_tree = default(object);
		object char_literal155_tree = default(object);
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(196, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// JavaScript.g3:197:2: ( 'return' ( expression )? ( LT | ';' ) -> ^( RETURN ( expression )? ) )
			DebugEnterAlt(1);
			// JavaScript.g3:197:4: 'return' ( expression )? ( LT | ';' )
			{
			DebugLocation(197, 4);
			string_literal152=(IToken)Match(input,139,Follow._139_in_returnStatement1193); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_139.Add(string_literal152);

			DebugLocation(197, 13);
			// JavaScript.g3:197:13: ( expression )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_1 = input.LA(1);

			if ((LA71_1==Identifier||LA71_1==NumericLiteral||LA71_1==RegularExpressionLiteral||LA71_1==StringLiteral||LA71_1==79||LA71_1==87||(LA71_1>=91 && LA71_1<=92)||(LA71_1>=95 && LA71_1<=96)||LA71_1==117||LA71_1==127||LA71_1==130||LA71_1==133||(LA71_1>=137 && LA71_1<=138)||LA71_1==141||LA71_1==143||LA71_1==145||LA71_1==147||LA71_1==150||LA71_1==155))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:197:13: expression
				{
				DebugLocation(197, 13);
				PushFollow(Follow._expression_in_returnStatement1195);
				expression153=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression153.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(197, 25);
			// JavaScript.g3:197:25: ( LT | ';' )
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_1 = input.LA(1);

			if ((LA72_1==LT))
			{
				alt72 = 1;
			}
			else if ((LA72_1==102))
			{
				alt72 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:197:26: LT
				{
				DebugLocation(197, 26);
				LT154=(IToken)Match(input,LT,Follow._LT_in_returnStatement1199); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LT.Add(LT154);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:197:31: ';'
				{
				DebugLocation(197, 31);
				char_literal155=(IToken)Match(input,102,Follow._102_in_returnStatement1203); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_102.Add(char_literal155);


				}
				break;

			}
			} finally { DebugExitSubRule(72); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 197:36: -> ^( RETURN ( expression )? )
			{
				DebugLocation(197, 39);
				// JavaScript.g3:197:39: ^( RETURN ( expression )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(197, 41);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(RETURN, "RETURN"), root_1);

				DebugLocation(197, 48);
				// JavaScript.g3:197:48: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(197, 48);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("returnStatement", 24);
			LeaveRule("returnStatement", 24);
			LeaveRule_returnStatement();
			if (state.backtracking > 0) { Memoize(input, 24, returnStatement_StartIndex); }

		}
		DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return retval;

	}
	// $ANTLR end "returnStatement"

	partial void EnterRule_withStatement();
	partial void LeaveRule_withStatement();
	// $ANTLR start "withStatement"
	// JavaScript.g3:200:1: withStatement : 'with' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( WITH expression ) ;
	[GrammarRule("withStatement")]
	private AstParserRuleReturnScope<object, IToken> withStatement()
	{
		EnterRule_withStatement();
		EnterRule("withStatement", 25);
		TraceIn("withStatement", 25);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int withStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal156 = default(IToken);
		IToken LT157 = default(IToken);
		IToken char_literal158 = default(IToken);
		IToken LT159 = default(IToken);
		IToken LT161 = default(IToken);
		IToken char_literal162 = default(IToken);
		IToken LT163 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression160 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement164 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal156_tree = default(object);
		object LT157_tree = default(object);
		object char_literal158_tree = default(object);
		object LT159_tree = default(object);
		object LT161_tree = default(object);
		object char_literal162_tree = default(object);
		object LT163_tree = default(object);
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "withStatement");
		DebugLocation(200, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// JavaScript.g3:201:2: ( 'with' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( WITH expression ) )
			DebugEnterAlt(1);
			// JavaScript.g3:201:4: 'with' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement
			{
			DebugLocation(201, 4);
			string_literal156=(IToken)Match(input,149,Follow._149_in_withStatement1225); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_149.Add(string_literal156);

			DebugLocation(201, 11);
			// JavaScript.g3:201:11: ( LT )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_1 = input.LA(1);

				if ((LA73_1==LT))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:201:11: LT
					{
					DebugLocation(201, 11);
					LT157=(IToken)Match(input,LT,Follow._LT_in_withStatement1227); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT157);


					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }

			DebugLocation(201, 15);
			char_literal158=(IToken)Match(input,87,Follow._87_in_withStatement1230); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_87.Add(char_literal158);

			DebugLocation(201, 19);
			// JavaScript.g3:201:19: ( LT )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_1 = input.LA(1);

				if ((LA74_1==LT))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:201:19: LT
					{
					DebugLocation(201, 19);
					LT159=(IToken)Match(input,LT,Follow._LT_in_withStatement1232); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT159);


					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }

			DebugLocation(201, 23);
			PushFollow(Follow._expression_in_withStatement1235);
			expression160=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression160.Tree);
			DebugLocation(201, 34);
			// JavaScript.g3:201:34: ( LT )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_1 = input.LA(1);

				if ((LA75_1==LT))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:201:34: LT
					{
					DebugLocation(201, 34);
					LT161=(IToken)Match(input,LT,Follow._LT_in_withStatement1237); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT161);


					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }

			DebugLocation(201, 38);
			char_literal162=(IToken)Match(input,88,Follow._88_in_withStatement1240); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_88.Add(char_literal162);

			DebugLocation(201, 42);
			// JavaScript.g3:201:42: ( LT )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_1 = input.LA(1);

				if ((LA76_1==LT))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:201:42: LT
					{
					DebugLocation(201, 42);
					LT163=(IToken)Match(input,LT,Follow._LT_in_withStatement1242); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT163);


					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }

			DebugLocation(201, 46);
			PushFollow(Follow._statement_in_withStatement1245);
			statement164=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_statement.Add(statement164.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 201:56: -> ^( WITH expression )
			{
				DebugLocation(201, 59);
				// JavaScript.g3:201:59: ^( WITH expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(201, 61);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(WITH, "WITH"), root_1);

				DebugLocation(201, 66);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("withStatement", 25);
			LeaveRule("withStatement", 25);
			LeaveRule_withStatement();
			if (state.backtracking > 0) { Memoize(input, 25, withStatement_StartIndex); }

		}
		DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "withStatement"); }
		return retval;

	}
	// $ANTLR end "withStatement"

	partial void EnterRule_labelledStatement();
	partial void LeaveRule_labelledStatement();
	// $ANTLR start "labelledStatement"
	// JavaScript.g3:204:1: labelledStatement : Identifier ( LT )* ':' ( LT )* statement -> ^( ':' Identifier statement ) ;
	[GrammarRule("labelledStatement")]
	private AstParserRuleReturnScope<object, IToken> labelledStatement()
	{
		EnterRule_labelledStatement();
		EnterRule("labelledStatement", 26);
		TraceIn("labelledStatement", 26);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int labelledStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Identifier165 = default(IToken);
		IToken LT166 = default(IToken);
		IToken char_literal167 = default(IToken);
		IToken LT168 = default(IToken);
		AstParserRuleReturnScope<object, IToken> statement169 = default(AstParserRuleReturnScope<object, IToken>);

		object Identifier165_tree = default(object);
		object LT166_tree = default(object);
		object char_literal167_tree = default(object);
		object LT168_tree = default(object);
		RewriteRuleITokenStream stream_Identifier=new RewriteRuleITokenStream(adaptor,"token Identifier");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "labelledStatement");
		DebugLocation(204, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// JavaScript.g3:205:2: ( Identifier ( LT )* ':' ( LT )* statement -> ^( ':' Identifier statement ) )
			DebugEnterAlt(1);
			// JavaScript.g3:205:4: Identifier ( LT )* ':' ( LT )* statement
			{
			DebugLocation(205, 4);
			Identifier165=(IToken)Match(input,Identifier,Follow._Identifier_in_labelledStatement1264); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_Identifier.Add(Identifier165);

			DebugLocation(205, 15);
			// JavaScript.g3:205:15: ( LT )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_1 = input.LA(1);

				if ((LA77_1==LT))
				{
					alt77 = 1;
				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:205:15: LT
					{
					DebugLocation(205, 15);
					LT166=(IToken)Match(input,LT,Follow._LT_in_labelledStatement1266); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT166);


					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }

			DebugLocation(205, 19);
			char_literal167=(IToken)Match(input,101,Follow._101_in_labelledStatement1269); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_101.Add(char_literal167);

			DebugLocation(205, 23);
			// JavaScript.g3:205:23: ( LT )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_1 = input.LA(1);

				if ((LA78_1==LT))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:205:23: LT
					{
					DebugLocation(205, 23);
					LT168=(IToken)Match(input,LT,Follow._LT_in_labelledStatement1271); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT168);


					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }

			DebugLocation(205, 27);
			PushFollow(Follow._statement_in_labelledStatement1274);
			statement169=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_statement.Add(statement169.Tree);


			{
			// AST REWRITE
			// elements: 101, Identifier, statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 205:37: -> ^( ':' Identifier statement )
			{
				DebugLocation(205, 40);
				// JavaScript.g3:205:40: ^( ':' Identifier statement )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(205, 42);
				root_1 = (object)adaptor.BecomeRoot(stream_101.NextNode(), root_1);

				DebugLocation(205, 46);
				adaptor.AddChild(root_1, stream_Identifier.NextNode());
				DebugLocation(205, 57);
				adaptor.AddChild(root_1, stream_statement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labelledStatement", 26);
			LeaveRule("labelledStatement", 26);
			LeaveRule_labelledStatement();
			if (state.backtracking > 0) { Memoize(input, 26, labelledStatement_StartIndex); }

		}
		DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "labelledStatement"); }
		return retval;

	}
	// $ANTLR end "labelledStatement"

	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();
	// $ANTLR start "switchStatement"
	// JavaScript.g3:208:1: switchStatement : 'switch' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* caseBlock -> ^( SWITCH expression caseBlock ) ;
	[GrammarRule("switchStatement")]
	private AstParserRuleReturnScope<object, IToken> switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 27);
		TraceIn("switchStatement", 27);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal170 = default(IToken);
		IToken LT171 = default(IToken);
		IToken char_literal172 = default(IToken);
		IToken LT173 = default(IToken);
		IToken LT175 = default(IToken);
		IToken char_literal176 = default(IToken);
		IToken LT177 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression174 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> caseBlock178 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal170_tree = default(object);
		object LT171_tree = default(object);
		object char_literal172_tree = default(object);
		object LT173_tree = default(object);
		object LT175_tree = default(object);
		object char_literal176_tree = default(object);
		object LT177_tree = default(object);
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_caseBlock=new RewriteRuleSubtreeStream(adaptor,"rule caseBlock");
		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(208, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// JavaScript.g3:209:2: ( 'switch' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* caseBlock -> ^( SWITCH expression caseBlock ) )
			DebugEnterAlt(1);
			// JavaScript.g3:209:4: 'switch' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* caseBlock
			{
			DebugLocation(209, 4);
			string_literal170=(IToken)Match(input,140,Follow._140_in_switchStatement1296); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_140.Add(string_literal170);

			DebugLocation(209, 13);
			// JavaScript.g3:209:13: ( LT )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_1 = input.LA(1);

				if ((LA79_1==LT))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:209:13: LT
					{
					DebugLocation(209, 13);
					LT171=(IToken)Match(input,LT,Follow._LT_in_switchStatement1298); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT171);


					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }

			DebugLocation(209, 17);
			char_literal172=(IToken)Match(input,87,Follow._87_in_switchStatement1301); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_87.Add(char_literal172);

			DebugLocation(209, 21);
			// JavaScript.g3:209:21: ( LT )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, false);
				int LA80_1 = input.LA(1);

				if ((LA80_1==LT))
				{
					alt80 = 1;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:209:21: LT
					{
					DebugLocation(209, 21);
					LT173=(IToken)Match(input,LT,Follow._LT_in_switchStatement1303); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT173);


					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }

			DebugLocation(209, 25);
			PushFollow(Follow._expression_in_switchStatement1306);
			expression174=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression174.Tree);
			DebugLocation(209, 36);
			// JavaScript.g3:209:36: ( LT )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_1 = input.LA(1);

				if ((LA81_1==LT))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:209:36: LT
					{
					DebugLocation(209, 36);
					LT175=(IToken)Match(input,LT,Follow._LT_in_switchStatement1308); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT175);


					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }

			DebugLocation(209, 40);
			char_literal176=(IToken)Match(input,88,Follow._88_in_switchStatement1311); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_88.Add(char_literal176);

			DebugLocation(209, 44);
			// JavaScript.g3:209:44: ( LT )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_1 = input.LA(1);

				if ((LA82_1==LT))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:209:44: LT
					{
					DebugLocation(209, 44);
					LT177=(IToken)Match(input,LT,Follow._LT_in_switchStatement1313); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT177);


					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }

			DebugLocation(209, 48);
			PushFollow(Follow._caseBlock_in_switchStatement1316);
			caseBlock178=caseBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseBlock.Add(caseBlock178.Tree);


			{
			// AST REWRITE
			// elements: expression, caseBlock
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 209:58: -> ^( SWITCH expression caseBlock )
			{
				DebugLocation(209, 61);
				// JavaScript.g3:209:61: ^( SWITCH expression caseBlock )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(209, 63);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SWITCH, "SWITCH"), root_1);

				DebugLocation(209, 70);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(209, 81);
				adaptor.AddChild(root_1, stream_caseBlock.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchStatement", 27);
			LeaveRule("switchStatement", 27);
			LeaveRule_switchStatement();
			if (state.backtracking > 0) { Memoize(input, 27, switchStatement_StartIndex); }

		}
		DebugLocation(210, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return retval;

	}
	// $ANTLR end "switchStatement"

	partial void EnterRule_caseBlock();
	partial void LeaveRule_caseBlock();
	// $ANTLR start "caseBlock"
	// JavaScript.g3:212:1: caseBlock : '{' ! ( ( LT !)* caseClause )* ( ( LT !)* defaultClause ( ( LT !)* caseClause )* )? ( LT !)* '}' !;
	[GrammarRule("caseBlock")]
	private AstParserRuleReturnScope<object, IToken> caseBlock()
	{
		EnterRule_caseBlock();
		EnterRule("caseBlock", 28);
		TraceIn("caseBlock", 28);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int caseBlock_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal179 = default(IToken);
		IToken LT180 = default(IToken);
		IToken LT182 = default(IToken);
		IToken LT184 = default(IToken);
		IToken LT186 = default(IToken);
		IToken char_literal187 = default(IToken);
		AstParserRuleReturnScope<object, IToken> caseClause181 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> defaultClause183 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> caseClause185 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal179_tree = default(object);
		object LT180_tree = default(object);
		object LT182_tree = default(object);
		object LT184_tree = default(object);
		object LT186_tree = default(object);
		object char_literal187_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "caseBlock");
		DebugLocation(212, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// JavaScript.g3:213:2: ( '{' ! ( ( LT !)* caseClause )* ( ( LT !)* defaultClause ( ( LT !)* caseClause )* )? ( LT !)* '}' !)
			DebugEnterAlt(1);
			// JavaScript.g3:213:4: '{' ! ( ( LT !)* caseClause )* ( ( LT !)* defaultClause ( ( LT !)* caseClause )* )? ( LT !)* '}' !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(213, 7);
			char_literal179=(IToken)Match(input,150,Follow._150_in_caseBlock1338); if (state.failed) return retval;
			DebugLocation(213, 9);
			// JavaScript.g3:213:9: ( ( LT !)* caseClause )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				try
				{
					alt84 = dfa84.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:213:10: ( LT !)* caseClause
					{
					DebugLocation(213, 12);
					// JavaScript.g3:213:12: ( LT !)*
					try { DebugEnterSubRule(83);
					while (true)
					{
						int alt83=2;
						try { DebugEnterDecision(83, false);
						int LA83_1 = input.LA(1);

						if ((LA83_1==LT))
						{
							alt83 = 1;
						}


						} finally { DebugExitDecision(83); }
						switch ( alt83 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:213:12: LT !
							{
							DebugLocation(213, 12);
							LT180=(IToken)Match(input,LT,Follow._LT_in_caseBlock1342); if (state.failed) return retval;

							}
							break;

						default:
							goto loop83;
						}
					}

					loop83:
						;

					} finally { DebugExitSubRule(83); }

					DebugLocation(213, 15);
					PushFollow(Follow._caseClause_in_caseBlock1346);
					caseClause181=caseClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, caseClause181.Tree);

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }

			DebugLocation(213, 28);
			// JavaScript.g3:213:28: ( ( LT !)* defaultClause ( ( LT !)* caseClause )* )?
			int alt88=2;
			try { DebugEnterSubRule(88);
			try { DebugEnterDecision(88, false);
			try
			{
				alt88 = dfa88.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:213:29: ( LT !)* defaultClause ( ( LT !)* caseClause )*
				{
				DebugLocation(213, 31);
				// JavaScript.g3:213:31: ( LT !)*
				try { DebugEnterSubRule(85);
				while (true)
				{
					int alt85=2;
					try { DebugEnterDecision(85, false);
					int LA85_1 = input.LA(1);

					if ((LA85_1==LT))
					{
						alt85 = 1;
					}


					} finally { DebugExitDecision(85); }
					switch ( alt85 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:213:31: LT !
						{
						DebugLocation(213, 31);
						LT182=(IToken)Match(input,LT,Follow._LT_in_caseBlock1351); if (state.failed) return retval;

						}
						break;

					default:
						goto loop85;
					}
				}

				loop85:
					;

				} finally { DebugExitSubRule(85); }

				DebugLocation(213, 34);
				PushFollow(Follow._defaultClause_in_caseBlock1355);
				defaultClause183=defaultClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defaultClause183.Tree);
				DebugLocation(213, 48);
				// JavaScript.g3:213:48: ( ( LT !)* caseClause )*
				try { DebugEnterSubRule(87);
				while (true)
				{
					int alt87=2;
					try { DebugEnterDecision(87, false);
					try
					{
						alt87 = dfa87.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(87); }
					switch ( alt87 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:213:49: ( LT !)* caseClause
						{
						DebugLocation(213, 51);
						// JavaScript.g3:213:51: ( LT !)*
						try { DebugEnterSubRule(86);
						while (true)
						{
							int alt86=2;
							try { DebugEnterDecision(86, false);
							int LA86_1 = input.LA(1);

							if ((LA86_1==LT))
							{
								alt86 = 1;
							}


							} finally { DebugExitDecision(86); }
							switch ( alt86 )
							{
							case 1:
								DebugEnterAlt(1);
								// JavaScript.g3:213:51: LT !
								{
								DebugLocation(213, 51);
								LT184=(IToken)Match(input,LT,Follow._LT_in_caseBlock1358); if (state.failed) return retval;

								}
								break;

							default:
								goto loop86;
							}
						}

						loop86:
							;

						} finally { DebugExitSubRule(86); }

						DebugLocation(213, 54);
						PushFollow(Follow._caseClause_in_caseBlock1362);
						caseClause185=caseClause();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, caseClause185.Tree);

						}
						break;

					default:
						goto loop87;
					}
				}

				loop87:
					;

				} finally { DebugExitSubRule(87); }


				}
				break;

			}
			} finally { DebugExitSubRule(88); }

			DebugLocation(213, 71);
			// JavaScript.g3:213:71: ( LT !)*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_1 = input.LA(1);

				if ((LA89_1==LT))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:213:71: LT !
					{
					DebugLocation(213, 71);
					LT186=(IToken)Match(input,LT,Follow._LT_in_caseBlock1368); if (state.failed) return retval;

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(213, 77);
			char_literal187=(IToken)Match(input,154,Follow._154_in_caseBlock1372); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseBlock", 28);
			LeaveRule("caseBlock", 28);
			LeaveRule_caseBlock();
			if (state.backtracking > 0) { Memoize(input, 28, caseBlock_StartIndex); }

		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "caseBlock"); }
		return retval;

	}
	// $ANTLR end "caseBlock"

	partial void EnterRule_caseClause();
	partial void LeaveRule_caseClause();
	// $ANTLR start "caseClause"
	// JavaScript.g3:216:1: caseClause : 'case' ( LT )* expression ( LT )* ':' ( LT )* ( statementList )? -> ^( CASE expression statementList ) ;
	[GrammarRule("caseClause")]
	private AstParserRuleReturnScope<object, IToken> caseClause()
	{
		EnterRule_caseClause();
		EnterRule("caseClause", 29);
		TraceIn("caseClause", 29);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int caseClause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal188 = default(IToken);
		IToken LT189 = default(IToken);
		IToken LT191 = default(IToken);
		IToken char_literal192 = default(IToken);
		IToken LT193 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression190 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statementList194 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal188_tree = default(object);
		object LT189_tree = default(object);
		object LT191_tree = default(object);
		object char_literal192_tree = default(object);
		object LT193_tree = default(object);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_statementList=new RewriteRuleSubtreeStream(adaptor,"rule statementList");
		try { DebugEnterRule(GrammarFileName, "caseClause");
		DebugLocation(216, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// JavaScript.g3:217:2: ( 'case' ( LT )* expression ( LT )* ':' ( LT )* ( statementList )? -> ^( CASE expression statementList ) )
			DebugEnterAlt(1);
			// JavaScript.g3:217:4: 'case' ( LT )* expression ( LT )* ':' ( LT )* ( statementList )?
			{
			DebugLocation(217, 4);
			string_literal188=(IToken)Match(input,122,Follow._122_in_caseClause1384); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_122.Add(string_literal188);

			DebugLocation(217, 11);
			// JavaScript.g3:217:11: ( LT )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_1 = input.LA(1);

				if ((LA90_1==LT))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:217:11: LT
					{
					DebugLocation(217, 11);
					LT189=(IToken)Match(input,LT,Follow._LT_in_caseClause1386); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT189);


					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }

			DebugLocation(217, 15);
			PushFollow(Follow._expression_in_caseClause1389);
			expression190=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression190.Tree);
			DebugLocation(217, 26);
			// JavaScript.g3:217:26: ( LT )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=2;
				try { DebugEnterDecision(91, false);
				int LA91_1 = input.LA(1);

				if ((LA91_1==LT))
				{
					alt91 = 1;
				}


				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:217:26: LT
					{
					DebugLocation(217, 26);
					LT191=(IToken)Match(input,LT,Follow._LT_in_caseClause1391); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT191);


					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }

			DebugLocation(217, 30);
			char_literal192=(IToken)Match(input,101,Follow._101_in_caseClause1394); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_101.Add(char_literal192);

			DebugLocation(217, 34);
			// JavaScript.g3:217:34: ( LT )*
			try { DebugEnterSubRule(92);
			while (true)
			{
				int alt92=2;
				try { DebugEnterDecision(92, false);
				int LA92_1 = input.LA(1);

				if ((LA92_1==LT))
				{
					int LA92_2 = input.LA(2);

					if ((EvaluatePredicate(synpred109_JavaScript_fragment)))
					{
						alt92 = 1;
					}


				}


				} finally { DebugExitDecision(92); }
				switch ( alt92 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:217:34: LT
					{
					DebugLocation(217, 34);
					LT193=(IToken)Match(input,LT,Follow._LT_in_caseClause1396); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT193);


					}
					break;

				default:
					goto loop92;
				}
			}

			loop92:
				;

			} finally { DebugExitSubRule(92); }

			DebugLocation(217, 38);
			// JavaScript.g3:217:38: ( statementList )?
			int alt93=2;
			try { DebugEnterSubRule(93);
			try { DebugEnterDecision(93, false);
			int LA93_1 = input.LA(1);

			if ((LA93_1==Identifier||LA93_1==NumericLiteral||LA93_1==RegularExpressionLiteral||LA93_1==StringLiteral||LA93_1==79||LA93_1==87||(LA93_1>=91 && LA93_1<=92)||(LA93_1>=95 && LA93_1<=96)||LA93_1==102||LA93_1==117||LA93_1==121||(LA93_1>=124 && LA93_1<=125)||(LA93_1>=127 && LA93_1<=128)||LA93_1==130||(LA93_1>=132 && LA93_1<=134)||(LA93_1>=137 && LA93_1<=150)||LA93_1==155))
			{
				alt93 = 1;
			}
			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:217:38: statementList
				{
				DebugLocation(217, 38);
				PushFollow(Follow._statementList_in_caseClause1399);
				statementList194=statementList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statementList.Add(statementList194.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(93); }



			{
			// AST REWRITE
			// elements: expression, statementList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 217:53: -> ^( CASE expression statementList )
			{
				DebugLocation(217, 56);
				// JavaScript.g3:217:56: ^( CASE expression statementList )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(217, 58);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CASE, "CASE"), root_1);

				DebugLocation(217, 63);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(217, 74);
				adaptor.AddChild(root_1, stream_statementList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseClause", 29);
			LeaveRule("caseClause", 29);
			LeaveRule_caseClause();
			if (state.backtracking > 0) { Memoize(input, 29, caseClause_StartIndex); }

		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "caseClause"); }
		return retval;

	}
	// $ANTLR end "caseClause"

	partial void EnterRule_defaultClause();
	partial void LeaveRule_defaultClause();
	// $ANTLR start "defaultClause"
	// JavaScript.g3:220:1: defaultClause : 'default' ( LT )* ':' ( LT )* ( statementList )? -> ^( DEFAULT statementList ) ;
	[GrammarRule("defaultClause")]
	private AstParserRuleReturnScope<object, IToken> defaultClause()
	{
		EnterRule_defaultClause();
		EnterRule("defaultClause", 30);
		TraceIn("defaultClause", 30);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int defaultClause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal195 = default(IToken);
		IToken LT196 = default(IToken);
		IToken char_literal197 = default(IToken);
		IToken LT198 = default(IToken);
		AstParserRuleReturnScope<object, IToken> statementList199 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal195_tree = default(object);
		object LT196_tree = default(object);
		object char_literal197_tree = default(object);
		object LT198_tree = default(object);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_statementList=new RewriteRuleSubtreeStream(adaptor,"rule statementList");
		try { DebugEnterRule(GrammarFileName, "defaultClause");
		DebugLocation(220, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// JavaScript.g3:221:2: ( 'default' ( LT )* ':' ( LT )* ( statementList )? -> ^( DEFAULT statementList ) )
			DebugEnterAlt(1);
			// JavaScript.g3:221:4: 'default' ( LT )* ':' ( LT )* ( statementList )?
			{
			DebugLocation(221, 4);
			string_literal195=(IToken)Match(input,126,Follow._126_in_defaultClause1422); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_126.Add(string_literal195);

			DebugLocation(221, 14);
			// JavaScript.g3:221:14: ( LT )*
			try { DebugEnterSubRule(94);
			while (true)
			{
				int alt94=2;
				try { DebugEnterDecision(94, false);
				int LA94_1 = input.LA(1);

				if ((LA94_1==LT))
				{
					alt94 = 1;
				}


				} finally { DebugExitDecision(94); }
				switch ( alt94 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:221:14: LT
					{
					DebugLocation(221, 14);
					LT196=(IToken)Match(input,LT,Follow._LT_in_defaultClause1424); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT196);


					}
					break;

				default:
					goto loop94;
				}
			}

			loop94:
				;

			} finally { DebugExitSubRule(94); }

			DebugLocation(221, 18);
			char_literal197=(IToken)Match(input,101,Follow._101_in_defaultClause1427); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_101.Add(char_literal197);

			DebugLocation(221, 22);
			// JavaScript.g3:221:22: ( LT )*
			try { DebugEnterSubRule(95);
			while (true)
			{
				int alt95=2;
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==LT))
				{
					int LA95_2 = input.LA(2);

					if ((EvaluatePredicate(synpred112_JavaScript_fragment)))
					{
						alt95 = 1;
					}


				}


				} finally { DebugExitDecision(95); }
				switch ( alt95 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:221:22: LT
					{
					DebugLocation(221, 22);
					LT198=(IToken)Match(input,LT,Follow._LT_in_defaultClause1429); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT198);


					}
					break;

				default:
					goto loop95;
				}
			}

			loop95:
				;

			} finally { DebugExitSubRule(95); }

			DebugLocation(221, 26);
			// JavaScript.g3:221:26: ( statementList )?
			int alt96=2;
			try { DebugEnterSubRule(96);
			try { DebugEnterDecision(96, false);
			int LA96_1 = input.LA(1);

			if ((LA96_1==Identifier||LA96_1==NumericLiteral||LA96_1==RegularExpressionLiteral||LA96_1==StringLiteral||LA96_1==79||LA96_1==87||(LA96_1>=91 && LA96_1<=92)||(LA96_1>=95 && LA96_1<=96)||LA96_1==102||LA96_1==117||LA96_1==121||(LA96_1>=124 && LA96_1<=125)||(LA96_1>=127 && LA96_1<=128)||LA96_1==130||(LA96_1>=132 && LA96_1<=134)||(LA96_1>=137 && LA96_1<=150)||LA96_1==155))
			{
				alt96 = 1;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:221:26: statementList
				{
				DebugLocation(221, 26);
				PushFollow(Follow._statementList_in_defaultClause1432);
				statementList199=statementList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statementList.Add(statementList199.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(96); }



			{
			// AST REWRITE
			// elements: statementList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 221:41: -> ^( DEFAULT statementList )
			{
				DebugLocation(221, 44);
				// JavaScript.g3:221:44: ^( DEFAULT statementList )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(221, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DEFAULT, "DEFAULT"), root_1);

				DebugLocation(221, 54);
				adaptor.AddChild(root_1, stream_statementList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defaultClause", 30);
			LeaveRule("defaultClause", 30);
			LeaveRule_defaultClause();
			if (state.backtracking > 0) { Memoize(input, 30, defaultClause_StartIndex); }

		}
		DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultClause"); }
		return retval;

	}
	// $ANTLR end "defaultClause"

	partial void EnterRule_throwStatement();
	partial void LeaveRule_throwStatement();
	// $ANTLR start "throwStatement"
	// JavaScript.g3:224:1: throwStatement : 'throw' expression ( LT | ';' ) -> ^( THROW expression ) ;
	[GrammarRule("throwStatement")]
	private AstParserRuleReturnScope<object, IToken> throwStatement()
	{
		EnterRule_throwStatement();
		EnterRule("throwStatement", 31);
		TraceIn("throwStatement", 31);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int throwStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal200 = default(IToken);
		IToken LT202 = default(IToken);
		IToken char_literal203 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression201 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal200_tree = default(object);
		object LT202_tree = default(object);
		object char_literal203_tree = default(object);
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "throwStatement");
		DebugLocation(224, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// JavaScript.g3:225:2: ( 'throw' expression ( LT | ';' ) -> ^( THROW expression ) )
			DebugEnterAlt(1);
			// JavaScript.g3:225:4: 'throw' expression ( LT | ';' )
			{
			DebugLocation(225, 4);
			string_literal200=(IToken)Match(input,142,Follow._142_in_throwStatement1453); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_142.Add(string_literal200);

			DebugLocation(225, 12);
			PushFollow(Follow._expression_in_throwStatement1455);
			expression201=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression201.Tree);
			DebugLocation(225, 23);
			// JavaScript.g3:225:23: ( LT | ';' )
			int alt97=2;
			try { DebugEnterSubRule(97);
			try { DebugEnterDecision(97, false);
			int LA97_1 = input.LA(1);

			if ((LA97_1==LT))
			{
				alt97 = 1;
			}
			else if ((LA97_1==102))
			{
				alt97 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 97, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:225:24: LT
				{
				DebugLocation(225, 24);
				LT202=(IToken)Match(input,LT,Follow._LT_in_throwStatement1458); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LT.Add(LT202);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:225:29: ';'
				{
				DebugLocation(225, 29);
				char_literal203=(IToken)Match(input,102,Follow._102_in_throwStatement1462); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_102.Add(char_literal203);


				}
				break;

			}
			} finally { DebugExitSubRule(97); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 225:34: -> ^( THROW expression )
			{
				DebugLocation(225, 37);
				// JavaScript.g3:225:37: ^( THROW expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(225, 39);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(THROW, "THROW"), root_1);

				DebugLocation(225, 45);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("throwStatement", 31);
			LeaveRule("throwStatement", 31);
			LeaveRule_throwStatement();
			if (state.backtracking > 0) { Memoize(input, 31, throwStatement_StartIndex); }

		}
		DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "throwStatement"); }
		return retval;

	}
	// $ANTLR end "throwStatement"

	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();
	// $ANTLR start "tryStatement"
	// JavaScript.g3:228:1: tryStatement : 'try' ( LT )* blockStatement ( LT )* ( finallyClause | catchClause ( ( LT )* finallyClause )? ) -> ^( TRY blockStatement ( catchClause )? ( finallyClause )? ) ;
	[GrammarRule("tryStatement")]
	private AstParserRuleReturnScope<object, IToken> tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 32);
		TraceIn("tryStatement", 32);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int tryStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal204 = default(IToken);
		IToken LT205 = default(IToken);
		IToken LT207 = default(IToken);
		IToken LT210 = default(IToken);
		AstParserRuleReturnScope<object, IToken> blockStatement206 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> finallyClause208 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catchClause209 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> finallyClause211 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal204_tree = default(object);
		object LT205_tree = default(object);
		object LT207_tree = default(object);
		object LT210_tree = default(object);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
		RewriteRuleSubtreeStream stream_finallyClause=new RewriteRuleSubtreeStream(adaptor,"rule finallyClause");
		RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(228, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// JavaScript.g3:229:2: ( 'try' ( LT )* blockStatement ( LT )* ( finallyClause | catchClause ( ( LT )* finallyClause )? ) -> ^( TRY blockStatement ( catchClause )? ( finallyClause )? ) )
			DebugEnterAlt(1);
			// JavaScript.g3:229:4: 'try' ( LT )* blockStatement ( LT )* ( finallyClause | catchClause ( ( LT )* finallyClause )? )
			{
			DebugLocation(229, 4);
			string_literal204=(IToken)Match(input,144,Follow._144_in_tryStatement1482); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_144.Add(string_literal204);

			DebugLocation(229, 10);
			// JavaScript.g3:229:10: ( LT )*
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=2;
				try { DebugEnterDecision(98, false);
				int LA98_1 = input.LA(1);

				if ((LA98_1==LT))
				{
					alt98 = 1;
				}


				} finally { DebugExitDecision(98); }
				switch ( alt98 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:229:10: LT
					{
					DebugLocation(229, 10);
					LT205=(IToken)Match(input,LT,Follow._LT_in_tryStatement1484); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT205);


					}
					break;

				default:
					goto loop98;
				}
			}

			loop98:
				;

			} finally { DebugExitSubRule(98); }

			DebugLocation(229, 14);
			PushFollow(Follow._blockStatement_in_tryStatement1487);
			blockStatement206=blockStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_blockStatement.Add(blockStatement206.Tree);
			DebugLocation(229, 29);
			// JavaScript.g3:229:29: ( LT )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, false);
				int LA99_1 = input.LA(1);

				if ((LA99_1==LT))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:229:29: LT
					{
					DebugLocation(229, 29);
					LT207=(IToken)Match(input,LT,Follow._LT_in_tryStatement1489); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT207);


					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }

			DebugLocation(229, 33);
			// JavaScript.g3:229:33: ( finallyClause | catchClause ( ( LT )* finallyClause )? )
			int alt102=2;
			try { DebugEnterSubRule(102);
			try { DebugEnterDecision(102, false);
			int LA102_1 = input.LA(1);

			if ((LA102_1==131))
			{
				alt102 = 1;
			}
			else if ((LA102_1==123))
			{
				alt102 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 102, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:229:34: finallyClause
				{
				DebugLocation(229, 34);
				PushFollow(Follow._finallyClause_in_tryStatement1493);
				finallyClause208=finallyClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_finallyClause.Add(finallyClause208.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:229:50: catchClause ( ( LT )* finallyClause )?
				{
				DebugLocation(229, 50);
				PushFollow(Follow._catchClause_in_tryStatement1497);
				catchClause209=catchClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_catchClause.Add(catchClause209.Tree);
				DebugLocation(229, 62);
				// JavaScript.g3:229:62: ( ( LT )* finallyClause )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, false);
				try
				{
					alt101 = dfa101.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:229:63: ( LT )* finallyClause
					{
					DebugLocation(229, 63);
					// JavaScript.g3:229:63: ( LT )*
					try { DebugEnterSubRule(100);
					while (true)
					{
						int alt100=2;
						try { DebugEnterDecision(100, false);
						int LA100_1 = input.LA(1);

						if ((LA100_1==LT))
						{
							alt100 = 1;
						}


						} finally { DebugExitDecision(100); }
						switch ( alt100 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:229:63: LT
							{
							DebugLocation(229, 63);
							LT210=(IToken)Match(input,LT,Follow._LT_in_tryStatement1500); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_LT.Add(LT210);


							}
							break;

						default:
							goto loop100;
						}
					}

					loop100:
						;

					} finally { DebugExitSubRule(100); }

					DebugLocation(229, 67);
					PushFollow(Follow._finallyClause_in_tryStatement1503);
					finallyClause211=finallyClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_finallyClause.Add(finallyClause211.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(101); }


				}
				break;

			}
			} finally { DebugExitSubRule(102); }



			{
			// AST REWRITE
			// elements: blockStatement, catchClause, finallyClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 230:3: -> ^( TRY blockStatement ( catchClause )? ( finallyClause )? )
			{
				DebugLocation(230, 6);
				// JavaScript.g3:230:6: ^( TRY blockStatement ( catchClause )? ( finallyClause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(230, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TRY, "TRY"), root_1);

				DebugLocation(230, 12);
				adaptor.AddChild(root_1, stream_blockStatement.NextTree());
				DebugLocation(230, 27);
				// JavaScript.g3:230:27: ( catchClause )?
				if (stream_catchClause.HasNext)
				{
					DebugLocation(230, 27);
					adaptor.AddChild(root_1, stream_catchClause.NextTree());

				}
				stream_catchClause.Reset();
				DebugLocation(230, 40);
				// JavaScript.g3:230:40: ( finallyClause )?
				if (stream_finallyClause.HasNext)
				{
					DebugLocation(230, 40);
					adaptor.AddChild(root_1, stream_finallyClause.NextTree());

				}
				stream_finallyClause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tryStatement", 32);
			LeaveRule("tryStatement", 32);
			LeaveRule_tryStatement();
			if (state.backtracking > 0) { Memoize(input, 32, tryStatement_StartIndex); }

		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return retval;

	}
	// $ANTLR end "tryStatement"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();
	// $ANTLR start "catchClause"
	// JavaScript.g3:233:1: catchClause : 'catch' ( LT )* '(' ( LT )* Identifier ( LT )* ')' ( LT )* blockStatement -> ^( CATCH ^( IDENTIFIER Identifier ) blockStatement ) ;
	[GrammarRule("catchClause")]
	private AstParserRuleReturnScope<object, IToken> catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 33);
		TraceIn("catchClause", 33);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catchClause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal212 = default(IToken);
		IToken LT213 = default(IToken);
		IToken char_literal214 = default(IToken);
		IToken LT215 = default(IToken);
		IToken Identifier216 = default(IToken);
		IToken LT217 = default(IToken);
		IToken char_literal218 = default(IToken);
		IToken LT219 = default(IToken);
		AstParserRuleReturnScope<object, IToken> blockStatement220 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal212_tree = default(object);
		object LT213_tree = default(object);
		object char_literal214_tree = default(object);
		object LT215_tree = default(object);
		object Identifier216_tree = default(object);
		object LT217_tree = default(object);
		object char_literal218_tree = default(object);
		object LT219_tree = default(object);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_Identifier=new RewriteRuleITokenStream(adaptor,"token Identifier");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(233, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// JavaScript.g3:234:2: ( 'catch' ( LT )* '(' ( LT )* Identifier ( LT )* ')' ( LT )* blockStatement -> ^( CATCH ^( IDENTIFIER Identifier ) blockStatement ) )
			DebugEnterAlt(1);
			// JavaScript.g3:234:4: 'catch' ( LT )* '(' ( LT )* Identifier ( LT )* ')' ( LT )* blockStatement
			{
			DebugLocation(234, 4);
			string_literal212=(IToken)Match(input,123,Follow._123_in_catchClause1540); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_123.Add(string_literal212);

			DebugLocation(234, 12);
			// JavaScript.g3:234:12: ( LT )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=2;
				try { DebugEnterDecision(103, false);
				int LA103_1 = input.LA(1);

				if ((LA103_1==LT))
				{
					alt103 = 1;
				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:234:12: LT
					{
					DebugLocation(234, 12);
					LT213=(IToken)Match(input,LT,Follow._LT_in_catchClause1542); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT213);


					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }

			DebugLocation(234, 16);
			char_literal214=(IToken)Match(input,87,Follow._87_in_catchClause1545); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_87.Add(char_literal214);

			DebugLocation(234, 20);
			// JavaScript.g3:234:20: ( LT )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_1 = input.LA(1);

				if ((LA104_1==LT))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:234:20: LT
					{
					DebugLocation(234, 20);
					LT215=(IToken)Match(input,LT,Follow._LT_in_catchClause1547); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT215);


					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }

			DebugLocation(234, 24);
			Identifier216=(IToken)Match(input,Identifier,Follow._Identifier_in_catchClause1550); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_Identifier.Add(Identifier216);

			DebugLocation(234, 35);
			// JavaScript.g3:234:35: ( LT )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_1 = input.LA(1);

				if ((LA105_1==LT))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:234:35: LT
					{
					DebugLocation(234, 35);
					LT217=(IToken)Match(input,LT,Follow._LT_in_catchClause1552); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT217);


					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }

			DebugLocation(234, 39);
			char_literal218=(IToken)Match(input,88,Follow._88_in_catchClause1555); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_88.Add(char_literal218);

			DebugLocation(234, 43);
			// JavaScript.g3:234:43: ( LT )*
			try { DebugEnterSubRule(106);
			while (true)
			{
				int alt106=2;
				try { DebugEnterDecision(106, false);
				int LA106_1 = input.LA(1);

				if ((LA106_1==LT))
				{
					alt106 = 1;
				}


				} finally { DebugExitDecision(106); }
				switch ( alt106 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:234:43: LT
					{
					DebugLocation(234, 43);
					LT219=(IToken)Match(input,LT,Follow._LT_in_catchClause1557); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT219);


					}
					break;

				default:
					goto loop106;
				}
			}

			loop106:
				;

			} finally { DebugExitSubRule(106); }

			DebugLocation(234, 47);
			PushFollow(Follow._blockStatement_in_catchClause1560);
			blockStatement220=blockStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_blockStatement.Add(blockStatement220.Tree);


			{
			// AST REWRITE
			// elements: Identifier, blockStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 234:62: -> ^( CATCH ^( IDENTIFIER Identifier ) blockStatement )
			{
				DebugLocation(234, 65);
				// JavaScript.g3:234:65: ^( CATCH ^( IDENTIFIER Identifier ) blockStatement )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(234, 67);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CATCH, "CATCH"), root_1);

				DebugLocation(234, 73);
				// JavaScript.g3:234:73: ^( IDENTIFIER Identifier )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(234, 75);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_2);

				DebugLocation(234, 86);
				adaptor.AddChild(root_2, stream_Identifier.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(234, 98);
				adaptor.AddChild(root_1, stream_blockStatement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catchClause", 33);
			LeaveRule("catchClause", 33);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 33, catchClause_StartIndex); }

		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return retval;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();
	// $ANTLR start "finallyClause"
	// JavaScript.g3:237:1: finallyClause : 'finally' ( LT )* blockStatement -> ^( FINALLY blockStatement ) ;
	[GrammarRule("finallyClause")]
	private AstParserRuleReturnScope<object, IToken> finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 34);
		TraceIn("finallyClause", 34);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int finallyClause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal221 = default(IToken);
		IToken LT222 = default(IToken);
		AstParserRuleReturnScope<object, IToken> blockStatement223 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal221_tree = default(object);
		object LT222_tree = default(object);
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(237, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// JavaScript.g3:238:2: ( 'finally' ( LT )* blockStatement -> ^( FINALLY blockStatement ) )
			DebugEnterAlt(1);
			// JavaScript.g3:238:4: 'finally' ( LT )* blockStatement
			{
			DebugLocation(238, 4);
			string_literal221=(IToken)Match(input,131,Follow._131_in_finallyClause1586); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_131.Add(string_literal221);

			DebugLocation(238, 14);
			// JavaScript.g3:238:14: ( LT )*
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, false);
				int LA107_1 = input.LA(1);

				if ((LA107_1==LT))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch ( alt107 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:238:14: LT
					{
					DebugLocation(238, 14);
					LT222=(IToken)Match(input,LT,Follow._LT_in_finallyClause1588); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT222);


					}
					break;

				default:
					goto loop107;
				}
			}

			loop107:
				;

			} finally { DebugExitSubRule(107); }

			DebugLocation(238, 18);
			PushFollow(Follow._blockStatement_in_finallyClause1591);
			blockStatement223=blockStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_blockStatement.Add(blockStatement223.Tree);


			{
			// AST REWRITE
			// elements: blockStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 238:33: -> ^( FINALLY blockStatement )
			{
				DebugLocation(238, 36);
				// JavaScript.g3:238:36: ^( FINALLY blockStatement )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(238, 38);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FINALLY, "FINALLY"), root_1);

				DebugLocation(238, 46);
				adaptor.AddChild(root_1, stream_blockStatement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("finallyClause", 34);
			LeaveRule("finallyClause", 34);
			LeaveRule_finallyClause();
			if (state.backtracking > 0) { Memoize(input, 34, finallyClause_StartIndex); }

		}
		DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return retval;

	}
	// $ANTLR end "finallyClause"

	partial void EnterRule_debuggerStatement();
	partial void LeaveRule_debuggerStatement();
	// $ANTLR start "debuggerStatement"
	// JavaScript.g3:241:1: debuggerStatement : 'debugger' ( LT | ';' ) -> DEBUGGER ;
	[GrammarRule("debuggerStatement")]
	private AstParserRuleReturnScope<object, IToken> debuggerStatement()
	{
		EnterRule_debuggerStatement();
		EnterRule("debuggerStatement", 35);
		TraceIn("debuggerStatement", 35);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int debuggerStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal224 = default(IToken);
		IToken LT225 = default(IToken);
		IToken char_literal226 = default(IToken);

		object string_literal224_tree = default(object);
		object LT225_tree = default(object);
		object char_literal226_tree = default(object);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		try { DebugEnterRule(GrammarFileName, "debuggerStatement");
		DebugLocation(241, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// JavaScript.g3:242:2: ( 'debugger' ( LT | ';' ) -> DEBUGGER )
			DebugEnterAlt(1);
			// JavaScript.g3:242:4: 'debugger' ( LT | ';' )
			{
			DebugLocation(242, 4);
			string_literal224=(IToken)Match(input,125,Follow._125_in_debuggerStatement1610); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_125.Add(string_literal224);

			DebugLocation(242, 15);
			// JavaScript.g3:242:15: ( LT | ';' )
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, false);
			int LA108_1 = input.LA(1);

			if ((LA108_1==LT))
			{
				alt108 = 1;
			}
			else if ((LA108_1==102))
			{
				alt108 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 108, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:242:16: LT
				{
				DebugLocation(242, 16);
				LT225=(IToken)Match(input,LT,Follow._LT_in_debuggerStatement1613); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LT.Add(LT225);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:242:21: ';'
				{
				DebugLocation(242, 21);
				char_literal226=(IToken)Match(input,102,Follow._102_in_debuggerStatement1617); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_102.Add(char_literal226);


				}
				break;

			}
			} finally { DebugExitSubRule(108); }



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 242:26: -> DEBUGGER
			{
				DebugLocation(242, 29);
				adaptor.AddChild(root_0, (object)adaptor.Create(DEBUGGER, "DEBUGGER"));

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("debuggerStatement", 35);
			LeaveRule("debuggerStatement", 35);
			LeaveRule_debuggerStatement();
			if (state.backtracking > 0) { Memoize(input, 35, debuggerStatement_StartIndex); }

		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "debuggerStatement"); }
		return retval;

	}
	// $ANTLR end "debuggerStatement"

	partial void EnterRule_functionDeclaration();
	partial void LeaveRule_functionDeclaration();
	// $ANTLR start "functionDeclaration"
	// JavaScript.g3:246:1: functionDeclaration : 'function' ( LT )* Identifier ( LT )* formalParameterList ( LT )* functionBody -> ^( FUNCTION ^( IDENTIFIER Identifier ) ( formalParameterList )? functionBody ) ;
	[GrammarRule("functionDeclaration")]
	private AstParserRuleReturnScope<object, IToken> functionDeclaration()
	{
		EnterRule_functionDeclaration();
		EnterRule("functionDeclaration", 36);
		TraceIn("functionDeclaration", 36);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int functionDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal227 = default(IToken);
		IToken LT228 = default(IToken);
		IToken Identifier229 = default(IToken);
		IToken LT230 = default(IToken);
		IToken LT232 = default(IToken);
		AstParserRuleReturnScope<object, IToken> formalParameterList231 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionBody233 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal227_tree = default(object);
		object LT228_tree = default(object);
		object Identifier229_tree = default(object);
		object LT230_tree = default(object);
		object LT232_tree = default(object);
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_Identifier=new RewriteRuleITokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
		RewriteRuleSubtreeStream stream_functionBody=new RewriteRuleSubtreeStream(adaptor,"rule functionBody");
		try { DebugEnterRule(GrammarFileName, "functionDeclaration");
		DebugLocation(246, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// JavaScript.g3:247:2: ( 'function' ( LT )* Identifier ( LT )* formalParameterList ( LT )* functionBody -> ^( FUNCTION ^( IDENTIFIER Identifier ) ( formalParameterList )? functionBody ) )
			DebugEnterAlt(1);
			// JavaScript.g3:247:4: 'function' ( LT )* Identifier ( LT )* formalParameterList ( LT )* functionBody
			{
			DebugLocation(247, 4);
			string_literal227=(IToken)Match(input,133,Follow._133_in_functionDeclaration1634); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_133.Add(string_literal227);

			DebugLocation(247, 15);
			// JavaScript.g3:247:15: ( LT )*
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, false);
				int LA109_1 = input.LA(1);

				if ((LA109_1==LT))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch ( alt109 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:247:15: LT
					{
					DebugLocation(247, 15);
					LT228=(IToken)Match(input,LT,Follow._LT_in_functionDeclaration1636); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT228);


					}
					break;

				default:
					goto loop109;
				}
			}

			loop109:
				;

			} finally { DebugExitSubRule(109); }

			DebugLocation(247, 19);
			Identifier229=(IToken)Match(input,Identifier,Follow._Identifier_in_functionDeclaration1639); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_Identifier.Add(Identifier229);

			DebugLocation(247, 30);
			// JavaScript.g3:247:30: ( LT )*
			try { DebugEnterSubRule(110);
			while (true)
			{
				int alt110=2;
				try { DebugEnterDecision(110, false);
				int LA110_1 = input.LA(1);

				if ((LA110_1==LT))
				{
					alt110 = 1;
				}


				} finally { DebugExitDecision(110); }
				switch ( alt110 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:247:30: LT
					{
					DebugLocation(247, 30);
					LT230=(IToken)Match(input,LT,Follow._LT_in_functionDeclaration1641); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT230);


					}
					break;

				default:
					goto loop110;
				}
			}

			loop110:
				;

			} finally { DebugExitSubRule(110); }

			DebugLocation(247, 34);
			PushFollow(Follow._formalParameterList_in_functionDeclaration1644);
			formalParameterList231=formalParameterList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList231.Tree);
			DebugLocation(247, 54);
			// JavaScript.g3:247:54: ( LT )*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, false);
				int LA111_1 = input.LA(1);

				if ((LA111_1==LT))
				{
					alt111 = 1;
				}


				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:247:54: LT
					{
					DebugLocation(247, 54);
					LT232=(IToken)Match(input,LT,Follow._LT_in_functionDeclaration1646); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT232);


					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }

			DebugLocation(247, 58);
			PushFollow(Follow._functionBody_in_functionDeclaration1649);
			functionBody233=functionBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_functionBody.Add(functionBody233.Tree);


			{
			// AST REWRITE
			// elements: Identifier, formalParameterList, functionBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 247:71: -> ^( FUNCTION ^( IDENTIFIER Identifier ) ( formalParameterList )? functionBody )
			{
				DebugLocation(247, 74);
				// JavaScript.g3:247:74: ^( FUNCTION ^( IDENTIFIER Identifier ) ( formalParameterList )? functionBody )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(247, 76);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNCTION, "FUNCTION"), root_1);

				DebugLocation(247, 85);
				// JavaScript.g3:247:85: ^( IDENTIFIER Identifier )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(247, 87);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_2);

				DebugLocation(247, 98);
				adaptor.AddChild(root_2, stream_Identifier.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(247, 110);
				// JavaScript.g3:247:110: ( formalParameterList )?
				if (stream_formalParameterList.HasNext)
				{
					DebugLocation(247, 110);
					adaptor.AddChild(root_1, stream_formalParameterList.NextTree());

				}
				stream_formalParameterList.Reset();
				DebugLocation(247, 131);
				adaptor.AddChild(root_1, stream_functionBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDeclaration", 36);
			LeaveRule("functionDeclaration", 36);
			LeaveRule_functionDeclaration();
			if (state.backtracking > 0) { Memoize(input, 36, functionDeclaration_StartIndex); }

		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDeclaration"); }
		return retval;

	}
	// $ANTLR end "functionDeclaration"

	partial void EnterRule_functionExpression();
	partial void LeaveRule_functionExpression();
	// $ANTLR start "functionExpression"
	// JavaScript.g3:250:1: functionExpression : 'function' ( LT )* ( Identifier )? ( LT )* formalParameterList ( LT )* functionBody -> ^( FUNCTION ( ^( IDENTIFIER Identifier ) )? ( formalParameterList )? functionBody ) ;
	[GrammarRule("functionExpression")]
	private AstParserRuleReturnScope<object, IToken> functionExpression()
	{
		EnterRule_functionExpression();
		EnterRule("functionExpression", 37);
		TraceIn("functionExpression", 37);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int functionExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal234 = default(IToken);
		IToken LT235 = default(IToken);
		IToken Identifier236 = default(IToken);
		IToken LT237 = default(IToken);
		IToken LT239 = default(IToken);
		AstParserRuleReturnScope<object, IToken> formalParameterList238 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionBody240 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal234_tree = default(object);
		object LT235_tree = default(object);
		object Identifier236_tree = default(object);
		object LT237_tree = default(object);
		object LT239_tree = default(object);
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_Identifier=new RewriteRuleITokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
		RewriteRuleSubtreeStream stream_functionBody=new RewriteRuleSubtreeStream(adaptor,"rule functionBody");
		try { DebugEnterRule(GrammarFileName, "functionExpression");
		DebugLocation(250, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// JavaScript.g3:251:2: ( 'function' ( LT )* ( Identifier )? ( LT )* formalParameterList ( LT )* functionBody -> ^( FUNCTION ( ^( IDENTIFIER Identifier ) )? ( formalParameterList )? functionBody ) )
			DebugEnterAlt(1);
			// JavaScript.g3:251:4: 'function' ( LT )* ( Identifier )? ( LT )* formalParameterList ( LT )* functionBody
			{
			DebugLocation(251, 4);
			string_literal234=(IToken)Match(input,133,Follow._133_in_functionExpression1678); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_133.Add(string_literal234);

			DebugLocation(251, 15);
			// JavaScript.g3:251:15: ( LT )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=2;
				try { DebugEnterDecision(112, false);
				int LA112_1 = input.LA(1);

				if ((LA112_1==LT))
				{
					int LA112_2 = input.LA(2);

					if ((EvaluatePredicate(synpred129_JavaScript_fragment)))
					{
						alt112 = 1;
					}


				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:251:15: LT
					{
					DebugLocation(251, 15);
					LT235=(IToken)Match(input,LT,Follow._LT_in_functionExpression1680); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT235);


					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }

			DebugLocation(251, 19);
			// JavaScript.g3:251:19: ( Identifier )?
			int alt113=2;
			try { DebugEnterSubRule(113);
			try { DebugEnterDecision(113, false);
			int LA113_1 = input.LA(1);

			if ((LA113_1==Identifier))
			{
				alt113 = 1;
			}
			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:251:19: Identifier
				{
				DebugLocation(251, 19);
				Identifier236=(IToken)Match(input,Identifier,Follow._Identifier_in_functionExpression1683); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Identifier.Add(Identifier236);


				}
				break;

			}
			} finally { DebugExitSubRule(113); }

			DebugLocation(251, 31);
			// JavaScript.g3:251:31: ( LT )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, false);
				int LA114_1 = input.LA(1);

				if ((LA114_1==LT))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:251:31: LT
					{
					DebugLocation(251, 31);
					LT237=(IToken)Match(input,LT,Follow._LT_in_functionExpression1686); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT237);


					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }

			DebugLocation(251, 35);
			PushFollow(Follow._formalParameterList_in_functionExpression1689);
			formalParameterList238=formalParameterList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList238.Tree);
			DebugLocation(251, 55);
			// JavaScript.g3:251:55: ( LT )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_1 = input.LA(1);

				if ((LA115_1==LT))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:251:55: LT
					{
					DebugLocation(251, 55);
					LT239=(IToken)Match(input,LT,Follow._LT_in_functionExpression1691); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT239);


					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }

			DebugLocation(251, 59);
			PushFollow(Follow._functionBody_in_functionExpression1694);
			functionBody240=functionBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_functionBody.Add(functionBody240.Tree);


			{
			// AST REWRITE
			// elements: Identifier, formalParameterList, functionBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 251:72: -> ^( FUNCTION ( ^( IDENTIFIER Identifier ) )? ( formalParameterList )? functionBody )
			{
				DebugLocation(251, 75);
				// JavaScript.g3:251:75: ^( FUNCTION ( ^( IDENTIFIER Identifier ) )? ( formalParameterList )? functionBody )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(251, 77);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNCTION, "FUNCTION"), root_1);

				DebugLocation(251, 86);
				// JavaScript.g3:251:86: ( ^( IDENTIFIER Identifier ) )?
				if (stream_Identifier.HasNext)
				{
					DebugLocation(251, 86);
					// JavaScript.g3:251:86: ^( IDENTIFIER Identifier )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(251, 88);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_2);

					DebugLocation(251, 99);
					adaptor.AddChild(root_2, stream_Identifier.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_Identifier.Reset();
				DebugLocation(251, 112);
				// JavaScript.g3:251:112: ( formalParameterList )?
				if (stream_formalParameterList.HasNext)
				{
					DebugLocation(251, 112);
					adaptor.AddChild(root_1, stream_formalParameterList.NextTree());

				}
				stream_formalParameterList.Reset();
				DebugLocation(251, 133);
				adaptor.AddChild(root_1, stream_functionBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionExpression", 37);
			LeaveRule("functionExpression", 37);
			LeaveRule_functionExpression();
			if (state.backtracking > 0) { Memoize(input, 37, functionExpression_StartIndex); }

		}
		DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "functionExpression"); }
		return retval;

	}
	// $ANTLR end "functionExpression"

	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();
	// $ANTLR start "formalParameterList"
	// JavaScript.g3:254:1: formalParameterList : '(' ! ( ( LT !)* formalParameter ( ( LT !)* ',' ! ( LT !)* formalParameter )* )? ( LT !)* ')' !;
	[GrammarRule("formalParameterList")]
	private AstParserRuleReturnScope<object, IToken> formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 38);
		TraceIn("formalParameterList", 38);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal241 = default(IToken);
		IToken LT242 = default(IToken);
		IToken LT244 = default(IToken);
		IToken char_literal245 = default(IToken);
		IToken LT246 = default(IToken);
		IToken LT248 = default(IToken);
		IToken char_literal249 = default(IToken);
		AstParserRuleReturnScope<object, IToken> formalParameter243 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> formalParameter247 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal241_tree = default(object);
		object LT242_tree = default(object);
		object LT244_tree = default(object);
		object char_literal245_tree = default(object);
		object LT246_tree = default(object);
		object LT248_tree = default(object);
		object char_literal249_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(254, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// JavaScript.g3:255:2: ( '(' ! ( ( LT !)* formalParameter ( ( LT !)* ',' ! ( LT !)* formalParameter )* )? ( LT !)* ')' !)
			DebugEnterAlt(1);
			// JavaScript.g3:255:4: '(' ! ( ( LT !)* formalParameter ( ( LT !)* ',' ! ( LT !)* formalParameter )* )? ( LT !)* ')' !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(255, 7);
			char_literal241=(IToken)Match(input,87,Follow._87_in_formalParameterList1723); if (state.failed) return retval;
			DebugLocation(255, 9);
			// JavaScript.g3:255:9: ( ( LT !)* formalParameter ( ( LT !)* ',' ! ( LT !)* formalParameter )* )?
			int alt120=2;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			try
			{
				alt120 = dfa120.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:255:10: ( LT !)* formalParameter ( ( LT !)* ',' ! ( LT !)* formalParameter )*
				{
				DebugLocation(255, 12);
				// JavaScript.g3:255:12: ( LT !)*
				try { DebugEnterSubRule(116);
				while (true)
				{
					int alt116=2;
					try { DebugEnterDecision(116, false);
					int LA116_1 = input.LA(1);

					if ((LA116_1==LT))
					{
						alt116 = 1;
					}


					} finally { DebugExitDecision(116); }
					switch ( alt116 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:255:12: LT !
						{
						DebugLocation(255, 12);
						LT242=(IToken)Match(input,LT,Follow._LT_in_formalParameterList1727); if (state.failed) return retval;

						}
						break;

					default:
						goto loop116;
					}
				}

				loop116:
					;

				} finally { DebugExitSubRule(116); }

				DebugLocation(255, 15);
				PushFollow(Follow._formalParameter_in_formalParameterList1731);
				formalParameter243=formalParameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameter243.Tree);
				DebugLocation(255, 31);
				// JavaScript.g3:255:31: ( ( LT !)* ',' ! ( LT !)* formalParameter )*
				try { DebugEnterSubRule(119);
				while (true)
				{
					int alt119=2;
					try { DebugEnterDecision(119, false);
					try
					{
						alt119 = dfa119.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(119); }
					switch ( alt119 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:255:32: ( LT !)* ',' ! ( LT !)* formalParameter
						{
						DebugLocation(255, 34);
						// JavaScript.g3:255:34: ( LT !)*
						try { DebugEnterSubRule(117);
						while (true)
						{
							int alt117=2;
							try { DebugEnterDecision(117, false);
							int LA117_1 = input.LA(1);

							if ((LA117_1==LT))
							{
								alt117 = 1;
							}


							} finally { DebugExitDecision(117); }
							switch ( alt117 )
							{
							case 1:
								DebugEnterAlt(1);
								// JavaScript.g3:255:34: LT !
								{
								DebugLocation(255, 34);
								LT244=(IToken)Match(input,LT,Follow._LT_in_formalParameterList1734); if (state.failed) return retval;

								}
								break;

							default:
								goto loop117;
							}
						}

						loop117:
							;

						} finally { DebugExitSubRule(117); }

						DebugLocation(255, 40);
						char_literal245=(IToken)Match(input,94,Follow._94_in_formalParameterList1738); if (state.failed) return retval;
						DebugLocation(255, 44);
						// JavaScript.g3:255:44: ( LT !)*
						try { DebugEnterSubRule(118);
						while (true)
						{
							int alt118=2;
							try { DebugEnterDecision(118, false);
							int LA118_1 = input.LA(1);

							if ((LA118_1==LT))
							{
								alt118 = 1;
							}


							} finally { DebugExitDecision(118); }
							switch ( alt118 )
							{
							case 1:
								DebugEnterAlt(1);
								// JavaScript.g3:255:44: LT !
								{
								DebugLocation(255, 44);
								LT246=(IToken)Match(input,LT,Follow._LT_in_formalParameterList1741); if (state.failed) return retval;

								}
								break;

							default:
								goto loop118;
							}
						}

						loop118:
							;

						} finally { DebugExitSubRule(118); }

						DebugLocation(255, 47);
						PushFollow(Follow._formalParameter_in_formalParameterList1745);
						formalParameter247=formalParameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameter247.Tree);

						}
						break;

					default:
						goto loop119;
					}
				}

				loop119:
					;

				} finally { DebugExitSubRule(119); }


				}
				break;

			}
			} finally { DebugExitSubRule(120); }

			DebugLocation(255, 69);
			// JavaScript.g3:255:69: ( LT !)*
			try { DebugEnterSubRule(121);
			while (true)
			{
				int alt121=2;
				try { DebugEnterDecision(121, false);
				int LA121_1 = input.LA(1);

				if ((LA121_1==LT))
				{
					alt121 = 1;
				}


				} finally { DebugExitDecision(121); }
				switch ( alt121 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:255:69: LT !
					{
					DebugLocation(255, 69);
					LT248=(IToken)Match(input,LT,Follow._LT_in_formalParameterList1751); if (state.failed) return retval;

					}
					break;

				default:
					goto loop121;
				}
			}

			loop121:
				;

			} finally { DebugExitSubRule(121); }

			DebugLocation(255, 75);
			char_literal249=(IToken)Match(input,88,Follow._88_in_formalParameterList1755); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterList", 38);
			LeaveRule("formalParameterList", 38);
			LeaveRule_formalParameterList();
			if (state.backtracking > 0) { Memoize(input, 38, formalParameterList_StartIndex); }

		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return retval;

	}
	// $ANTLR end "formalParameterList"

	partial void EnterRule_formalParameter();
	partial void LeaveRule_formalParameter();
	// $ANTLR start "formalParameter"
	// JavaScript.g3:258:1: formalParameter : Identifier -> ^( PARAMETER ^( IDENTIFIER Identifier ) ) ;
	[GrammarRule("formalParameter")]
	private AstParserRuleReturnScope<object, IToken> formalParameter()
	{
		EnterRule_formalParameter();
		EnterRule("formalParameter", 39);
		TraceIn("formalParameter", 39);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameter_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Identifier250 = default(IToken);

		object Identifier250_tree = default(object);
		RewriteRuleITokenStream stream_Identifier=new RewriteRuleITokenStream(adaptor,"token Identifier");
		try { DebugEnterRule(GrammarFileName, "formalParameter");
		DebugLocation(258, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// JavaScript.g3:259:2: ( Identifier -> ^( PARAMETER ^( IDENTIFIER Identifier ) ) )
			DebugEnterAlt(1);
			// JavaScript.g3:259:4: Identifier
			{
			DebugLocation(259, 4);
			Identifier250=(IToken)Match(input,Identifier,Follow._Identifier_in_formalParameter1768); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_Identifier.Add(Identifier250);



			{
			// AST REWRITE
			// elements: Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 259:15: -> ^( PARAMETER ^( IDENTIFIER Identifier ) )
			{
				DebugLocation(259, 18);
				// JavaScript.g3:259:18: ^( PARAMETER ^( IDENTIFIER Identifier ) )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(259, 20);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PARAMETER, "PARAMETER"), root_1);

				DebugLocation(259, 30);
				// JavaScript.g3:259:30: ^( IDENTIFIER Identifier )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(259, 32);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_2);

				DebugLocation(259, 43);
				adaptor.AddChild(root_2, stream_Identifier.NextNode());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameter", 39);
			LeaveRule("formalParameter", 39);
			LeaveRule_formalParameter();
			if (state.backtracking > 0) { Memoize(input, 39, formalParameter_StartIndex); }

		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "formalParameter"); }
		return retval;

	}
	// $ANTLR end "formalParameter"

	partial void EnterRule_functionBody();
	partial void LeaveRule_functionBody();
	// $ANTLR start "functionBody"
	// JavaScript.g3:262:1: functionBody : '{' ( LT )* ( sourceElements )? ( LT )* '}' -> ^( FUNCTIONBODY ( sourceElements )? ) ;
	[GrammarRule("functionBody")]
	private AstParserRuleReturnScope<object, IToken> functionBody()
	{
		EnterRule_functionBody();
		EnterRule("functionBody", 40);
		TraceIn("functionBody", 40);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int functionBody_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal251 = default(IToken);
		IToken LT252 = default(IToken);
		IToken LT254 = default(IToken);
		IToken char_literal255 = default(IToken);
		AstParserRuleReturnScope<object, IToken> sourceElements253 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal251_tree = default(object);
		object LT252_tree = default(object);
		object LT254_tree = default(object);
		object char_literal255_tree = default(object);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_sourceElements=new RewriteRuleSubtreeStream(adaptor,"rule sourceElements");
		try { DebugEnterRule(GrammarFileName, "functionBody");
		DebugLocation(262, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// JavaScript.g3:263:2: ( '{' ( LT )* ( sourceElements )? ( LT )* '}' -> ^( FUNCTIONBODY ( sourceElements )? ) )
			DebugEnterAlt(1);
			// JavaScript.g3:263:4: '{' ( LT )* ( sourceElements )? ( LT )* '}'
			{
			DebugLocation(263, 4);
			char_literal251=(IToken)Match(input,150,Follow._150_in_functionBody1792); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_150.Add(char_literal251);

			DebugLocation(263, 8);
			// JavaScript.g3:263:8: ( LT )*
			try { DebugEnterSubRule(122);
			while (true)
			{
				int alt122=2;
				try { DebugEnterDecision(122, false);
				int LA122_1 = input.LA(1);

				if ((LA122_1==LT))
				{
					int LA122_2 = input.LA(2);

					if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
					{
						alt122 = 1;
					}


				}


				} finally { DebugExitDecision(122); }
				switch ( alt122 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:263:8: LT
					{
					DebugLocation(263, 8);
					LT252=(IToken)Match(input,LT,Follow._LT_in_functionBody1794); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT252);


					}
					break;

				default:
					goto loop122;
				}
			}

			loop122:
				;

			} finally { DebugExitSubRule(122); }

			DebugLocation(263, 12);
			// JavaScript.g3:263:12: ( sourceElements )?
			int alt123=2;
			try { DebugEnterSubRule(123);
			try { DebugEnterDecision(123, false);
			int LA123_1 = input.LA(1);

			if ((LA123_1==Identifier||LA123_1==NumericLiteral||LA123_1==RegularExpressionLiteral||LA123_1==StringLiteral||LA123_1==79||LA123_1==87||(LA123_1>=91 && LA123_1<=92)||(LA123_1>=95 && LA123_1<=96)||LA123_1==102||LA123_1==117||LA123_1==121||(LA123_1>=124 && LA123_1<=125)||(LA123_1>=127 && LA123_1<=128)||LA123_1==130||(LA123_1>=132 && LA123_1<=134)||(LA123_1>=137 && LA123_1<=150)||LA123_1==155))
			{
				alt123 = 1;
			}
			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:263:12: sourceElements
				{
				DebugLocation(263, 12);
				PushFollow(Follow._sourceElements_in_functionBody1797);
				sourceElements253=sourceElements();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sourceElements.Add(sourceElements253.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(123); }

			DebugLocation(263, 28);
			// JavaScript.g3:263:28: ( LT )*
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, false);
				int LA124_1 = input.LA(1);

				if ((LA124_1==LT))
				{
					alt124 = 1;
				}


				} finally { DebugExitDecision(124); }
				switch ( alt124 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:263:28: LT
					{
					DebugLocation(263, 28);
					LT254=(IToken)Match(input,LT,Follow._LT_in_functionBody1800); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT254);


					}
					break;

				default:
					goto loop124;
				}
			}

			loop124:
				;

			} finally { DebugExitSubRule(124); }

			DebugLocation(263, 32);
			char_literal255=(IToken)Match(input,154,Follow._154_in_functionBody1803); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_154.Add(char_literal255);



			{
			// AST REWRITE
			// elements: sourceElements
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 263:36: -> ^( FUNCTIONBODY ( sourceElements )? )
			{
				DebugLocation(263, 39);
				// JavaScript.g3:263:39: ^( FUNCTIONBODY ( sourceElements )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(263, 41);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNCTIONBODY, "FUNCTIONBODY"), root_1);

				DebugLocation(263, 54);
				// JavaScript.g3:263:54: ( sourceElements )?
				if (stream_sourceElements.HasNext)
				{
					DebugLocation(263, 54);
					adaptor.AddChild(root_1, stream_sourceElements.NextTree());

				}
				stream_sourceElements.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionBody", 40);
			LeaveRule("functionBody", 40);
			LeaveRule_functionBody();
			if (state.backtracking > 0) { Memoize(input, 40, functionBody_StartIndex); }

		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "functionBody"); }
		return retval;

	}
	// $ANTLR end "functionBody"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// JavaScript.g3:267:1: expression : assignmentExpression ( ( LT !)* ',' ! ( LT !)* assignmentExpression )* ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 41);
		TraceIn("expression", 41);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT257 = default(IToken);
		IToken char_literal258 = default(IToken);
		IToken LT259 = default(IToken);
		AstParserRuleReturnScope<object, IToken> assignmentExpression256 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentExpression260 = default(AstParserRuleReturnScope<object, IToken>);

		object LT257_tree = default(object);
		object char_literal258_tree = default(object);
		object LT259_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(267, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// JavaScript.g3:268:2: ( assignmentExpression ( ( LT !)* ',' ! ( LT !)* assignmentExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g3:268:4: assignmentExpression ( ( LT !)* ',' ! ( LT !)* assignmentExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(268, 4);
			PushFollow(Follow._assignmentExpression_in_expression1824);
			assignmentExpression256=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression256.Tree);
			DebugLocation(268, 25);
			// JavaScript.g3:268:25: ( ( LT !)* ',' ! ( LT !)* assignmentExpression )*
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=2;
				try { DebugEnterDecision(127, false);
				try
				{
					alt127 = dfa127.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(127); }
				switch ( alt127 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:268:26: ( LT !)* ',' ! ( LT !)* assignmentExpression
					{
					DebugLocation(268, 28);
					// JavaScript.g3:268:28: ( LT !)*
					try { DebugEnterSubRule(125);
					while (true)
					{
						int alt125=2;
						try { DebugEnterDecision(125, false);
						int LA125_1 = input.LA(1);

						if ((LA125_1==LT))
						{
							alt125 = 1;
						}


						} finally { DebugExitDecision(125); }
						switch ( alt125 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:268:28: LT !
							{
							DebugLocation(268, 28);
							LT257=(IToken)Match(input,LT,Follow._LT_in_expression1827); if (state.failed) return retval;

							}
							break;

						default:
							goto loop125;
						}
					}

					loop125:
						;

					} finally { DebugExitSubRule(125); }

					DebugLocation(268, 34);
					char_literal258=(IToken)Match(input,94,Follow._94_in_expression1831); if (state.failed) return retval;
					DebugLocation(268, 38);
					// JavaScript.g3:268:38: ( LT !)*
					try { DebugEnterSubRule(126);
					while (true)
					{
						int alt126=2;
						try { DebugEnterDecision(126, false);
						int LA126_1 = input.LA(1);

						if ((LA126_1==LT))
						{
							alt126 = 1;
						}


						} finally { DebugExitDecision(126); }
						switch ( alt126 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:268:38: LT !
							{
							DebugLocation(268, 38);
							LT259=(IToken)Match(input,LT,Follow._LT_in_expression1834); if (state.failed) return retval;

							}
							break;

						default:
							goto loop126;
						}
					}

					loop126:
						;

					} finally { DebugExitSubRule(126); }

					DebugLocation(268, 41);
					PushFollow(Follow._assignmentExpression_in_expression1838);
					assignmentExpression260=assignmentExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression260.Tree);

					}
					break;

				default:
					goto loop127;
				}
			}

			loop127:
				;

			} finally { DebugExitSubRule(127); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 41);
			LeaveRule("expression", 41);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 41, expression_StartIndex); }

		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expressionNoIn();
	partial void LeaveRule_expressionNoIn();
	// $ANTLR start "expressionNoIn"
	// JavaScript.g3:271:1: expressionNoIn : assignmentExpressionNoIn ( ( LT !)* ',' ! ( LT !)* assignmentExpressionNoIn )* ;
	[GrammarRule("expressionNoIn")]
	private AstParserRuleReturnScope<object, IToken> expressionNoIn()
	{
		EnterRule_expressionNoIn();
		EnterRule("expressionNoIn", 42);
		TraceIn("expressionNoIn", 42);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT262 = default(IToken);
		IToken char_literal263 = default(IToken);
		IToken LT264 = default(IToken);
		AstParserRuleReturnScope<object, IToken> assignmentExpressionNoIn261 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentExpressionNoIn265 = default(AstParserRuleReturnScope<object, IToken>);

		object LT262_tree = default(object);
		object char_literal263_tree = default(object);
		object LT264_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expressionNoIn");
		DebugLocation(271, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// JavaScript.g3:272:2: ( assignmentExpressionNoIn ( ( LT !)* ',' ! ( LT !)* assignmentExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g3:272:4: assignmentExpressionNoIn ( ( LT !)* ',' ! ( LT !)* assignmentExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(272, 4);
			PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn1853);
			assignmentExpressionNoIn261=assignmentExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpressionNoIn261.Tree);
			DebugLocation(272, 29);
			// JavaScript.g3:272:29: ( ( LT !)* ',' ! ( LT !)* assignmentExpressionNoIn )*
			try { DebugEnterSubRule(130);
			while (true)
			{
				int alt130=2;
				try { DebugEnterDecision(130, false);
				try
				{
					alt130 = dfa130.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(130); }
				switch ( alt130 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:272:30: ( LT !)* ',' ! ( LT !)* assignmentExpressionNoIn
					{
					DebugLocation(272, 32);
					// JavaScript.g3:272:32: ( LT !)*
					try { DebugEnterSubRule(128);
					while (true)
					{
						int alt128=2;
						try { DebugEnterDecision(128, false);
						int LA128_1 = input.LA(1);

						if ((LA128_1==LT))
						{
							alt128 = 1;
						}


						} finally { DebugExitDecision(128); }
						switch ( alt128 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:272:32: LT !
							{
							DebugLocation(272, 32);
							LT262=(IToken)Match(input,LT,Follow._LT_in_expressionNoIn1856); if (state.failed) return retval;

							}
							break;

						default:
							goto loop128;
						}
					}

					loop128:
						;

					} finally { DebugExitSubRule(128); }

					DebugLocation(272, 38);
					char_literal263=(IToken)Match(input,94,Follow._94_in_expressionNoIn1860); if (state.failed) return retval;
					DebugLocation(272, 42);
					// JavaScript.g3:272:42: ( LT !)*
					try { DebugEnterSubRule(129);
					while (true)
					{
						int alt129=2;
						try { DebugEnterDecision(129, false);
						int LA129_1 = input.LA(1);

						if ((LA129_1==LT))
						{
							alt129 = 1;
						}


						} finally { DebugExitDecision(129); }
						switch ( alt129 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:272:42: LT !
							{
							DebugLocation(272, 42);
							LT264=(IToken)Match(input,LT,Follow._LT_in_expressionNoIn1863); if (state.failed) return retval;

							}
							break;

						default:
							goto loop129;
						}
					}

					loop129:
						;

					} finally { DebugExitSubRule(129); }

					DebugLocation(272, 45);
					PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn1867);
					assignmentExpressionNoIn265=assignmentExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpressionNoIn265.Tree);

					}
					break;

				default:
					goto loop130;
				}
			}

			loop130:
				;

			} finally { DebugExitSubRule(130); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionNoIn", 42);
			LeaveRule("expressionNoIn", 42);
			LeaveRule_expressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 42, expressionNoIn_StartIndex); }

		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionNoIn"); }
		return retval;

	}
	// $ANTLR end "expressionNoIn"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// JavaScript.g3:275:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( OPERATOR assignmentOperator leftHandSideExpression assignmentExpression ) );
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<object, IToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 43);
		TraceIn("assignmentExpression", 43);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int assignmentExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT268 = default(IToken);
		IToken LT270 = default(IToken);
		AstParserRuleReturnScope<object, IToken> conditionalExpression266 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> leftHandSideExpression267 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentOperator269 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentExpression271 = default(AstParserRuleReturnScope<object, IToken>);

		object LT268_tree = default(object);
		object LT270_tree = default(object);
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleSubtreeStream stream_leftHandSideExpression=new RewriteRuleSubtreeStream(adaptor,"rule leftHandSideExpression");
		RewriteRuleSubtreeStream stream_assignmentOperator=new RewriteRuleSubtreeStream(adaptor,"rule assignmentOperator");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(275, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// JavaScript.g3:276:2: ( conditionalExpression | leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( OPERATOR assignmentOperator leftHandSideExpression assignmentExpression ) )
			int alt133=2;
			try { DebugEnterDecision(133, false);
			switch (input.LA(1))
			{
			case 141:
				{
				int LA133_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_JavaScript_fragment)))
				{
					alt133 = 1;
				}
				else if ((true))
				{
					alt133 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA133_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_JavaScript_fragment)))
				{
					alt133 = 1;
				}
				else if ((true))
				{
					alt133 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 138:
				{
				int LA133_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_JavaScript_fragment)))
				{
					alt133 = 1;
				}
				else if ((true))
				{
					alt133 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 143:
				{
				int LA133_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_JavaScript_fragment)))
				{
					alt133 = 1;
				}
				else if ((true))
				{
					alt133 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA133_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_JavaScript_fragment)))
				{
					alt133 = 1;
				}
				else if ((true))
				{
					alt133 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NumericLiteral:
				{
				int LA133_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_JavaScript_fragment)))
				{
					alt133 = 1;
				}
				else if ((true))
				{
					alt133 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case StringLiteral:
				{
				int LA133_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_JavaScript_fragment)))
				{
					alt133 = 1;
				}
				else if ((true))
				{
					alt133 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RegularExpressionLiteral:
				{
				int LA133_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_JavaScript_fragment)))
				{
					alt133 = 1;
				}
				else if ((true))
				{
					alt133 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 117:
				{
				int LA133_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_JavaScript_fragment)))
				{
					alt133 = 1;
				}
				else if ((true))
				{
					alt133 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 150:
				{
				int LA133_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_JavaScript_fragment)))
				{
					alt133 = 1;
				}
				else if ((true))
				{
					alt133 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 87:
				{
				int LA133_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_JavaScript_fragment)))
				{
					alt133 = 1;
				}
				else if ((true))
				{
					alt133 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 133:
				{
				int LA133_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_JavaScript_fragment)))
				{
					alt133 = 1;
				}
				else if ((true))
				{
					alt133 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 137:
				{
				int LA133_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_JavaScript_fragment)))
				{
					alt133 = 1;
				}
				else if ((true))
				{
					alt133 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 79:
			case 91:
			case 92:
			case 95:
			case 96:
			case 127:
			case 145:
			case 147:
			case 155:
				{
				alt133 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(133); }
			switch (alt133)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:276:4: conditionalExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(276, 4);
				PushFollow(Follow._conditionalExpression_in_assignmentExpression1881);
				conditionalExpression266=conditionalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression266.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:277:4: leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression
				{
				DebugLocation(277, 4);
				PushFollow(Follow._leftHandSideExpression_in_assignmentExpression1886);
				leftHandSideExpression267=leftHandSideExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_leftHandSideExpression.Add(leftHandSideExpression267.Tree);
				DebugLocation(277, 27);
				// JavaScript.g3:277:27: ( LT )*
				try { DebugEnterSubRule(131);
				while (true)
				{
					int alt131=2;
					try { DebugEnterDecision(131, false);
					int LA131_1 = input.LA(1);

					if ((LA131_1==LT))
					{
						alt131 = 1;
					}


					} finally { DebugExitDecision(131); }
					switch ( alt131 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:277:27: LT
						{
						DebugLocation(277, 27);
						LT268=(IToken)Match(input,LT,Follow._LT_in_assignmentExpression1888); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT268);


						}
						break;

					default:
						goto loop131;
					}
				}

				loop131:
					;

				} finally { DebugExitSubRule(131); }

				DebugLocation(277, 31);
				PushFollow(Follow._assignmentOperator_in_assignmentExpression1891);
				assignmentOperator269=assignmentOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_assignmentOperator.Add(assignmentOperator269.Tree);
				DebugLocation(277, 50);
				// JavaScript.g3:277:50: ( LT )*
				try { DebugEnterSubRule(132);
				while (true)
				{
					int alt132=2;
					try { DebugEnterDecision(132, false);
					int LA132_1 = input.LA(1);

					if ((LA132_1==LT))
					{
						alt132 = 1;
					}


					} finally { DebugExitDecision(132); }
					switch ( alt132 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:277:50: LT
						{
						DebugLocation(277, 50);
						LT270=(IToken)Match(input,LT,Follow._LT_in_assignmentExpression1893); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT270);


						}
						break;

					default:
						goto loop132;
					}
				}

				loop132:
					;

				} finally { DebugExitSubRule(132); }

				DebugLocation(277, 54);
				PushFollow(Follow._assignmentExpression_in_assignmentExpression1896);
				assignmentExpression271=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression271.Tree);


				{
				// AST REWRITE
				// elements: assignmentOperator, leftHandSideExpression, assignmentExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 277:75: -> ^( OPERATOR assignmentOperator leftHandSideExpression assignmentExpression )
				{
					DebugLocation(277, 78);
					// JavaScript.g3:277:78: ^( OPERATOR assignmentOperator leftHandSideExpression assignmentExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(277, 80);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(277, 89);
					adaptor.AddChild(root_1, stream_assignmentOperator.NextTree());
					DebugLocation(277, 108);
					adaptor.AddChild(root_1, stream_leftHandSideExpression.NextTree());
					DebugLocation(277, 131);
					adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 43);
			LeaveRule("assignmentExpression", 43);
			LeaveRule_assignmentExpression();
			if (state.backtracking > 0) { Memoize(input, 43, assignmentExpression_StartIndex); }

		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_assignmentExpressionNoIn();
	partial void LeaveRule_assignmentExpressionNoIn();
	// $ANTLR start "assignmentExpressionNoIn"
	// JavaScript.g3:280:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( OPERATOR assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
	[GrammarRule("assignmentExpressionNoIn")]
	private AstParserRuleReturnScope<object, IToken> assignmentExpressionNoIn()
	{
		EnterRule_assignmentExpressionNoIn();
		EnterRule("assignmentExpressionNoIn", 44);
		TraceIn("assignmentExpressionNoIn", 44);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int assignmentExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT274 = default(IToken);
		IToken LT276 = default(IToken);
		AstParserRuleReturnScope<object, IToken> conditionalExpressionNoIn272 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> leftHandSideExpression273 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentOperator275 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentExpressionNoIn277 = default(AstParserRuleReturnScope<object, IToken>);

		object LT274_tree = default(object);
		object LT276_tree = default(object);
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleSubtreeStream stream_leftHandSideExpression=new RewriteRuleSubtreeStream(adaptor,"rule leftHandSideExpression");
		RewriteRuleSubtreeStream stream_assignmentOperator=new RewriteRuleSubtreeStream(adaptor,"rule assignmentOperator");
		RewriteRuleSubtreeStream stream_assignmentExpressionNoIn=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpressionNoIn");
		try { DebugEnterRule(GrammarFileName, "assignmentExpressionNoIn");
		DebugLocation(280, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// JavaScript.g3:281:2: ( conditionalExpressionNoIn | leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( OPERATOR assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) )
			int alt136=2;
			try { DebugEnterDecision(136, false);
			switch (input.LA(1))
			{
			case 141:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred151_JavaScript_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred151_JavaScript_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 138:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred151_JavaScript_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 143:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred151_JavaScript_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred151_JavaScript_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NumericLiteral:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred151_JavaScript_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case StringLiteral:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred151_JavaScript_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RegularExpressionLiteral:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred151_JavaScript_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 117:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred151_JavaScript_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 150:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred151_JavaScript_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 87:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred151_JavaScript_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 133:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred151_JavaScript_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 137:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred151_JavaScript_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 79:
			case 91:
			case 92:
			case 95:
			case 96:
			case 127:
			case 145:
			case 147:
			case 155:
				{
				alt136 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(136); }
			switch (alt136)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:281:4: conditionalExpressionNoIn
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(281, 4);
				PushFollow(Follow._conditionalExpressionNoIn_in_assignmentExpressionNoIn1920);
				conditionalExpressionNoIn272=conditionalExpressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpressionNoIn272.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:282:4: leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn
				{
				DebugLocation(282, 4);
				PushFollow(Follow._leftHandSideExpression_in_assignmentExpressionNoIn1925);
				leftHandSideExpression273=leftHandSideExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_leftHandSideExpression.Add(leftHandSideExpression273.Tree);
				DebugLocation(282, 27);
				// JavaScript.g3:282:27: ( LT )*
				try { DebugEnterSubRule(134);
				while (true)
				{
					int alt134=2;
					try { DebugEnterDecision(134, false);
					int LA134_1 = input.LA(1);

					if ((LA134_1==LT))
					{
						alt134 = 1;
					}


					} finally { DebugExitDecision(134); }
					switch ( alt134 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:282:27: LT
						{
						DebugLocation(282, 27);
						LT274=(IToken)Match(input,LT,Follow._LT_in_assignmentExpressionNoIn1927); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT274);


						}
						break;

					default:
						goto loop134;
					}
				}

				loop134:
					;

				} finally { DebugExitSubRule(134); }

				DebugLocation(282, 31);
				PushFollow(Follow._assignmentOperator_in_assignmentExpressionNoIn1930);
				assignmentOperator275=assignmentOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_assignmentOperator.Add(assignmentOperator275.Tree);
				DebugLocation(282, 50);
				// JavaScript.g3:282:50: ( LT )*
				try { DebugEnterSubRule(135);
				while (true)
				{
					int alt135=2;
					try { DebugEnterDecision(135, false);
					int LA135_1 = input.LA(1);

					if ((LA135_1==LT))
					{
						alt135 = 1;
					}


					} finally { DebugExitDecision(135); }
					switch ( alt135 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:282:50: LT
						{
						DebugLocation(282, 50);
						LT276=(IToken)Match(input,LT,Follow._LT_in_assignmentExpressionNoIn1932); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT276);


						}
						break;

					default:
						goto loop135;
					}
				}

				loop135:
					;

				} finally { DebugExitSubRule(135); }

				DebugLocation(282, 54);
				PushFollow(Follow._assignmentExpressionNoIn_in_assignmentExpressionNoIn1935);
				assignmentExpressionNoIn277=assignmentExpressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_assignmentExpressionNoIn.Add(assignmentExpressionNoIn277.Tree);


				{
				// AST REWRITE
				// elements: assignmentOperator, leftHandSideExpression, assignmentExpressionNoIn
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 282:79: -> ^( OPERATOR assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
				{
					DebugLocation(282, 82);
					// JavaScript.g3:282:82: ^( OPERATOR assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(282, 84);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(282, 93);
					adaptor.AddChild(root_1, stream_assignmentOperator.NextTree());
					DebugLocation(282, 112);
					adaptor.AddChild(root_1, stream_leftHandSideExpression.NextTree());
					DebugLocation(282, 135);
					adaptor.AddChild(root_1, stream_assignmentExpressionNoIn.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpressionNoIn", 44);
			LeaveRule("assignmentExpressionNoIn", 44);
			LeaveRule_assignmentExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 44, assignmentExpressionNoIn_StartIndex); }

		}
		DebugLocation(283, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "assignmentExpressionNoIn"

	partial void EnterRule_leftHandSideExpression();
	partial void LeaveRule_leftHandSideExpression();
	// $ANTLR start "leftHandSideExpression"
	// JavaScript.g3:285:1: leftHandSideExpression : ( callExpression | newExpression );
	[GrammarRule("leftHandSideExpression")]
	private AstParserRuleReturnScope<object, IToken> leftHandSideExpression()
	{
		EnterRule_leftHandSideExpression();
		EnterRule("leftHandSideExpression", 45);
		TraceIn("leftHandSideExpression", 45);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int leftHandSideExpression_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> callExpression278 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> newExpression279 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "leftHandSideExpression");
		DebugLocation(285, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// JavaScript.g3:286:2: ( callExpression | newExpression )
			int alt137=2;
			try { DebugEnterDecision(137, false);
			switch (input.LA(1))
			{
			case 141:
				{
				int LA137_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_JavaScript_fragment)))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA137_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_JavaScript_fragment)))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 138:
				{
				int LA137_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_JavaScript_fragment)))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 143:
				{
				int LA137_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_JavaScript_fragment)))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA137_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_JavaScript_fragment)))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NumericLiteral:
				{
				int LA137_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_JavaScript_fragment)))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case StringLiteral:
				{
				int LA137_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_JavaScript_fragment)))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RegularExpressionLiteral:
				{
				int LA137_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_JavaScript_fragment)))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 117:
				{
				int LA137_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_JavaScript_fragment)))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 150:
				{
				int LA137_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_JavaScript_fragment)))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 87:
				{
				int LA137_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_JavaScript_fragment)))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 133:
				{
				int LA137_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_JavaScript_fragment)))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 137:
				{
				int LA137_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_JavaScript_fragment)))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:286:4: callExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(286, 4);
				PushFollow(Follow._callExpression_in_leftHandSideExpression1958);
				callExpression278=callExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, callExpression278.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:287:4: newExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(287, 4);
				PushFollow(Follow._newExpression_in_leftHandSideExpression1963);
				newExpression279=newExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newExpression279.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("leftHandSideExpression", 45);
			LeaveRule("leftHandSideExpression", 45);
			LeaveRule_leftHandSideExpression();
			if (state.backtracking > 0) { Memoize(input, 45, leftHandSideExpression_StartIndex); }

		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "leftHandSideExpression"); }
		return retval;

	}
	// $ANTLR end "leftHandSideExpression"

	partial void EnterRule_newExpression();
	partial void LeaveRule_newExpression();
	// $ANTLR start "newExpression"
	// JavaScript.g3:290:1: newExpression : ( memberExpression | 'new' ( LT )* newExpression -> ^( NEW newExpression ) );
	[GrammarRule("newExpression")]
	private AstParserRuleReturnScope<object, IToken> newExpression()
	{
		EnterRule_newExpression();
		EnterRule("newExpression", 46);
		TraceIn("newExpression", 46);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int newExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal281 = default(IToken);
		IToken LT282 = default(IToken);
		AstParserRuleReturnScope<object, IToken> memberExpression280 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> newExpression283 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal281_tree = default(object);
		object LT282_tree = default(object);
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleSubtreeStream stream_newExpression=new RewriteRuleSubtreeStream(adaptor,"rule newExpression");
		try { DebugEnterRule(GrammarFileName, "newExpression");
		DebugLocation(290, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// JavaScript.g3:291:2: ( memberExpression | 'new' ( LT )* newExpression -> ^( NEW newExpression ) )
			int alt139=2;
			try { DebugEnterDecision(139, false);
			int LA139_1 = input.LA(1);

			if ((LA139_1==Identifier||LA139_1==NumericLiteral||LA139_1==RegularExpressionLiteral||LA139_1==StringLiteral||LA139_1==87||LA139_1==117||LA139_1==130||LA139_1==133||LA139_1==138||LA139_1==141||LA139_1==143||LA139_1==150))
			{
				alt139 = 1;
			}
			else if ((LA139_1==137))
			{
				int LA139_2 = input.LA(2);

				if ((EvaluatePredicate(synpred155_JavaScript_fragment)))
				{
					alt139 = 1;
				}
				else if ((true))
				{
					alt139 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 139, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 139, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(139); }
			switch (alt139)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:291:4: memberExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(291, 4);
				PushFollow(Follow._memberExpression_in_newExpression1974);
				memberExpression280=memberExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, memberExpression280.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:292:4: 'new' ( LT )* newExpression
				{
				DebugLocation(292, 4);
				string_literal281=(IToken)Match(input,137,Follow._137_in_newExpression1979); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_137.Add(string_literal281);

				DebugLocation(292, 10);
				// JavaScript.g3:292:10: ( LT )*
				try { DebugEnterSubRule(138);
				while (true)
				{
					int alt138=2;
					try { DebugEnterDecision(138, false);
					int LA138_1 = input.LA(1);

					if ((LA138_1==LT))
					{
						alt138 = 1;
					}


					} finally { DebugExitDecision(138); }
					switch ( alt138 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:292:10: LT
						{
						DebugLocation(292, 10);
						LT282=(IToken)Match(input,LT,Follow._LT_in_newExpression1981); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT282);


						}
						break;

					default:
						goto loop138;
					}
				}

				loop138:
					;

				} finally { DebugExitSubRule(138); }

				DebugLocation(292, 14);
				PushFollow(Follow._newExpression_in_newExpression1984);
				newExpression283=newExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_newExpression.Add(newExpression283.Tree);


				{
				// AST REWRITE
				// elements: newExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 292:28: -> ^( NEW newExpression )
				{
					DebugLocation(292, 31);
					// JavaScript.g3:292:31: ^( NEW newExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(292, 33);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(NEW, "NEW"), root_1);

					DebugLocation(292, 37);
					adaptor.AddChild(root_1, stream_newExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newExpression", 46);
			LeaveRule("newExpression", 46);
			LeaveRule_newExpression();
			if (state.backtracking > 0) { Memoize(input, 46, newExpression_StartIndex); }

		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "newExpression"); }
		return retval;

	}
	// $ANTLR end "newExpression"

	partial void EnterRule_memberExpression();
	partial void LeaveRule_memberExpression();
	// $ANTLR start "memberExpression"
	// JavaScript.g3:295:1: memberExpression : ( primaryExpression | functionExpression | newMemberExpression ) ( ( LT )* memberExpressionSuffix )* ;
	[GrammarRule("memberExpression")]
	private AstParserRuleReturnScope<object, IToken> memberExpression()
	{
		EnterRule_memberExpression();
		EnterRule("memberExpression", 47);
		TraceIn("memberExpression", 47);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int memberExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT287 = default(IToken);
		AstParserRuleReturnScope<object, IToken> primaryExpression284 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionExpression285 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> newMemberExpression286 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> memberExpressionSuffix288 = default(AstParserRuleReturnScope<object, IToken>);

		object LT287_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "memberExpression");
		DebugLocation(295, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// JavaScript.g3:296:2: ( ( primaryExpression | functionExpression | newMemberExpression ) ( ( LT )* memberExpressionSuffix )* )
			DebugEnterAlt(1);
			// JavaScript.g3:296:4: ( primaryExpression | functionExpression | newMemberExpression ) ( ( LT )* memberExpressionSuffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(296, 4);
			// JavaScript.g3:296:4: ( primaryExpression | functionExpression | newMemberExpression )
			int alt140=3;
			try { DebugEnterSubRule(140);
			try { DebugEnterDecision(140, false);
			switch (input.LA(1))
			{
			case Identifier:
			case NumericLiteral:
			case RegularExpressionLiteral:
			case StringLiteral:
			case 87:
			case 117:
			case 130:
			case 138:
			case 141:
			case 143:
			case 150:
				{
				alt140 = 1;
				}
				break;
			case 133:
				{
				alt140 = 2;
				}
				break;
			case 137:
				{
				alt140 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 140, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:296:6: primaryExpression
				{
				DebugLocation(296, 6);
				PushFollow(Follow._primaryExpression_in_memberExpression2005);
				primaryExpression284=primaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primaryExpression284.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:297:6: functionExpression
				{
				DebugLocation(297, 6);
				PushFollow(Follow._functionExpression_in_memberExpression2012);
				functionExpression285=functionExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionExpression285.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g3:298:6: newMemberExpression
				{
				DebugLocation(298, 6);
				PushFollow(Follow._newMemberExpression_in_memberExpression2019);
				newMemberExpression286=newMemberExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newMemberExpression286.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(140); }

			DebugLocation(300, 4);
			// JavaScript.g3:300:4: ( ( LT )* memberExpressionSuffix )*
			try { DebugEnterSubRule(142);
			while (true)
			{
				int alt142=2;
				try { DebugEnterDecision(142, false);
				int LA142_1 = input.LA(1);

				if ((LA142_1==LT))
				{
					int LA142_2 = input.LA(2);

					if ((EvaluatePredicate(synpred160_JavaScript_fragment)))
					{
						alt142 = 1;
					}


				}
				else if ((LA142_1==98||LA142_1==117))
				{
					alt142 = 1;
				}


				} finally { DebugExitDecision(142); }
				switch ( alt142 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:300:5: ( LT )* memberExpressionSuffix
					{
					DebugLocation(300, 5);
					// JavaScript.g3:300:5: ( LT )*
					try { DebugEnterSubRule(141);
					while (true)
					{
						int alt141=2;
						try { DebugEnterDecision(141, false);
						int LA141_1 = input.LA(1);

						if ((LA141_1==LT))
						{
							alt141 = 1;
						}


						} finally { DebugExitDecision(141); }
						switch ( alt141 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:300:5: LT
							{
							DebugLocation(300, 5);
							LT287=(IToken)Match(input,LT,Follow._LT_in_memberExpression2031); if (state.failed) return retval;
							if (state.backtracking == 0) {
							LT287_tree = (object)adaptor.Create(LT287);
							adaptor.AddChild(root_0, LT287_tree);
							}

							}
							break;

						default:
							goto loop141;
						}
					}

					loop141:
						;

					} finally { DebugExitSubRule(141); }

					DebugLocation(300, 9);
					PushFollow(Follow._memberExpressionSuffix_in_memberExpression2034);
					memberExpressionSuffix288=memberExpressionSuffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, memberExpressionSuffix288.Tree);

					}
					break;

				default:
					goto loop142;
				}
			}

			loop142:
				;

			} finally { DebugExitSubRule(142); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberExpression", 47);
			LeaveRule("memberExpression", 47);
			LeaveRule_memberExpression();
			if (state.backtracking > 0) { Memoize(input, 47, memberExpression_StartIndex); }

		}
		DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "memberExpression"); }
		return retval;

	}
	// $ANTLR end "memberExpression"

	partial void EnterRule_newMemberExpression();
	partial void LeaveRule_newMemberExpression();
	// $ANTLR start "newMemberExpression"
	// JavaScript.g3:303:1: newMemberExpression : 'new' ( LT )* memberExpression ( LT )* arguments -> ^( NEW memberExpression arguments ) ;
	[GrammarRule("newMemberExpression")]
	private AstParserRuleReturnScope<object, IToken> newMemberExpression()
	{
		EnterRule_newMemberExpression();
		EnterRule("newMemberExpression", 48);
		TraceIn("newMemberExpression", 48);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int newMemberExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal289 = default(IToken);
		IToken LT290 = default(IToken);
		IToken LT292 = default(IToken);
		AstParserRuleReturnScope<object, IToken> memberExpression291 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments293 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal289_tree = default(object);
		object LT290_tree = default(object);
		object LT292_tree = default(object);
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleSubtreeStream stream_memberExpression=new RewriteRuleSubtreeStream(adaptor,"rule memberExpression");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		try { DebugEnterRule(GrammarFileName, "newMemberExpression");
		DebugLocation(303, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// JavaScript.g3:304:2: ( 'new' ( LT )* memberExpression ( LT )* arguments -> ^( NEW memberExpression arguments ) )
			DebugEnterAlt(1);
			// JavaScript.g3:304:4: 'new' ( LT )* memberExpression ( LT )* arguments
			{
			DebugLocation(304, 4);
			string_literal289=(IToken)Match(input,137,Follow._137_in_newMemberExpression2047); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_137.Add(string_literal289);

			DebugLocation(304, 10);
			// JavaScript.g3:304:10: ( LT )*
			try { DebugEnterSubRule(143);
			while (true)
			{
				int alt143=2;
				try { DebugEnterDecision(143, false);
				int LA143_1 = input.LA(1);

				if ((LA143_1==LT))
				{
					alt143 = 1;
				}


				} finally { DebugExitDecision(143); }
				switch ( alt143 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:304:10: LT
					{
					DebugLocation(304, 10);
					LT290=(IToken)Match(input,LT,Follow._LT_in_newMemberExpression2049); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT290);


					}
					break;

				default:
					goto loop143;
				}
			}

			loop143:
				;

			} finally { DebugExitSubRule(143); }

			DebugLocation(304, 14);
			PushFollow(Follow._memberExpression_in_newMemberExpression2052);
			memberExpression291=memberExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_memberExpression.Add(memberExpression291.Tree);
			DebugLocation(304, 31);
			// JavaScript.g3:304:31: ( LT )*
			try { DebugEnterSubRule(144);
			while (true)
			{
				int alt144=2;
				try { DebugEnterDecision(144, false);
				int LA144_1 = input.LA(1);

				if ((LA144_1==LT))
				{
					alt144 = 1;
				}


				} finally { DebugExitDecision(144); }
				switch ( alt144 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:304:31: LT
					{
					DebugLocation(304, 31);
					LT292=(IToken)Match(input,LT,Follow._LT_in_newMemberExpression2054); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT292);


					}
					break;

				default:
					goto loop144;
				}
			}

			loop144:
				;

			} finally { DebugExitSubRule(144); }

			DebugLocation(304, 35);
			PushFollow(Follow._arguments_in_newMemberExpression2057);
			arguments293=arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_arguments.Add(arguments293.Tree);


			{
			// AST REWRITE
			// elements: memberExpression, arguments
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 304:45: -> ^( NEW memberExpression arguments )
			{
				DebugLocation(304, 48);
				// JavaScript.g3:304:48: ^( NEW memberExpression arguments )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(304, 50);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(NEW, "NEW"), root_1);

				DebugLocation(304, 54);
				adaptor.AddChild(root_1, stream_memberExpression.NextTree());
				DebugLocation(304, 71);
				adaptor.AddChild(root_1, stream_arguments.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newMemberExpression", 48);
			LeaveRule("newMemberExpression", 48);
			LeaveRule_newMemberExpression();
			if (state.backtracking > 0) { Memoize(input, 48, newMemberExpression_StartIndex); }

		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "newMemberExpression"); }
		return retval;

	}
	// $ANTLR end "newMemberExpression"

	partial void EnterRule_memberExpressionSuffix();
	partial void LeaveRule_memberExpressionSuffix();
	// $ANTLR start "memberExpressionSuffix"
	// JavaScript.g3:307:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix );
	[GrammarRule("memberExpressionSuffix")]
	private AstParserRuleReturnScope<object, IToken> memberExpressionSuffix()
	{
		EnterRule_memberExpressionSuffix();
		EnterRule("memberExpressionSuffix", 49);
		TraceIn("memberExpressionSuffix", 49);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int memberExpressionSuffix_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> indexSuffix294 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyReferenceSuffix295 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "memberExpressionSuffix");
		DebugLocation(307, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// JavaScript.g3:308:2: ( indexSuffix | propertyReferenceSuffix )
			int alt145=2;
			try { DebugEnterDecision(145, false);
			int LA145_1 = input.LA(1);

			if ((LA145_1==117))
			{
				alt145 = 1;
			}
			else if ((LA145_1==98))
			{
				alt145 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 145, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:308:4: indexSuffix
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(308, 4);
				PushFollow(Follow._indexSuffix_in_memberExpressionSuffix2078);
				indexSuffix294=indexSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, indexSuffix294.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:309:4: propertyReferenceSuffix
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(309, 4);
				PushFollow(Follow._propertyReferenceSuffix_in_memberExpressionSuffix2083);
				propertyReferenceSuffix295=propertyReferenceSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, propertyReferenceSuffix295.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberExpressionSuffix", 49);
			LeaveRule("memberExpressionSuffix", 49);
			LeaveRule_memberExpressionSuffix();
			if (state.backtracking > 0) { Memoize(input, 49, memberExpressionSuffix_StartIndex); }

		}
		DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "memberExpressionSuffix"); }
		return retval;

	}
	// $ANTLR end "memberExpressionSuffix"

	partial void EnterRule_callExpression();
	partial void LeaveRule_callExpression();
	// $ANTLR start "callExpression"
	// JavaScript.g3:312:1: callExpression : memberExpression ( LT )* arguments ( ( LT )* callExpressionSuffix )* -> ^( CALL memberExpression ( arguments )? ( callExpressionSuffix )* ) ;
	[GrammarRule("callExpression")]
	private AstParserRuleReturnScope<object, IToken> callExpression()
	{
		EnterRule_callExpression();
		EnterRule("callExpression", 50);
		TraceIn("callExpression", 50);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int callExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT297 = default(IToken);
		IToken LT299 = default(IToken);
		AstParserRuleReturnScope<object, IToken> memberExpression296 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments298 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> callExpressionSuffix300 = default(AstParserRuleReturnScope<object, IToken>);

		object LT297_tree = default(object);
		object LT299_tree = default(object);
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleSubtreeStream stream_memberExpression=new RewriteRuleSubtreeStream(adaptor,"rule memberExpression");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_callExpressionSuffix=new RewriteRuleSubtreeStream(adaptor,"rule callExpressionSuffix");
		try { DebugEnterRule(GrammarFileName, "callExpression");
		DebugLocation(312, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// JavaScript.g3:313:2: ( memberExpression ( LT )* arguments ( ( LT )* callExpressionSuffix )* -> ^( CALL memberExpression ( arguments )? ( callExpressionSuffix )* ) )
			DebugEnterAlt(1);
			// JavaScript.g3:313:4: memberExpression ( LT )* arguments ( ( LT )* callExpressionSuffix )*
			{
			DebugLocation(313, 4);
			PushFollow(Follow._memberExpression_in_callExpression2094);
			memberExpression296=memberExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_memberExpression.Add(memberExpression296.Tree);
			DebugLocation(313, 21);
			// JavaScript.g3:313:21: ( LT )*
			try { DebugEnterSubRule(146);
			while (true)
			{
				int alt146=2;
				try { DebugEnterDecision(146, false);
				int LA146_1 = input.LA(1);

				if ((LA146_1==LT))
				{
					alt146 = 1;
				}


				} finally { DebugExitDecision(146); }
				switch ( alt146 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:313:21: LT
					{
					DebugLocation(313, 21);
					LT297=(IToken)Match(input,LT,Follow._LT_in_callExpression2096); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT297);


					}
					break;

				default:
					goto loop146;
				}
			}

			loop146:
				;

			} finally { DebugExitSubRule(146); }

			DebugLocation(313, 25);
			PushFollow(Follow._arguments_in_callExpression2099);
			arguments298=arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_arguments.Add(arguments298.Tree);
			DebugLocation(313, 35);
			// JavaScript.g3:313:35: ( ( LT )* callExpressionSuffix )*
			try { DebugEnterSubRule(148);
			while (true)
			{
				int alt148=2;
				try { DebugEnterDecision(148, false);
				int LA148_1 = input.LA(1);

				if ((LA148_1==LT))
				{
					int LA148_2 = input.LA(2);

					if ((EvaluatePredicate(synpred166_JavaScript_fragment)))
					{
						alt148 = 1;
					}


				}
				else if ((LA148_1==87||LA148_1==98||LA148_1==117))
				{
					alt148 = 1;
				}


				} finally { DebugExitDecision(148); }
				switch ( alt148 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:313:36: ( LT )* callExpressionSuffix
					{
					DebugLocation(313, 36);
					// JavaScript.g3:313:36: ( LT )*
					try { DebugEnterSubRule(147);
					while (true)
					{
						int alt147=2;
						try { DebugEnterDecision(147, false);
						int LA147_1 = input.LA(1);

						if ((LA147_1==LT))
						{
							alt147 = 1;
						}


						} finally { DebugExitDecision(147); }
						switch ( alt147 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:313:36: LT
							{
							DebugLocation(313, 36);
							LT299=(IToken)Match(input,LT,Follow._LT_in_callExpression2102); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_LT.Add(LT299);


							}
							break;

						default:
							goto loop147;
						}
					}

					loop147:
						;

					} finally { DebugExitSubRule(147); }

					DebugLocation(313, 40);
					PushFollow(Follow._callExpressionSuffix_in_callExpression2105);
					callExpressionSuffix300=callExpressionSuffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_callExpressionSuffix.Add(callExpressionSuffix300.Tree);

					}
					break;

				default:
					goto loop148;
				}
			}

			loop148:
				;

			} finally { DebugExitSubRule(148); }



			{
			// AST REWRITE
			// elements: memberExpression, arguments, callExpressionSuffix
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 313:63: -> ^( CALL memberExpression ( arguments )? ( callExpressionSuffix )* )
			{
				DebugLocation(313, 66);
				// JavaScript.g3:313:66: ^( CALL memberExpression ( arguments )? ( callExpressionSuffix )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(313, 68);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CALL, "CALL"), root_1);

				DebugLocation(313, 73);
				adaptor.AddChild(root_1, stream_memberExpression.NextTree());
				DebugLocation(313, 90);
				// JavaScript.g3:313:90: ( arguments )?
				if (stream_arguments.HasNext)
				{
					DebugLocation(313, 90);
					adaptor.AddChild(root_1, stream_arguments.NextTree());

				}
				stream_arguments.Reset();
				DebugLocation(313, 101);
				// JavaScript.g3:313:101: ( callExpressionSuffix )*
				while ( stream_callExpressionSuffix.HasNext )
				{
					DebugLocation(313, 101);
					adaptor.AddChild(root_1, stream_callExpressionSuffix.NextTree());

				}
				stream_callExpressionSuffix.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callExpression", 50);
			LeaveRule("callExpression", 50);
			LeaveRule_callExpression();
			if (state.backtracking > 0) { Memoize(input, 50, callExpression_StartIndex); }

		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "callExpression"); }
		return retval;

	}
	// $ANTLR end "callExpression"

	partial void EnterRule_callExpressionSuffix();
	partial void LeaveRule_callExpressionSuffix();
	// $ANTLR start "callExpressionSuffix"
	// JavaScript.g3:316:1: callExpressionSuffix : ( arguments | indexSuffix | propertyReferenceSuffix );
	[GrammarRule("callExpressionSuffix")]
	private AstParserRuleReturnScope<object, IToken> callExpressionSuffix()
	{
		EnterRule_callExpressionSuffix();
		EnterRule("callExpressionSuffix", 51);
		TraceIn("callExpressionSuffix", 51);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int callExpressionSuffix_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> arguments301 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> indexSuffix302 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyReferenceSuffix303 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "callExpressionSuffix");
		DebugLocation(316, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// JavaScript.g3:317:2: ( arguments | indexSuffix | propertyReferenceSuffix )
			int alt149=3;
			try { DebugEnterDecision(149, false);
			switch (input.LA(1))
			{
			case 87:
				{
				alt149 = 1;
				}
				break;
			case 117:
				{
				alt149 = 2;
				}
				break;
			case 98:
				{
				alt149 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 149, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(149); }
			switch (alt149)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:317:4: arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(317, 4);
				PushFollow(Follow._arguments_in_callExpressionSuffix2133);
				arguments301=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments301.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:318:4: indexSuffix
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(318, 4);
				PushFollow(Follow._indexSuffix_in_callExpressionSuffix2138);
				indexSuffix302=indexSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, indexSuffix302.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g3:319:4: propertyReferenceSuffix
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(319, 4);
				PushFollow(Follow._propertyReferenceSuffix_in_callExpressionSuffix2143);
				propertyReferenceSuffix303=propertyReferenceSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, propertyReferenceSuffix303.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callExpressionSuffix", 51);
			LeaveRule("callExpressionSuffix", 51);
			LeaveRule_callExpressionSuffix();
			if (state.backtracking > 0) { Memoize(input, 51, callExpressionSuffix_StartIndex); }

		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "callExpressionSuffix"); }
		return retval;

	}
	// $ANTLR end "callExpressionSuffix"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// JavaScript.g3:322:1: arguments : '(' ! ( ( LT !)* argument ( ( LT !)* ',' ! ( LT !)* argument )* )? ( LT !)* ')' !;
	[GrammarRule("arguments")]
	private AstParserRuleReturnScope<object, IToken> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 52);
		TraceIn("arguments", 52);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal304 = default(IToken);
		IToken LT305 = default(IToken);
		IToken LT307 = default(IToken);
		IToken char_literal308 = default(IToken);
		IToken LT309 = default(IToken);
		IToken LT311 = default(IToken);
		IToken char_literal312 = default(IToken);
		AstParserRuleReturnScope<object, IToken> argument306 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> argument310 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal304_tree = default(object);
		object LT305_tree = default(object);
		object LT307_tree = default(object);
		object char_literal308_tree = default(object);
		object LT309_tree = default(object);
		object LT311_tree = default(object);
		object char_literal312_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(322, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// JavaScript.g3:323:2: ( '(' ! ( ( LT !)* argument ( ( LT !)* ',' ! ( LT !)* argument )* )? ( LT !)* ')' !)
			DebugEnterAlt(1);
			// JavaScript.g3:323:4: '(' ! ( ( LT !)* argument ( ( LT !)* ',' ! ( LT !)* argument )* )? ( LT !)* ')' !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(323, 7);
			char_literal304=(IToken)Match(input,87,Follow._87_in_arguments2154); if (state.failed) return retval;
			DebugLocation(323, 9);
			// JavaScript.g3:323:9: ( ( LT !)* argument ( ( LT !)* ',' ! ( LT !)* argument )* )?
			int alt154=2;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, false);
			try
			{
				alt154 = dfa154.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:323:10: ( LT !)* argument ( ( LT !)* ',' ! ( LT !)* argument )*
				{
				DebugLocation(323, 12);
				// JavaScript.g3:323:12: ( LT !)*
				try { DebugEnterSubRule(150);
				while (true)
				{
					int alt150=2;
					try { DebugEnterDecision(150, false);
					int LA150_1 = input.LA(1);

					if ((LA150_1==LT))
					{
						alt150 = 1;
					}


					} finally { DebugExitDecision(150); }
					switch ( alt150 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:323:12: LT !
						{
						DebugLocation(323, 12);
						LT305=(IToken)Match(input,LT,Follow._LT_in_arguments2158); if (state.failed) return retval;

						}
						break;

					default:
						goto loop150;
					}
				}

				loop150:
					;

				} finally { DebugExitSubRule(150); }

				DebugLocation(323, 15);
				PushFollow(Follow._argument_in_arguments2162);
				argument306=argument();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument306.Tree);
				DebugLocation(323, 24);
				// JavaScript.g3:323:24: ( ( LT !)* ',' ! ( LT !)* argument )*
				try { DebugEnterSubRule(153);
				while (true)
				{
					int alt153=2;
					try { DebugEnterDecision(153, false);
					try
					{
						alt153 = dfa153.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(153); }
					switch ( alt153 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:323:25: ( LT !)* ',' ! ( LT !)* argument
						{
						DebugLocation(323, 27);
						// JavaScript.g3:323:27: ( LT !)*
						try { DebugEnterSubRule(151);
						while (true)
						{
							int alt151=2;
							try { DebugEnterDecision(151, false);
							int LA151_1 = input.LA(1);

							if ((LA151_1==LT))
							{
								alt151 = 1;
							}


							} finally { DebugExitDecision(151); }
							switch ( alt151 )
							{
							case 1:
								DebugEnterAlt(1);
								// JavaScript.g3:323:27: LT !
								{
								DebugLocation(323, 27);
								LT307=(IToken)Match(input,LT,Follow._LT_in_arguments2165); if (state.failed) return retval;

								}
								break;

							default:
								goto loop151;
							}
						}

						loop151:
							;

						} finally { DebugExitSubRule(151); }

						DebugLocation(323, 33);
						char_literal308=(IToken)Match(input,94,Follow._94_in_arguments2169); if (state.failed) return retval;
						DebugLocation(323, 37);
						// JavaScript.g3:323:37: ( LT !)*
						try { DebugEnterSubRule(152);
						while (true)
						{
							int alt152=2;
							try { DebugEnterDecision(152, false);
							int LA152_1 = input.LA(1);

							if ((LA152_1==LT))
							{
								alt152 = 1;
							}


							} finally { DebugExitDecision(152); }
							switch ( alt152 )
							{
							case 1:
								DebugEnterAlt(1);
								// JavaScript.g3:323:37: LT !
								{
								DebugLocation(323, 37);
								LT309=(IToken)Match(input,LT,Follow._LT_in_arguments2172); if (state.failed) return retval;

								}
								break;

							default:
								goto loop152;
							}
						}

						loop152:
							;

						} finally { DebugExitSubRule(152); }

						DebugLocation(323, 40);
						PushFollow(Follow._argument_in_arguments2176);
						argument310=argument();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, argument310.Tree);

						}
						break;

					default:
						goto loop153;
					}
				}

				loop153:
					;

				} finally { DebugExitSubRule(153); }


				}
				break;

			}
			} finally { DebugExitSubRule(154); }

			DebugLocation(323, 55);
			// JavaScript.g3:323:55: ( LT !)*
			try { DebugEnterSubRule(155);
			while (true)
			{
				int alt155=2;
				try { DebugEnterDecision(155, false);
				int LA155_1 = input.LA(1);

				if ((LA155_1==LT))
				{
					alt155 = 1;
				}


				} finally { DebugExitDecision(155); }
				switch ( alt155 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:323:55: LT !
					{
					DebugLocation(323, 55);
					LT311=(IToken)Match(input,LT,Follow._LT_in_arguments2182); if (state.failed) return retval;

					}
					break;

				default:
					goto loop155;
				}
			}

			loop155:
				;

			} finally { DebugExitSubRule(155); }

			DebugLocation(323, 61);
			char_literal312=(IToken)Match(input,88,Follow._88_in_arguments2186); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 52);
			LeaveRule("arguments", 52);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 52, arguments_StartIndex); }

		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_argument();
	partial void LeaveRule_argument();
	// $ANTLR start "argument"
	// JavaScript.g3:326:1: argument : assignmentExpression -> ^( ARGUMENT assignmentExpression ) ;
	[GrammarRule("argument")]
	private AstParserRuleReturnScope<object, IToken> argument()
	{
		EnterRule_argument();
		EnterRule("argument", 53);
		TraceIn("argument", 53);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int argument_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> assignmentExpression313 = default(AstParserRuleReturnScope<object, IToken>);

		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "argument");
		DebugLocation(326, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// JavaScript.g3:327:2: ( assignmentExpression -> ^( ARGUMENT assignmentExpression ) )
			DebugEnterAlt(1);
			// JavaScript.g3:327:4: assignmentExpression
			{
			DebugLocation(327, 4);
			PushFollow(Follow._assignmentExpression_in_argument2199);
			assignmentExpression313=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression313.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 327:25: -> ^( ARGUMENT assignmentExpression )
			{
				DebugLocation(327, 28);
				// JavaScript.g3:327:28: ^( ARGUMENT assignmentExpression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(327, 30);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ARGUMENT, "ARGUMENT"), root_1);

				DebugLocation(327, 39);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument", 53);
			LeaveRule("argument", 53);
			LeaveRule_argument();
			if (state.backtracking > 0) { Memoize(input, 53, argument_StartIndex); }

		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "argument"); }
		return retval;

	}
	// $ANTLR end "argument"

	partial void EnterRule_indexSuffix();
	partial void LeaveRule_indexSuffix();
	// $ANTLR start "indexSuffix"
	// JavaScript.g3:330:1: indexSuffix : '[' ( LT )* expression ( LT )* ']' -> ^( INDEX expression ) ;
	[GrammarRule("indexSuffix")]
	private AstParserRuleReturnScope<object, IToken> indexSuffix()
	{
		EnterRule_indexSuffix();
		EnterRule("indexSuffix", 54);
		TraceIn("indexSuffix", 54);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int indexSuffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal314 = default(IToken);
		IToken LT315 = default(IToken);
		IToken LT317 = default(IToken);
		IToken char_literal318 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression316 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal314_tree = default(object);
		object LT315_tree = default(object);
		object LT317_tree = default(object);
		object char_literal318_tree = default(object);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "indexSuffix");
		DebugLocation(330, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// JavaScript.g3:331:2: ( '[' ( LT )* expression ( LT )* ']' -> ^( INDEX expression ) )
			DebugEnterAlt(1);
			// JavaScript.g3:331:4: '[' ( LT )* expression ( LT )* ']'
			{
			DebugLocation(331, 4);
			char_literal314=(IToken)Match(input,117,Follow._117_in_indexSuffix2219); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_117.Add(char_literal314);

			DebugLocation(331, 8);
			// JavaScript.g3:331:8: ( LT )*
			try { DebugEnterSubRule(156);
			while (true)
			{
				int alt156=2;
				try { DebugEnterDecision(156, false);
				int LA156_1 = input.LA(1);

				if ((LA156_1==LT))
				{
					alt156 = 1;
				}


				} finally { DebugExitDecision(156); }
				switch ( alt156 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:331:8: LT
					{
					DebugLocation(331, 8);
					LT315=(IToken)Match(input,LT,Follow._LT_in_indexSuffix2221); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT315);


					}
					break;

				default:
					goto loop156;
				}
			}

			loop156:
				;

			} finally { DebugExitSubRule(156); }

			DebugLocation(331, 12);
			PushFollow(Follow._expression_in_indexSuffix2224);
			expression316=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression316.Tree);
			DebugLocation(331, 23);
			// JavaScript.g3:331:23: ( LT )*
			try { DebugEnterSubRule(157);
			while (true)
			{
				int alt157=2;
				try { DebugEnterDecision(157, false);
				int LA157_1 = input.LA(1);

				if ((LA157_1==LT))
				{
					alt157 = 1;
				}


				} finally { DebugExitDecision(157); }
				switch ( alt157 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:331:23: LT
					{
					DebugLocation(331, 23);
					LT317=(IToken)Match(input,LT,Follow._LT_in_indexSuffix2226); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT317);


					}
					break;

				default:
					goto loop157;
				}
			}

			loop157:
				;

			} finally { DebugExitSubRule(157); }

			DebugLocation(331, 27);
			char_literal318=(IToken)Match(input,118,Follow._118_in_indexSuffix2229); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_118.Add(char_literal318);



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 331:31: -> ^( INDEX expression )
			{
				DebugLocation(331, 34);
				// JavaScript.g3:331:34: ^( INDEX expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(331, 36);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INDEX, "INDEX"), root_1);

				DebugLocation(331, 42);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("indexSuffix", 54);
			LeaveRule("indexSuffix", 54);
			LeaveRule_indexSuffix();
			if (state.backtracking > 0) { Memoize(input, 54, indexSuffix_StartIndex); }

		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "indexSuffix"); }
		return retval;

	}
	// $ANTLR end "indexSuffix"

	partial void EnterRule_propertyReferenceSuffix();
	partial void LeaveRule_propertyReferenceSuffix();
	// $ANTLR start "propertyReferenceSuffix"
	// JavaScript.g3:334:1: propertyReferenceSuffix : '.' ( LT )* Identifier -> ^( PROPERTY ^( IDENTIFIER Identifier ) ) ;
	[GrammarRule("propertyReferenceSuffix")]
	private AstParserRuleReturnScope<object, IToken> propertyReferenceSuffix()
	{
		EnterRule_propertyReferenceSuffix();
		EnterRule("propertyReferenceSuffix", 55);
		TraceIn("propertyReferenceSuffix", 55);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int propertyReferenceSuffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal319 = default(IToken);
		IToken LT320 = default(IToken);
		IToken Identifier321 = default(IToken);

		object char_literal319_tree = default(object);
		object LT320_tree = default(object);
		object Identifier321_tree = default(object);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_Identifier=new RewriteRuleITokenStream(adaptor,"token Identifier");
		try { DebugEnterRule(GrammarFileName, "propertyReferenceSuffix");
		DebugLocation(334, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// JavaScript.g3:335:2: ( '.' ( LT )* Identifier -> ^( PROPERTY ^( IDENTIFIER Identifier ) ) )
			DebugEnterAlt(1);
			// JavaScript.g3:335:4: '.' ( LT )* Identifier
			{
			DebugLocation(335, 4);
			char_literal319=(IToken)Match(input,98,Follow._98_in_propertyReferenceSuffix2250); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_98.Add(char_literal319);

			DebugLocation(335, 8);
			// JavaScript.g3:335:8: ( LT )*
			try { DebugEnterSubRule(158);
			while (true)
			{
				int alt158=2;
				try { DebugEnterDecision(158, false);
				int LA158_1 = input.LA(1);

				if ((LA158_1==LT))
				{
					alt158 = 1;
				}


				} finally { DebugExitDecision(158); }
				switch ( alt158 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:335:8: LT
					{
					DebugLocation(335, 8);
					LT320=(IToken)Match(input,LT,Follow._LT_in_propertyReferenceSuffix2252); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT320);


					}
					break;

				default:
					goto loop158;
				}
			}

			loop158:
				;

			} finally { DebugExitSubRule(158); }

			DebugLocation(335, 12);
			Identifier321=(IToken)Match(input,Identifier,Follow._Identifier_in_propertyReferenceSuffix2255); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_Identifier.Add(Identifier321);



			{
			// AST REWRITE
			// elements: Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 335:23: -> ^( PROPERTY ^( IDENTIFIER Identifier ) )
			{
				DebugLocation(335, 26);
				// JavaScript.g3:335:26: ^( PROPERTY ^( IDENTIFIER Identifier ) )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(335, 28);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PROPERTY, "PROPERTY"), root_1);

				DebugLocation(335, 37);
				// JavaScript.g3:335:37: ^( IDENTIFIER Identifier )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(335, 39);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_2);

				DebugLocation(335, 50);
				adaptor.AddChild(root_2, stream_Identifier.NextNode());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyReferenceSuffix", 55);
			LeaveRule("propertyReferenceSuffix", 55);
			LeaveRule_propertyReferenceSuffix();
			if (state.backtracking > 0) { Memoize(input, 55, propertyReferenceSuffix_StartIndex); }

		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyReferenceSuffix"); }
		return retval;

	}
	// $ANTLR end "propertyReferenceSuffix"

	partial void EnterRule_assignmentOperator();
	partial void LeaveRule_assignmentOperator();
	// $ANTLR start "assignmentOperator"
	// JavaScript.g3:338:1: assignmentOperator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' );
	[GrammarRule("assignmentOperator")]
	private AstParserRuleReturnScope<object, IToken> assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 56);
		TraceIn("assignmentOperator", 56);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int assignmentOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set322 = default(IToken);

		object set322_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(338, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// JavaScript.g3:339:2: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' )
			DebugEnterAlt(1);
			// JavaScript.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(339, 2);

			set322=(IToken)input.LT(1);
			if (input.LA(1)==83||input.LA(1)==86||input.LA(1)==90||input.LA(1)==93||input.LA(1)==97||input.LA(1)==100||input.LA(1)==105||input.LA(1)==107||input.LA(1)==113||input.LA(1)==115||input.LA(1)==120||input.LA(1)==152)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set322));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentOperator", 56);
			LeaveRule("assignmentOperator", 56);
			LeaveRule_assignmentOperator();
			if (state.backtracking > 0) { Memoize(input, 56, assignmentOperator_StartIndex); }

		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return retval;

	}
	// $ANTLR end "assignmentOperator"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();
	// $ANTLR start "conditionalExpression"
	// JavaScript.g3:342:1: conditionalExpression : ( logicalORExpression ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression ) -> ^( CONDITONALOPERATOR logicalORExpression assignmentExpression assignmentExpression ) | logicalORExpressionNoIn );
	[GrammarRule("conditionalExpression")]
	private AstParserRuleReturnScope<object, IToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 57);
		TraceIn("conditionalExpression", 57);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditionalExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT324 = default(IToken);
		IToken char_literal325 = default(IToken);
		IToken LT326 = default(IToken);
		IToken LT328 = default(IToken);
		IToken char_literal329 = default(IToken);
		IToken LT330 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logicalORExpression323 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentExpression327 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentExpression331 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalORExpressionNoIn332 = default(AstParserRuleReturnScope<object, IToken>);

		object LT324_tree = default(object);
		object char_literal325_tree = default(object);
		object LT326_tree = default(object);
		object LT328_tree = default(object);
		object char_literal329_tree = default(object);
		object LT330_tree = default(object);
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_logicalORExpression=new RewriteRuleSubtreeStream(adaptor,"rule logicalORExpression");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(342, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// JavaScript.g3:343:2: ( logicalORExpression ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression ) -> ^( CONDITONALOPERATOR logicalORExpression assignmentExpression assignmentExpression ) | logicalORExpressionNoIn )
			int alt163=2;
			try { DebugEnterDecision(163, false);
			switch (input.LA(1))
			{
			case 141:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 138:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 143:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NumericLiteral:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case StringLiteral:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RegularExpressionLiteral:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 117:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 150:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 87:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 133:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 137:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 127:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 147:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 145:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 92:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 96:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 91:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 95:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 155:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 79:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred193_JavaScript_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:343:4: logicalORExpression ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )
				{
				DebugLocation(343, 4);
				PushFollow(Follow._logicalORExpression_in_conditionalExpression2333);
				logicalORExpression323=logicalORExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_logicalORExpression.Add(logicalORExpression323.Tree);
				DebugLocation(343, 24);
				// JavaScript.g3:343:24: ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )
				DebugEnterAlt(1);
				// JavaScript.g3:343:25: ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression
				{
				DebugLocation(343, 25);
				// JavaScript.g3:343:25: ( LT )*
				try { DebugEnterSubRule(159);
				while (true)
				{
					int alt159=2;
					try { DebugEnterDecision(159, false);
					int LA159_1 = input.LA(1);

					if ((LA159_1==LT))
					{
						alt159 = 1;
					}


					} finally { DebugExitDecision(159); }
					switch ( alt159 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:343:25: LT
						{
						DebugLocation(343, 25);
						LT324=(IToken)Match(input,LT,Follow._LT_in_conditionalExpression2336); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT324);


						}
						break;

					default:
						goto loop159;
					}
				}

				loop159:
					;

				} finally { DebugExitSubRule(159); }

				DebugLocation(343, 29);
				char_literal325=(IToken)Match(input,116,Follow._116_in_conditionalExpression2339); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_116.Add(char_literal325);

				DebugLocation(343, 33);
				// JavaScript.g3:343:33: ( LT )*
				try { DebugEnterSubRule(160);
				while (true)
				{
					int alt160=2;
					try { DebugEnterDecision(160, false);
					int LA160_1 = input.LA(1);

					if ((LA160_1==LT))
					{
						alt160 = 1;
					}


					} finally { DebugExitDecision(160); }
					switch ( alt160 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:343:33: LT
						{
						DebugLocation(343, 33);
						LT326=(IToken)Match(input,LT,Follow._LT_in_conditionalExpression2341); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT326);


						}
						break;

					default:
						goto loop160;
					}
				}

				loop160:
					;

				} finally { DebugExitSubRule(160); }

				DebugLocation(343, 37);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression2344);
				assignmentExpression327=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression327.Tree);
				DebugLocation(343, 58);
				// JavaScript.g3:343:58: ( LT )*
				try { DebugEnterSubRule(161);
				while (true)
				{
					int alt161=2;
					try { DebugEnterDecision(161, false);
					int LA161_1 = input.LA(1);

					if ((LA161_1==LT))
					{
						alt161 = 1;
					}


					} finally { DebugExitDecision(161); }
					switch ( alt161 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:343:58: LT
						{
						DebugLocation(343, 58);
						LT328=(IToken)Match(input,LT,Follow._LT_in_conditionalExpression2346); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT328);


						}
						break;

					default:
						goto loop161;
					}
				}

				loop161:
					;

				} finally { DebugExitSubRule(161); }

				DebugLocation(343, 62);
				char_literal329=(IToken)Match(input,101,Follow._101_in_conditionalExpression2349); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_101.Add(char_literal329);

				DebugLocation(343, 66);
				// JavaScript.g3:343:66: ( LT )*
				try { DebugEnterSubRule(162);
				while (true)
				{
					int alt162=2;
					try { DebugEnterDecision(162, false);
					int LA162_1 = input.LA(1);

					if ((LA162_1==LT))
					{
						alt162 = 1;
					}


					} finally { DebugExitDecision(162); }
					switch ( alt162 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:343:66: LT
						{
						DebugLocation(343, 66);
						LT330=(IToken)Match(input,LT,Follow._LT_in_conditionalExpression2351); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT330);


						}
						break;

					default:
						goto loop162;
					}
				}

				loop162:
					;

				} finally { DebugExitSubRule(162); }

				DebugLocation(343, 70);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression2354);
				assignmentExpression331=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression331.Tree);

				}



				{
				// AST REWRITE
				// elements: logicalORExpression, assignmentExpression, assignmentExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 344:3: -> ^( CONDITONALOPERATOR logicalORExpression assignmentExpression assignmentExpression )
				{
					DebugLocation(344, 6);
					// JavaScript.g3:344:6: ^( CONDITONALOPERATOR logicalORExpression assignmentExpression assignmentExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(344, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CONDITONALOPERATOR, "CONDITONALOPERATOR"), root_1);

					DebugLocation(344, 27);
					adaptor.AddChild(root_1, stream_logicalORExpression.NextTree());
					DebugLocation(344, 47);
					adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());
					DebugLocation(344, 68);
					adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:345:4: logicalORExpressionNoIn
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(345, 4);
				PushFollow(Follow._logicalORExpressionNoIn_in_conditionalExpression2376);
				logicalORExpressionNoIn332=logicalORExpressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalORExpressionNoIn332.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 57);
			LeaveRule("conditionalExpression", 57);
			LeaveRule_conditionalExpression();
			if (state.backtracking > 0) { Memoize(input, 57, conditionalExpression_StartIndex); }

		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_conditionalExpressionNoIn();
	partial void LeaveRule_conditionalExpressionNoIn();
	// $ANTLR start "conditionalExpressionNoIn"
	// JavaScript.g3:348:1: conditionalExpressionNoIn : ( logicalORExpressionNoIn ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn ) -> ^( CONDITONALOPERATOR logicalORExpressionNoIn assignmentExpressionNoIn assignmentExpressionNoIn ) | logicalORExpressionNoIn );
	[GrammarRule("conditionalExpressionNoIn")]
	private AstParserRuleReturnScope<object, IToken> conditionalExpressionNoIn()
	{
		EnterRule_conditionalExpressionNoIn();
		EnterRule("conditionalExpressionNoIn", 58);
		TraceIn("conditionalExpressionNoIn", 58);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditionalExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT334 = default(IToken);
		IToken char_literal335 = default(IToken);
		IToken LT336 = default(IToken);
		IToken LT338 = default(IToken);
		IToken char_literal339 = default(IToken);
		IToken LT340 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logicalORExpressionNoIn333 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentExpressionNoIn337 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentExpressionNoIn341 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalORExpressionNoIn342 = default(AstParserRuleReturnScope<object, IToken>);

		object LT334_tree = default(object);
		object char_literal335_tree = default(object);
		object LT336_tree = default(object);
		object LT338_tree = default(object);
		object char_literal339_tree = default(object);
		object LT340_tree = default(object);
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_logicalORExpressionNoIn=new RewriteRuleSubtreeStream(adaptor,"rule logicalORExpressionNoIn");
		RewriteRuleSubtreeStream stream_assignmentExpressionNoIn=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpressionNoIn");
		try { DebugEnterRule(GrammarFileName, "conditionalExpressionNoIn");
		DebugLocation(348, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// JavaScript.g3:349:2: ( logicalORExpressionNoIn ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn ) -> ^( CONDITONALOPERATOR logicalORExpressionNoIn assignmentExpressionNoIn assignmentExpressionNoIn ) | logicalORExpressionNoIn )
			int alt168=2;
			try { DebugEnterDecision(168, false);
			switch (input.LA(1))
			{
			case 141:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 138:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 143:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NumericLiteral:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case StringLiteral:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RegularExpressionLiteral:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 117:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 150:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 87:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 133:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 137:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 127:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 147:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 145:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 92:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 96:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 91:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 95:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 155:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 79:
				{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred198_JavaScript_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(168); }
			switch (alt168)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:349:4: logicalORExpressionNoIn ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn )
				{
				DebugLocation(349, 4);
				PushFollow(Follow._logicalORExpressionNoIn_in_conditionalExpressionNoIn2387);
				logicalORExpressionNoIn333=logicalORExpressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_logicalORExpressionNoIn.Add(logicalORExpressionNoIn333.Tree);
				DebugLocation(349, 28);
				// JavaScript.g3:349:28: ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn )
				DebugEnterAlt(1);
				// JavaScript.g3:349:29: ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn
				{
				DebugLocation(349, 29);
				// JavaScript.g3:349:29: ( LT )*
				try { DebugEnterSubRule(164);
				while (true)
				{
					int alt164=2;
					try { DebugEnterDecision(164, false);
					int LA164_1 = input.LA(1);

					if ((LA164_1==LT))
					{
						alt164 = 1;
					}


					} finally { DebugExitDecision(164); }
					switch ( alt164 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:349:29: LT
						{
						DebugLocation(349, 29);
						LT334=(IToken)Match(input,LT,Follow._LT_in_conditionalExpressionNoIn2390); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT334);


						}
						break;

					default:
						goto loop164;
					}
				}

				loop164:
					;

				} finally { DebugExitSubRule(164); }

				DebugLocation(349, 33);
				char_literal335=(IToken)Match(input,116,Follow._116_in_conditionalExpressionNoIn2393); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_116.Add(char_literal335);

				DebugLocation(349, 37);
				// JavaScript.g3:349:37: ( LT )*
				try { DebugEnterSubRule(165);
				while (true)
				{
					int alt165=2;
					try { DebugEnterDecision(165, false);
					int LA165_1 = input.LA(1);

					if ((LA165_1==LT))
					{
						alt165 = 1;
					}


					} finally { DebugExitDecision(165); }
					switch ( alt165 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:349:37: LT
						{
						DebugLocation(349, 37);
						LT336=(IToken)Match(input,LT,Follow._LT_in_conditionalExpressionNoIn2395); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT336);


						}
						break;

					default:
						goto loop165;
					}
				}

				loop165:
					;

				} finally { DebugExitSubRule(165); }

				DebugLocation(349, 41);
				PushFollow(Follow._assignmentExpressionNoIn_in_conditionalExpressionNoIn2398);
				assignmentExpressionNoIn337=assignmentExpressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_assignmentExpressionNoIn.Add(assignmentExpressionNoIn337.Tree);
				DebugLocation(349, 66);
				// JavaScript.g3:349:66: ( LT )*
				try { DebugEnterSubRule(166);
				while (true)
				{
					int alt166=2;
					try { DebugEnterDecision(166, false);
					int LA166_1 = input.LA(1);

					if ((LA166_1==LT))
					{
						alt166 = 1;
					}


					} finally { DebugExitDecision(166); }
					switch ( alt166 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:349:66: LT
						{
						DebugLocation(349, 66);
						LT338=(IToken)Match(input,LT,Follow._LT_in_conditionalExpressionNoIn2400); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT338);


						}
						break;

					default:
						goto loop166;
					}
				}

				loop166:
					;

				} finally { DebugExitSubRule(166); }

				DebugLocation(349, 70);
				char_literal339=(IToken)Match(input,101,Follow._101_in_conditionalExpressionNoIn2403); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_101.Add(char_literal339);

				DebugLocation(349, 74);
				// JavaScript.g3:349:74: ( LT )*
				try { DebugEnterSubRule(167);
				while (true)
				{
					int alt167=2;
					try { DebugEnterDecision(167, false);
					int LA167_1 = input.LA(1);

					if ((LA167_1==LT))
					{
						alt167 = 1;
					}


					} finally { DebugExitDecision(167); }
					switch ( alt167 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:349:74: LT
						{
						DebugLocation(349, 74);
						LT340=(IToken)Match(input,LT,Follow._LT_in_conditionalExpressionNoIn2405); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LT.Add(LT340);


						}
						break;

					default:
						goto loop167;
					}
				}

				loop167:
					;

				} finally { DebugExitSubRule(167); }

				DebugLocation(349, 78);
				PushFollow(Follow._assignmentExpressionNoIn_in_conditionalExpressionNoIn2408);
				assignmentExpressionNoIn341=assignmentExpressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_assignmentExpressionNoIn.Add(assignmentExpressionNoIn341.Tree);

				}



				{
				// AST REWRITE
				// elements: logicalORExpressionNoIn, assignmentExpressionNoIn, assignmentExpressionNoIn
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 350:3: -> ^( CONDITONALOPERATOR logicalORExpressionNoIn assignmentExpressionNoIn assignmentExpressionNoIn )
				{
					DebugLocation(350, 6);
					// JavaScript.g3:350:6: ^( CONDITONALOPERATOR logicalORExpressionNoIn assignmentExpressionNoIn assignmentExpressionNoIn )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(350, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CONDITONALOPERATOR, "CONDITONALOPERATOR"), root_1);

					DebugLocation(350, 27);
					adaptor.AddChild(root_1, stream_logicalORExpressionNoIn.NextTree());
					DebugLocation(350, 51);
					adaptor.AddChild(root_1, stream_assignmentExpressionNoIn.NextTree());
					DebugLocation(350, 76);
					adaptor.AddChild(root_1, stream_assignmentExpressionNoIn.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:351:4: logicalORExpressionNoIn
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(351, 4);
				PushFollow(Follow._logicalORExpressionNoIn_in_conditionalExpressionNoIn2428);
				logicalORExpressionNoIn342=logicalORExpressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalORExpressionNoIn342.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpressionNoIn", 58);
			LeaveRule("conditionalExpressionNoIn", 58);
			LeaveRule_conditionalExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 58, conditionalExpressionNoIn_StartIndex); }

		}
		DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "conditionalExpressionNoIn"

	partial void EnterRule_logicalORExpression();
	partial void LeaveRule_logicalORExpression();
	// $ANTLR start "logicalORExpression"
	// JavaScript.g3:354:1: logicalORExpression : logicalANDExpression ( ( LT !)* logicalOROperator ^ ( LT !)* logicalANDExpression )* ;
	[GrammarRule("logicalORExpression")]
	private AstParserRuleReturnScope<object, IToken> logicalORExpression()
	{
		EnterRule_logicalORExpression();
		EnterRule("logicalORExpression", 59);
		TraceIn("logicalORExpression", 59);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalORExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT344 = default(IToken);
		IToken LT346 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logicalANDExpression343 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalOROperator345 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalANDExpression347 = default(AstParserRuleReturnScope<object, IToken>);

		object LT344_tree = default(object);
		object LT346_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalORExpression");
		DebugLocation(354, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// JavaScript.g3:355:2: ( logicalANDExpression ( ( LT !)* logicalOROperator ^ ( LT !)* logicalANDExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g3:355:4: logicalANDExpression ( ( LT !)* logicalOROperator ^ ( LT !)* logicalANDExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(355, 4);
			PushFollow(Follow._logicalANDExpression_in_logicalORExpression2439);
			logicalANDExpression343=logicalANDExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalANDExpression343.Tree);
			DebugLocation(355, 25);
			// JavaScript.g3:355:25: ( ( LT !)* logicalOROperator ^ ( LT !)* logicalANDExpression )*
			try { DebugEnterSubRule(171);
			while (true)
			{
				int alt171=2;
				try { DebugEnterDecision(171, false);
				try
				{
					alt171 = dfa171.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(171); }
				switch ( alt171 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:355:26: ( LT !)* logicalOROperator ^ ( LT !)* logicalANDExpression
					{
					DebugLocation(355, 28);
					// JavaScript.g3:355:28: ( LT !)*
					try { DebugEnterSubRule(169);
					while (true)
					{
						int alt169=2;
						try { DebugEnterDecision(169, false);
						int LA169_1 = input.LA(1);

						if ((LA169_1==LT))
						{
							alt169 = 1;
						}


						} finally { DebugExitDecision(169); }
						switch ( alt169 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:355:28: LT !
							{
							DebugLocation(355, 28);
							LT344=(IToken)Match(input,LT,Follow._LT_in_logicalORExpression2442); if (state.failed) return retval;

							}
							break;

						default:
							goto loop169;
						}
					}

					loop169:
						;

					} finally { DebugExitSubRule(169); }

					DebugLocation(355, 48);
					PushFollow(Follow._logicalOROperator_in_logicalORExpression2446);
					logicalOROperator345=logicalOROperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(logicalOROperator345.Tree, root_0);
					DebugLocation(355, 52);
					// JavaScript.g3:355:52: ( LT !)*
					try { DebugEnterSubRule(170);
					while (true)
					{
						int alt170=2;
						try { DebugEnterDecision(170, false);
						int LA170_1 = input.LA(1);

						if ((LA170_1==LT))
						{
							alt170 = 1;
						}


						} finally { DebugExitDecision(170); }
						switch ( alt170 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:355:52: LT !
							{
							DebugLocation(355, 52);
							LT346=(IToken)Match(input,LT,Follow._LT_in_logicalORExpression2449); if (state.failed) return retval;

							}
							break;

						default:
							goto loop170;
						}
					}

					loop170:
						;

					} finally { DebugExitSubRule(170); }

					DebugLocation(355, 55);
					PushFollow(Follow._logicalANDExpression_in_logicalORExpression2453);
					logicalANDExpression347=logicalANDExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalANDExpression347.Tree);

					}
					break;

				default:
					goto loop171;
				}
			}

			loop171:
				;

			} finally { DebugExitSubRule(171); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalORExpression", 59);
			LeaveRule("logicalORExpression", 59);
			LeaveRule_logicalORExpression();
			if (state.backtracking > 0) { Memoize(input, 59, logicalORExpression_StartIndex); }

		}
		DebugLocation(356, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpression"); }
		return retval;

	}
	// $ANTLR end "logicalORExpression"

	partial void EnterRule_logicalORExpressionNoIn();
	partial void LeaveRule_logicalORExpressionNoIn();
	// $ANTLR start "logicalORExpressionNoIn"
	// JavaScript.g3:358:1: logicalORExpressionNoIn : logicalANDExpressionNoIn ( ( LT !)* logicalOROperator ^ ( LT !)* logicalANDExpressionNoIn )* ;
	[GrammarRule("logicalORExpressionNoIn")]
	private AstParserRuleReturnScope<object, IToken> logicalORExpressionNoIn()
	{
		EnterRule_logicalORExpressionNoIn();
		EnterRule("logicalORExpressionNoIn", 60);
		TraceIn("logicalORExpressionNoIn", 60);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalORExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT349 = default(IToken);
		IToken LT351 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logicalANDExpressionNoIn348 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalOROperator350 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalANDExpressionNoIn352 = default(AstParserRuleReturnScope<object, IToken>);

		object LT349_tree = default(object);
		object LT351_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalORExpressionNoIn");
		DebugLocation(358, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// JavaScript.g3:359:2: ( logicalANDExpressionNoIn ( ( LT !)* logicalOROperator ^ ( LT !)* logicalANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g3:359:4: logicalANDExpressionNoIn ( ( LT !)* logicalOROperator ^ ( LT !)* logicalANDExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(359, 4);
			PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn2467);
			logicalANDExpressionNoIn348=logicalANDExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalANDExpressionNoIn348.Tree);
			DebugLocation(359, 29);
			// JavaScript.g3:359:29: ( ( LT !)* logicalOROperator ^ ( LT !)* logicalANDExpressionNoIn )*
			try { DebugEnterSubRule(174);
			while (true)
			{
				int alt174=2;
				try { DebugEnterDecision(174, false);
				try
				{
					alt174 = dfa174.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(174); }
				switch ( alt174 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:359:30: ( LT !)* logicalOROperator ^ ( LT !)* logicalANDExpressionNoIn
					{
					DebugLocation(359, 32);
					// JavaScript.g3:359:32: ( LT !)*
					try { DebugEnterSubRule(172);
					while (true)
					{
						int alt172=2;
						try { DebugEnterDecision(172, false);
						int LA172_1 = input.LA(1);

						if ((LA172_1==LT))
						{
							alt172 = 1;
						}


						} finally { DebugExitDecision(172); }
						switch ( alt172 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:359:32: LT !
							{
							DebugLocation(359, 32);
							LT349=(IToken)Match(input,LT,Follow._LT_in_logicalORExpressionNoIn2470); if (state.failed) return retval;

							}
							break;

						default:
							goto loop172;
						}
					}

					loop172:
						;

					} finally { DebugExitSubRule(172); }

					DebugLocation(359, 52);
					PushFollow(Follow._logicalOROperator_in_logicalORExpressionNoIn2474);
					logicalOROperator350=logicalOROperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(logicalOROperator350.Tree, root_0);
					DebugLocation(359, 56);
					// JavaScript.g3:359:56: ( LT !)*
					try { DebugEnterSubRule(173);
					while (true)
					{
						int alt173=2;
						try { DebugEnterDecision(173, false);
						int LA173_1 = input.LA(1);

						if ((LA173_1==LT))
						{
							alt173 = 1;
						}


						} finally { DebugExitDecision(173); }
						switch ( alt173 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:359:56: LT !
							{
							DebugLocation(359, 56);
							LT351=(IToken)Match(input,LT,Follow._LT_in_logicalORExpressionNoIn2477); if (state.failed) return retval;

							}
							break;

						default:
							goto loop173;
						}
					}

					loop173:
						;

					} finally { DebugExitSubRule(173); }

					DebugLocation(359, 59);
					PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn2481);
					logicalANDExpressionNoIn352=logicalANDExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalANDExpressionNoIn352.Tree);

					}
					break;

				default:
					goto loop174;
				}
			}

			loop174:
				;

			} finally { DebugExitSubRule(174); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalORExpressionNoIn", 60);
			LeaveRule("logicalORExpressionNoIn", 60);
			LeaveRule_logicalORExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 60, logicalORExpressionNoIn_StartIndex); }

		}
		DebugLocation(360, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "logicalORExpressionNoIn"

	partial void EnterRule_logicalOROperator();
	partial void LeaveRule_logicalOROperator();
	// $ANTLR start "logicalOROperator"
	// JavaScript.g3:362:1: logicalOROperator : '||' -> ^( OPERATOR '||' ) ;
	[GrammarRule("logicalOROperator")]
	private AstParserRuleReturnScope<object, IToken> logicalOROperator()
	{
		EnterRule_logicalOROperator();
		EnterRule("logicalOROperator", 61);
		TraceIn("logicalOROperator", 61);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalOROperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal353 = default(IToken);

		object string_literal353_tree = default(object);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		try { DebugEnterRule(GrammarFileName, "logicalOROperator");
		DebugLocation(362, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// JavaScript.g3:363:2: ( '||' -> ^( OPERATOR '||' ) )
			DebugEnterAlt(1);
			// JavaScript.g3:363:4: '||'
			{
			DebugLocation(363, 4);
			string_literal353=(IToken)Match(input,153,Follow._153_in_logicalOROperator2494); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_153.Add(string_literal353);



			{
			// AST REWRITE
			// elements: 153
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 363:9: -> ^( OPERATOR '||' )
			{
				DebugLocation(363, 12);
				// JavaScript.g3:363:12: ^( OPERATOR '||' )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(363, 14);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

				DebugLocation(363, 23);
				adaptor.AddChild(root_1, stream_153.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOROperator", 61);
			LeaveRule("logicalOROperator", 61);
			LeaveRule_logicalOROperator();
			if (state.backtracking > 0) { Memoize(input, 61, logicalOROperator_StartIndex); }

		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalOROperator"); }
		return retval;

	}
	// $ANTLR end "logicalOROperator"

	partial void EnterRule_logicalANDExpression();
	partial void LeaveRule_logicalANDExpression();
	// $ANTLR start "logicalANDExpression"
	// JavaScript.g3:366:1: logicalANDExpression : bitwiseORExpression ( ( LT !)* logicalANDOperator ^ ( LT !)* bitwiseORExpression )* ;
	[GrammarRule("logicalANDExpression")]
	private AstParserRuleReturnScope<object, IToken> logicalANDExpression()
	{
		EnterRule_logicalANDExpression();
		EnterRule("logicalANDExpression", 62);
		TraceIn("logicalANDExpression", 62);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalANDExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT355 = default(IToken);
		IToken LT357 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bitwiseORExpression354 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalANDOperator356 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseORExpression358 = default(AstParserRuleReturnScope<object, IToken>);

		object LT355_tree = default(object);
		object LT357_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalANDExpression");
		DebugLocation(366, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// JavaScript.g3:367:2: ( bitwiseORExpression ( ( LT !)* logicalANDOperator ^ ( LT !)* bitwiseORExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g3:367:4: bitwiseORExpression ( ( LT !)* logicalANDOperator ^ ( LT !)* bitwiseORExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(367, 4);
			PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression2513);
			bitwiseORExpression354=bitwiseORExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseORExpression354.Tree);
			DebugLocation(367, 24);
			// JavaScript.g3:367:24: ( ( LT !)* logicalANDOperator ^ ( LT !)* bitwiseORExpression )*
			try { DebugEnterSubRule(177);
			while (true)
			{
				int alt177=2;
				try { DebugEnterDecision(177, false);
				try
				{
					alt177 = dfa177.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(177); }
				switch ( alt177 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:367:25: ( LT !)* logicalANDOperator ^ ( LT !)* bitwiseORExpression
					{
					DebugLocation(367, 27);
					// JavaScript.g3:367:27: ( LT !)*
					try { DebugEnterSubRule(175);
					while (true)
					{
						int alt175=2;
						try { DebugEnterDecision(175, false);
						int LA175_1 = input.LA(1);

						if ((LA175_1==LT))
						{
							alt175 = 1;
						}


						} finally { DebugExitDecision(175); }
						switch ( alt175 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:367:27: LT !
							{
							DebugLocation(367, 27);
							LT355=(IToken)Match(input,LT,Follow._LT_in_logicalANDExpression2516); if (state.failed) return retval;

							}
							break;

						default:
							goto loop175;
						}
					}

					loop175:
						;

					} finally { DebugExitSubRule(175); }

					DebugLocation(367, 48);
					PushFollow(Follow._logicalANDOperator_in_logicalANDExpression2520);
					logicalANDOperator356=logicalANDOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(logicalANDOperator356.Tree, root_0);
					DebugLocation(367, 52);
					// JavaScript.g3:367:52: ( LT !)*
					try { DebugEnterSubRule(176);
					while (true)
					{
						int alt176=2;
						try { DebugEnterDecision(176, false);
						int LA176_1 = input.LA(1);

						if ((LA176_1==LT))
						{
							alt176 = 1;
						}


						} finally { DebugExitDecision(176); }
						switch ( alt176 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:367:52: LT !
							{
							DebugLocation(367, 52);
							LT357=(IToken)Match(input,LT,Follow._LT_in_logicalANDExpression2523); if (state.failed) return retval;

							}
							break;

						default:
							goto loop176;
						}
					}

					loop176:
						;

					} finally { DebugExitSubRule(176); }

					DebugLocation(367, 55);
					PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression2527);
					bitwiseORExpression358=bitwiseORExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseORExpression358.Tree);

					}
					break;

				default:
					goto loop177;
				}
			}

			loop177:
				;

			} finally { DebugExitSubRule(177); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalANDExpression", 62);
			LeaveRule("logicalANDExpression", 62);
			LeaveRule_logicalANDExpression();
			if (state.backtracking > 0) { Memoize(input, 62, logicalANDExpression_StartIndex); }

		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpression"); }
		return retval;

	}
	// $ANTLR end "logicalANDExpression"

	partial void EnterRule_logicalANDExpressionNoIn();
	partial void LeaveRule_logicalANDExpressionNoIn();
	// $ANTLR start "logicalANDExpressionNoIn"
	// JavaScript.g3:370:1: logicalANDExpressionNoIn : bitwiseORExpressionNoIn ( ( LT !)* logicalANDOperator ^ ( LT !)* bitwiseORExpressionNoIn )* ;
	[GrammarRule("logicalANDExpressionNoIn")]
	private AstParserRuleReturnScope<object, IToken> logicalANDExpressionNoIn()
	{
		EnterRule_logicalANDExpressionNoIn();
		EnterRule("logicalANDExpressionNoIn", 63);
		TraceIn("logicalANDExpressionNoIn", 63);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalANDExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT360 = default(IToken);
		IToken LT362 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bitwiseORExpressionNoIn359 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalANDOperator361 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseORExpressionNoIn363 = default(AstParserRuleReturnScope<object, IToken>);

		object LT360_tree = default(object);
		object LT362_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalANDExpressionNoIn");
		DebugLocation(370, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// JavaScript.g3:371:2: ( bitwiseORExpressionNoIn ( ( LT !)* logicalANDOperator ^ ( LT !)* bitwiseORExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g3:371:4: bitwiseORExpressionNoIn ( ( LT !)* logicalANDOperator ^ ( LT !)* bitwiseORExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(371, 4);
			PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn2541);
			bitwiseORExpressionNoIn359=bitwiseORExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseORExpressionNoIn359.Tree);
			DebugLocation(371, 28);
			// JavaScript.g3:371:28: ( ( LT !)* logicalANDOperator ^ ( LT !)* bitwiseORExpressionNoIn )*
			try { DebugEnterSubRule(180);
			while (true)
			{
				int alt180=2;
				try { DebugEnterDecision(180, false);
				try
				{
					alt180 = dfa180.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(180); }
				switch ( alt180 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:371:29: ( LT !)* logicalANDOperator ^ ( LT !)* bitwiseORExpressionNoIn
					{
					DebugLocation(371, 31);
					// JavaScript.g3:371:31: ( LT !)*
					try { DebugEnterSubRule(178);
					while (true)
					{
						int alt178=2;
						try { DebugEnterDecision(178, false);
						int LA178_1 = input.LA(1);

						if ((LA178_1==LT))
						{
							alt178 = 1;
						}


						} finally { DebugExitDecision(178); }
						switch ( alt178 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:371:31: LT !
							{
							DebugLocation(371, 31);
							LT360=(IToken)Match(input,LT,Follow._LT_in_logicalANDExpressionNoIn2544); if (state.failed) return retval;

							}
							break;

						default:
							goto loop178;
						}
					}

					loop178:
						;

					} finally { DebugExitSubRule(178); }

					DebugLocation(371, 52);
					PushFollow(Follow._logicalANDOperator_in_logicalANDExpressionNoIn2548);
					logicalANDOperator361=logicalANDOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(logicalANDOperator361.Tree, root_0);
					DebugLocation(371, 56);
					// JavaScript.g3:371:56: ( LT !)*
					try { DebugEnterSubRule(179);
					while (true)
					{
						int alt179=2;
						try { DebugEnterDecision(179, false);
						int LA179_1 = input.LA(1);

						if ((LA179_1==LT))
						{
							alt179 = 1;
						}


						} finally { DebugExitDecision(179); }
						switch ( alt179 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:371:56: LT !
							{
							DebugLocation(371, 56);
							LT362=(IToken)Match(input,LT,Follow._LT_in_logicalANDExpressionNoIn2551); if (state.failed) return retval;

							}
							break;

						default:
							goto loop179;
						}
					}

					loop179:
						;

					} finally { DebugExitSubRule(179); }

					DebugLocation(371, 59);
					PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn2555);
					bitwiseORExpressionNoIn363=bitwiseORExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseORExpressionNoIn363.Tree);

					}
					break;

				default:
					goto loop180;
				}
			}

			loop180:
				;

			} finally { DebugExitSubRule(180); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalANDExpressionNoIn", 63);
			LeaveRule("logicalANDExpressionNoIn", 63);
			LeaveRule_logicalANDExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 63, logicalANDExpressionNoIn_StartIndex); }

		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "logicalANDExpressionNoIn"

	partial void EnterRule_logicalANDOperator();
	partial void LeaveRule_logicalANDOperator();
	// $ANTLR start "logicalANDOperator"
	// JavaScript.g3:374:1: logicalANDOperator : '&&' -> ^( OPERATOR '&&' ) ;
	[GrammarRule("logicalANDOperator")]
	private AstParserRuleReturnScope<object, IToken> logicalANDOperator()
	{
		EnterRule_logicalANDOperator();
		EnterRule("logicalANDOperator", 64);
		TraceIn("logicalANDOperator", 64);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalANDOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal364 = default(IToken);

		object string_literal364_tree = default(object);
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		try { DebugEnterRule(GrammarFileName, "logicalANDOperator");
		DebugLocation(374, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// JavaScript.g3:375:2: ( '&&' -> ^( OPERATOR '&&' ) )
			DebugEnterAlt(1);
			// JavaScript.g3:375:4: '&&'
			{
			DebugLocation(375, 4);
			string_literal364=(IToken)Match(input,84,Follow._84_in_logicalANDOperator2568); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_84.Add(string_literal364);



			{
			// AST REWRITE
			// elements: 84
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 375:9: -> ^( OPERATOR '&&' )
			{
				DebugLocation(375, 12);
				// JavaScript.g3:375:12: ^( OPERATOR '&&' )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(375, 14);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

				DebugLocation(375, 23);
				adaptor.AddChild(root_1, stream_84.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalANDOperator", 64);
			LeaveRule("logicalANDOperator", 64);
			LeaveRule_logicalANDOperator();
			if (state.backtracking > 0) { Memoize(input, 64, logicalANDOperator_StartIndex); }

		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalANDOperator"); }
		return retval;

	}
	// $ANTLR end "logicalANDOperator"

	partial void EnterRule_bitwiseORExpression();
	partial void LeaveRule_bitwiseORExpression();
	// $ANTLR start "bitwiseORExpression"
	// JavaScript.g3:378:1: bitwiseORExpression : bitwiseXORExpression ( ( LT !)* bitwiseOROperator ^ ( LT !)* bitwiseXORExpression )* ;
	[GrammarRule("bitwiseORExpression")]
	private AstParserRuleReturnScope<object, IToken> bitwiseORExpression()
	{
		EnterRule_bitwiseORExpression();
		EnterRule("bitwiseORExpression", 65);
		TraceIn("bitwiseORExpression", 65);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitwiseORExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT366 = default(IToken);
		IToken LT368 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bitwiseXORExpression365 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseOROperator367 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseXORExpression369 = default(AstParserRuleReturnScope<object, IToken>);

		object LT366_tree = default(object);
		object LT368_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseORExpression");
		DebugLocation(378, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// JavaScript.g3:379:2: ( bitwiseXORExpression ( ( LT !)* bitwiseOROperator ^ ( LT !)* bitwiseXORExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g3:379:4: bitwiseXORExpression ( ( LT !)* bitwiseOROperator ^ ( LT !)* bitwiseXORExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(379, 4);
			PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression2587);
			bitwiseXORExpression365=bitwiseXORExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXORExpression365.Tree);
			DebugLocation(379, 25);
			// JavaScript.g3:379:25: ( ( LT !)* bitwiseOROperator ^ ( LT !)* bitwiseXORExpression )*
			try { DebugEnterSubRule(183);
			while (true)
			{
				int alt183=2;
				try { DebugEnterDecision(183, false);
				try
				{
					alt183 = dfa183.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(183); }
				switch ( alt183 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:379:26: ( LT !)* bitwiseOROperator ^ ( LT !)* bitwiseXORExpression
					{
					DebugLocation(379, 28);
					// JavaScript.g3:379:28: ( LT !)*
					try { DebugEnterSubRule(181);
					while (true)
					{
						int alt181=2;
						try { DebugEnterDecision(181, false);
						int LA181_1 = input.LA(1);

						if ((LA181_1==LT))
						{
							alt181 = 1;
						}


						} finally { DebugExitDecision(181); }
						switch ( alt181 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:379:28: LT !
							{
							DebugLocation(379, 28);
							LT366=(IToken)Match(input,LT,Follow._LT_in_bitwiseORExpression2590); if (state.failed) return retval;

							}
							break;

						default:
							goto loop181;
						}
					}

					loop181:
						;

					} finally { DebugExitSubRule(181); }

					DebugLocation(379, 48);
					PushFollow(Follow._bitwiseOROperator_in_bitwiseORExpression2594);
					bitwiseOROperator367=bitwiseOROperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(bitwiseOROperator367.Tree, root_0);
					DebugLocation(379, 52);
					// JavaScript.g3:379:52: ( LT !)*
					try { DebugEnterSubRule(182);
					while (true)
					{
						int alt182=2;
						try { DebugEnterDecision(182, false);
						int LA182_1 = input.LA(1);

						if ((LA182_1==LT))
						{
							alt182 = 1;
						}


						} finally { DebugExitDecision(182); }
						switch ( alt182 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:379:52: LT !
							{
							DebugLocation(379, 52);
							LT368=(IToken)Match(input,LT,Follow._LT_in_bitwiseORExpression2597); if (state.failed) return retval;

							}
							break;

						default:
							goto loop182;
						}
					}

					loop182:
						;

					} finally { DebugExitSubRule(182); }

					DebugLocation(379, 55);
					PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression2601);
					bitwiseXORExpression369=bitwiseXORExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXORExpression369.Tree);

					}
					break;

				default:
					goto loop183;
				}
			}

			loop183:
				;

			} finally { DebugExitSubRule(183); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseORExpression", 65);
			LeaveRule("bitwiseORExpression", 65);
			LeaveRule_bitwiseORExpression();
			if (state.backtracking > 0) { Memoize(input, 65, bitwiseORExpression_StartIndex); }

		}
		DebugLocation(380, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseORExpression"

	partial void EnterRule_bitwiseORExpressionNoIn();
	partial void LeaveRule_bitwiseORExpressionNoIn();
	// $ANTLR start "bitwiseORExpressionNoIn"
	// JavaScript.g3:382:1: bitwiseORExpressionNoIn : bitwiseXORExpressionNoIn ( ( LT !)* bitwiseOROperator ^ ( LT !)* bitwiseXORExpressionNoIn )* ;
	[GrammarRule("bitwiseORExpressionNoIn")]
	private AstParserRuleReturnScope<object, IToken> bitwiseORExpressionNoIn()
	{
		EnterRule_bitwiseORExpressionNoIn();
		EnterRule("bitwiseORExpressionNoIn", 66);
		TraceIn("bitwiseORExpressionNoIn", 66);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitwiseORExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT371 = default(IToken);
		IToken LT373 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bitwiseXORExpressionNoIn370 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseOROperator372 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseXORExpressionNoIn374 = default(AstParserRuleReturnScope<object, IToken>);

		object LT371_tree = default(object);
		object LT373_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseORExpressionNoIn");
		DebugLocation(382, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// JavaScript.g3:383:2: ( bitwiseXORExpressionNoIn ( ( LT !)* bitwiseOROperator ^ ( LT !)* bitwiseXORExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g3:383:4: bitwiseXORExpressionNoIn ( ( LT !)* bitwiseOROperator ^ ( LT !)* bitwiseXORExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(383, 4);
			PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn2615);
			bitwiseXORExpressionNoIn370=bitwiseXORExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXORExpressionNoIn370.Tree);
			DebugLocation(383, 29);
			// JavaScript.g3:383:29: ( ( LT !)* bitwiseOROperator ^ ( LT !)* bitwiseXORExpressionNoIn )*
			try { DebugEnterSubRule(186);
			while (true)
			{
				int alt186=2;
				try { DebugEnterDecision(186, false);
				try
				{
					alt186 = dfa186.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(186); }
				switch ( alt186 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:383:30: ( LT !)* bitwiseOROperator ^ ( LT !)* bitwiseXORExpressionNoIn
					{
					DebugLocation(383, 32);
					// JavaScript.g3:383:32: ( LT !)*
					try { DebugEnterSubRule(184);
					while (true)
					{
						int alt184=2;
						try { DebugEnterDecision(184, false);
						int LA184_1 = input.LA(1);

						if ((LA184_1==LT))
						{
							alt184 = 1;
						}


						} finally { DebugExitDecision(184); }
						switch ( alt184 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:383:32: LT !
							{
							DebugLocation(383, 32);
							LT371=(IToken)Match(input,LT,Follow._LT_in_bitwiseORExpressionNoIn2618); if (state.failed) return retval;

							}
							break;

						default:
							goto loop184;
						}
					}

					loop184:
						;

					} finally { DebugExitSubRule(184); }

					DebugLocation(383, 52);
					PushFollow(Follow._bitwiseOROperator_in_bitwiseORExpressionNoIn2622);
					bitwiseOROperator372=bitwiseOROperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(bitwiseOROperator372.Tree, root_0);
					DebugLocation(383, 56);
					// JavaScript.g3:383:56: ( LT !)*
					try { DebugEnterSubRule(185);
					while (true)
					{
						int alt185=2;
						try { DebugEnterDecision(185, false);
						int LA185_1 = input.LA(1);

						if ((LA185_1==LT))
						{
							alt185 = 1;
						}


						} finally { DebugExitDecision(185); }
						switch ( alt185 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:383:56: LT !
							{
							DebugLocation(383, 56);
							LT373=(IToken)Match(input,LT,Follow._LT_in_bitwiseORExpressionNoIn2625); if (state.failed) return retval;

							}
							break;

						default:
							goto loop185;
						}
					}

					loop185:
						;

					} finally { DebugExitSubRule(185); }

					DebugLocation(383, 59);
					PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn2629);
					bitwiseXORExpressionNoIn374=bitwiseXORExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXORExpressionNoIn374.Tree);

					}
					break;

				default:
					goto loop186;
				}
			}

			loop186:
				;

			} finally { DebugExitSubRule(186); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseORExpressionNoIn", 66);
			LeaveRule("bitwiseORExpressionNoIn", 66);
			LeaveRule_bitwiseORExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 66, bitwiseORExpressionNoIn_StartIndex); }

		}
		DebugLocation(384, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "bitwiseORExpressionNoIn"

	partial void EnterRule_bitwiseOROperator();
	partial void LeaveRule_bitwiseOROperator();
	// $ANTLR start "bitwiseOROperator"
	// JavaScript.g3:386:1: bitwiseOROperator : '|' -> ^( OPERATOR '|' ) ;
	[GrammarRule("bitwiseOROperator")]
	private AstParserRuleReturnScope<object, IToken> bitwiseOROperator()
	{
		EnterRule_bitwiseOROperator();
		EnterRule("bitwiseOROperator", 67);
		TraceIn("bitwiseOROperator", 67);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitwiseOROperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal375 = default(IToken);

		object char_literal375_tree = default(object);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		try { DebugEnterRule(GrammarFileName, "bitwiseOROperator");
		DebugLocation(386, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// JavaScript.g3:387:2: ( '|' -> ^( OPERATOR '|' ) )
			DebugEnterAlt(1);
			// JavaScript.g3:387:4: '|'
			{
			DebugLocation(387, 4);
			char_literal375=(IToken)Match(input,151,Follow._151_in_bitwiseOROperator2642); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_151.Add(char_literal375);



			{
			// AST REWRITE
			// elements: 151
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 387:8: -> ^( OPERATOR '|' )
			{
				DebugLocation(387, 11);
				// JavaScript.g3:387:11: ^( OPERATOR '|' )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(387, 13);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

				DebugLocation(387, 22);
				adaptor.AddChild(root_1, stream_151.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseOROperator", 67);
			LeaveRule("bitwiseOROperator", 67);
			LeaveRule_bitwiseOROperator();
			if (state.backtracking > 0) { Memoize(input, 67, bitwiseOROperator_StartIndex); }

		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseOROperator"); }
		return retval;

	}
	// $ANTLR end "bitwiseOROperator"

	partial void EnterRule_bitwiseXORExpression();
	partial void LeaveRule_bitwiseXORExpression();
	// $ANTLR start "bitwiseXORExpression"
	// JavaScript.g3:390:1: bitwiseXORExpression : bitwiseANDExpression ( ( LT !)* bitwiseXOROperator ^ ( LT !)* bitwiseANDExpression )* ;
	[GrammarRule("bitwiseXORExpression")]
	private AstParserRuleReturnScope<object, IToken> bitwiseXORExpression()
	{
		EnterRule_bitwiseXORExpression();
		EnterRule("bitwiseXORExpression", 68);
		TraceIn("bitwiseXORExpression", 68);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitwiseXORExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT377 = default(IToken);
		IToken LT379 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bitwiseANDExpression376 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseXOROperator378 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseANDExpression380 = default(AstParserRuleReturnScope<object, IToken>);

		object LT377_tree = default(object);
		object LT379_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpression");
		DebugLocation(390, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// JavaScript.g3:391:2: ( bitwiseANDExpression ( ( LT !)* bitwiseXOROperator ^ ( LT !)* bitwiseANDExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g3:391:4: bitwiseANDExpression ( ( LT !)* bitwiseXOROperator ^ ( LT !)* bitwiseANDExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(391, 4);
			PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression2662);
			bitwiseANDExpression376=bitwiseANDExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseANDExpression376.Tree);
			DebugLocation(391, 25);
			// JavaScript.g3:391:25: ( ( LT !)* bitwiseXOROperator ^ ( LT !)* bitwiseANDExpression )*
			try { DebugEnterSubRule(189);
			while (true)
			{
				int alt189=2;
				try { DebugEnterDecision(189, false);
				try
				{
					alt189 = dfa189.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(189); }
				switch ( alt189 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:391:26: ( LT !)* bitwiseXOROperator ^ ( LT !)* bitwiseANDExpression
					{
					DebugLocation(391, 28);
					// JavaScript.g3:391:28: ( LT !)*
					try { DebugEnterSubRule(187);
					while (true)
					{
						int alt187=2;
						try { DebugEnterDecision(187, false);
						int LA187_1 = input.LA(1);

						if ((LA187_1==LT))
						{
							alt187 = 1;
						}


						} finally { DebugExitDecision(187); }
						switch ( alt187 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:391:28: LT !
							{
							DebugLocation(391, 28);
							LT377=(IToken)Match(input,LT,Follow._LT_in_bitwiseXORExpression2665); if (state.failed) return retval;

							}
							break;

						default:
							goto loop187;
						}
					}

					loop187:
						;

					} finally { DebugExitSubRule(187); }

					DebugLocation(391, 49);
					PushFollow(Follow._bitwiseXOROperator_in_bitwiseXORExpression2669);
					bitwiseXOROperator378=bitwiseXOROperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(bitwiseXOROperator378.Tree, root_0);
					DebugLocation(391, 53);
					// JavaScript.g3:391:53: ( LT !)*
					try { DebugEnterSubRule(188);
					while (true)
					{
						int alt188=2;
						try { DebugEnterDecision(188, false);
						int LA188_1 = input.LA(1);

						if ((LA188_1==LT))
						{
							alt188 = 1;
						}


						} finally { DebugExitDecision(188); }
						switch ( alt188 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:391:53: LT !
							{
							DebugLocation(391, 53);
							LT379=(IToken)Match(input,LT,Follow._LT_in_bitwiseXORExpression2672); if (state.failed) return retval;

							}
							break;

						default:
							goto loop188;
						}
					}

					loop188:
						;

					} finally { DebugExitSubRule(188); }

					DebugLocation(391, 56);
					PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression2676);
					bitwiseANDExpression380=bitwiseANDExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseANDExpression380.Tree);

					}
					break;

				default:
					goto loop189;
				}
			}

			loop189:
				;

			} finally { DebugExitSubRule(189); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXORExpression", 68);
			LeaveRule("bitwiseXORExpression", 68);
			LeaveRule_bitwiseXORExpression();
			if (state.backtracking > 0) { Memoize(input, 68, bitwiseXORExpression_StartIndex); }

		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseXORExpression"

	partial void EnterRule_bitwiseXORExpressionNoIn();
	partial void LeaveRule_bitwiseXORExpressionNoIn();
	// $ANTLR start "bitwiseXORExpressionNoIn"
	// JavaScript.g3:394:1: bitwiseXORExpressionNoIn : bitwiseANDExpressionNoIn ( ( LT !)* bitwiseXOROperator ^ ( LT !)* bitwiseANDExpressionNoIn )* ;
	[GrammarRule("bitwiseXORExpressionNoIn")]
	private AstParserRuleReturnScope<object, IToken> bitwiseXORExpressionNoIn()
	{
		EnterRule_bitwiseXORExpressionNoIn();
		EnterRule("bitwiseXORExpressionNoIn", 69);
		TraceIn("bitwiseXORExpressionNoIn", 69);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitwiseXORExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT382 = default(IToken);
		IToken LT384 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bitwiseANDExpressionNoIn381 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseXOROperator383 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseANDExpressionNoIn385 = default(AstParserRuleReturnScope<object, IToken>);

		object LT382_tree = default(object);
		object LT384_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpressionNoIn");
		DebugLocation(394, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// JavaScript.g3:395:2: ( bitwiseANDExpressionNoIn ( ( LT !)* bitwiseXOROperator ^ ( LT !)* bitwiseANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g3:395:4: bitwiseANDExpressionNoIn ( ( LT !)* bitwiseXOROperator ^ ( LT !)* bitwiseANDExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(395, 4);
			PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn2690);
			bitwiseANDExpressionNoIn381=bitwiseANDExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseANDExpressionNoIn381.Tree);
			DebugLocation(395, 29);
			// JavaScript.g3:395:29: ( ( LT !)* bitwiseXOROperator ^ ( LT !)* bitwiseANDExpressionNoIn )*
			try { DebugEnterSubRule(192);
			while (true)
			{
				int alt192=2;
				try { DebugEnterDecision(192, false);
				try
				{
					alt192 = dfa192.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(192); }
				switch ( alt192 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:395:30: ( LT !)* bitwiseXOROperator ^ ( LT !)* bitwiseANDExpressionNoIn
					{
					DebugLocation(395, 32);
					// JavaScript.g3:395:32: ( LT !)*
					try { DebugEnterSubRule(190);
					while (true)
					{
						int alt190=2;
						try { DebugEnterDecision(190, false);
						int LA190_1 = input.LA(1);

						if ((LA190_1==LT))
						{
							alt190 = 1;
						}


						} finally { DebugExitDecision(190); }
						switch ( alt190 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:395:32: LT !
							{
							DebugLocation(395, 32);
							LT382=(IToken)Match(input,LT,Follow._LT_in_bitwiseXORExpressionNoIn2693); if (state.failed) return retval;

							}
							break;

						default:
							goto loop190;
						}
					}

					loop190:
						;

					} finally { DebugExitSubRule(190); }

					DebugLocation(395, 53);
					PushFollow(Follow._bitwiseXOROperator_in_bitwiseXORExpressionNoIn2697);
					bitwiseXOROperator383=bitwiseXOROperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(bitwiseXOROperator383.Tree, root_0);
					DebugLocation(395, 57);
					// JavaScript.g3:395:57: ( LT !)*
					try { DebugEnterSubRule(191);
					while (true)
					{
						int alt191=2;
						try { DebugEnterDecision(191, false);
						int LA191_1 = input.LA(1);

						if ((LA191_1==LT))
						{
							alt191 = 1;
						}


						} finally { DebugExitDecision(191); }
						switch ( alt191 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:395:57: LT !
							{
							DebugLocation(395, 57);
							LT384=(IToken)Match(input,LT,Follow._LT_in_bitwiseXORExpressionNoIn2700); if (state.failed) return retval;

							}
							break;

						default:
							goto loop191;
						}
					}

					loop191:
						;

					} finally { DebugExitSubRule(191); }

					DebugLocation(395, 60);
					PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn2704);
					bitwiseANDExpressionNoIn385=bitwiseANDExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseANDExpressionNoIn385.Tree);

					}
					break;

				default:
					goto loop192;
				}
			}

			loop192:
				;

			} finally { DebugExitSubRule(192); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXORExpressionNoIn", 69);
			LeaveRule("bitwiseXORExpressionNoIn", 69);
			LeaveRule_bitwiseXORExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 69, bitwiseXORExpressionNoIn_StartIndex); }

		}
		DebugLocation(396, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "bitwiseXORExpressionNoIn"

	partial void EnterRule_bitwiseXOROperator();
	partial void LeaveRule_bitwiseXOROperator();
	// $ANTLR start "bitwiseXOROperator"
	// JavaScript.g3:398:1: bitwiseXOROperator : '^' -> ^( OPERATOR '^' ) ;
	[GrammarRule("bitwiseXOROperator")]
	private AstParserRuleReturnScope<object, IToken> bitwiseXOROperator()
	{
		EnterRule_bitwiseXOROperator();
		EnterRule("bitwiseXOROperator", 70);
		TraceIn("bitwiseXOROperator", 70);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitwiseXOROperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal386 = default(IToken);

		object char_literal386_tree = default(object);
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		try { DebugEnterRule(GrammarFileName, "bitwiseXOROperator");
		DebugLocation(398, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// JavaScript.g3:399:2: ( '^' -> ^( OPERATOR '^' ) )
			DebugEnterAlt(1);
			// JavaScript.g3:399:4: '^'
			{
			DebugLocation(399, 4);
			char_literal386=(IToken)Match(input,119,Follow._119_in_bitwiseXOROperator2717); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_119.Add(char_literal386);



			{
			// AST REWRITE
			// elements: 119
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 399:8: -> ^( OPERATOR '^' )
			{
				DebugLocation(399, 11);
				// JavaScript.g3:399:11: ^( OPERATOR '^' )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(399, 13);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

				DebugLocation(399, 22);
				adaptor.AddChild(root_1, stream_119.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXOROperator", 70);
			LeaveRule("bitwiseXOROperator", 70);
			LeaveRule_bitwiseXOROperator();
			if (state.backtracking > 0) { Memoize(input, 70, bitwiseXOROperator_StartIndex); }

		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXOROperator"); }
		return retval;

	}
	// $ANTLR end "bitwiseXOROperator"

	partial void EnterRule_bitwiseANDExpression();
	partial void LeaveRule_bitwiseANDExpression();
	// $ANTLR start "bitwiseANDExpression"
	// JavaScript.g3:402:1: bitwiseANDExpression : equalityExpression ( ( LT !)* bitwiseANDOperator ^ ( LT !)* equalityExpression )* ;
	[GrammarRule("bitwiseANDExpression")]
	private AstParserRuleReturnScope<object, IToken> bitwiseANDExpression()
	{
		EnterRule_bitwiseANDExpression();
		EnterRule("bitwiseANDExpression", 71);
		TraceIn("bitwiseANDExpression", 71);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitwiseANDExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT388 = default(IToken);
		IToken LT390 = default(IToken);
		AstParserRuleReturnScope<object, IToken> equalityExpression387 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseANDOperator389 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> equalityExpression391 = default(AstParserRuleReturnScope<object, IToken>);

		object LT388_tree = default(object);
		object LT390_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpression");
		DebugLocation(402, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// JavaScript.g3:403:2: ( equalityExpression ( ( LT !)* bitwiseANDOperator ^ ( LT !)* equalityExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g3:403:4: equalityExpression ( ( LT !)* bitwiseANDOperator ^ ( LT !)* equalityExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(403, 4);
			PushFollow(Follow._equalityExpression_in_bitwiseANDExpression2736);
			equalityExpression387=equalityExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression387.Tree);
			DebugLocation(403, 23);
			// JavaScript.g3:403:23: ( ( LT !)* bitwiseANDOperator ^ ( LT !)* equalityExpression )*
			try { DebugEnterSubRule(195);
			while (true)
			{
				int alt195=2;
				try { DebugEnterDecision(195, false);
				try
				{
					alt195 = dfa195.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(195); }
				switch ( alt195 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:403:24: ( LT !)* bitwiseANDOperator ^ ( LT !)* equalityExpression
					{
					DebugLocation(403, 26);
					// JavaScript.g3:403:26: ( LT !)*
					try { DebugEnterSubRule(193);
					while (true)
					{
						int alt193=2;
						try { DebugEnterDecision(193, false);
						int LA193_1 = input.LA(1);

						if ((LA193_1==LT))
						{
							alt193 = 1;
						}


						} finally { DebugExitDecision(193); }
						switch ( alt193 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:403:26: LT !
							{
							DebugLocation(403, 26);
							LT388=(IToken)Match(input,LT,Follow._LT_in_bitwiseANDExpression2739); if (state.failed) return retval;

							}
							break;

						default:
							goto loop193;
						}
					}

					loop193:
						;

					} finally { DebugExitSubRule(193); }

					DebugLocation(403, 47);
					PushFollow(Follow._bitwiseANDOperator_in_bitwiseANDExpression2743);
					bitwiseANDOperator389=bitwiseANDOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(bitwiseANDOperator389.Tree, root_0);
					DebugLocation(403, 51);
					// JavaScript.g3:403:51: ( LT !)*
					try { DebugEnterSubRule(194);
					while (true)
					{
						int alt194=2;
						try { DebugEnterDecision(194, false);
						int LA194_1 = input.LA(1);

						if ((LA194_1==LT))
						{
							alt194 = 1;
						}


						} finally { DebugExitDecision(194); }
						switch ( alt194 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:403:51: LT !
							{
							DebugLocation(403, 51);
							LT390=(IToken)Match(input,LT,Follow._LT_in_bitwiseANDExpression2746); if (state.failed) return retval;

							}
							break;

						default:
							goto loop194;
						}
					}

					loop194:
						;

					} finally { DebugExitSubRule(194); }

					DebugLocation(403, 54);
					PushFollow(Follow._equalityExpression_in_bitwiseANDExpression2750);
					equalityExpression391=equalityExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression391.Tree);

					}
					break;

				default:
					goto loop195;
				}
			}

			loop195:
				;

			} finally { DebugExitSubRule(195); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseANDExpression", 71);
			LeaveRule("bitwiseANDExpression", 71);
			LeaveRule_bitwiseANDExpression();
			if (state.backtracking > 0) { Memoize(input, 71, bitwiseANDExpression_StartIndex); }

		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseANDExpression"

	partial void EnterRule_bitwiseANDExpressionNoIn();
	partial void LeaveRule_bitwiseANDExpressionNoIn();
	// $ANTLR start "bitwiseANDExpressionNoIn"
	// JavaScript.g3:406:1: bitwiseANDExpressionNoIn : equalityExpressionNoIn ( ( LT !)* bitwiseANDOperator ^ ( LT !)* equalityExpressionNoIn )* ;
	[GrammarRule("bitwiseANDExpressionNoIn")]
	private AstParserRuleReturnScope<object, IToken> bitwiseANDExpressionNoIn()
	{
		EnterRule_bitwiseANDExpressionNoIn();
		EnterRule("bitwiseANDExpressionNoIn", 72);
		TraceIn("bitwiseANDExpressionNoIn", 72);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitwiseANDExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT393 = default(IToken);
		IToken LT395 = default(IToken);
		AstParserRuleReturnScope<object, IToken> equalityExpressionNoIn392 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseANDOperator394 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> equalityExpressionNoIn396 = default(AstParserRuleReturnScope<object, IToken>);

		object LT393_tree = default(object);
		object LT395_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpressionNoIn");
		DebugLocation(406, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// JavaScript.g3:407:2: ( equalityExpressionNoIn ( ( LT !)* bitwiseANDOperator ^ ( LT !)* equalityExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g3:407:4: equalityExpressionNoIn ( ( LT !)* bitwiseANDOperator ^ ( LT !)* equalityExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(407, 4);
			PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn2763);
			equalityExpressionNoIn392=equalityExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpressionNoIn392.Tree);
			DebugLocation(407, 27);
			// JavaScript.g3:407:27: ( ( LT !)* bitwiseANDOperator ^ ( LT !)* equalityExpressionNoIn )*
			try { DebugEnterSubRule(198);
			while (true)
			{
				int alt198=2;
				try { DebugEnterDecision(198, false);
				try
				{
					alt198 = dfa198.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(198); }
				switch ( alt198 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:407:28: ( LT !)* bitwiseANDOperator ^ ( LT !)* equalityExpressionNoIn
					{
					DebugLocation(407, 30);
					// JavaScript.g3:407:30: ( LT !)*
					try { DebugEnterSubRule(196);
					while (true)
					{
						int alt196=2;
						try { DebugEnterDecision(196, false);
						int LA196_1 = input.LA(1);

						if ((LA196_1==LT))
						{
							alt196 = 1;
						}


						} finally { DebugExitDecision(196); }
						switch ( alt196 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:407:30: LT !
							{
							DebugLocation(407, 30);
							LT393=(IToken)Match(input,LT,Follow._LT_in_bitwiseANDExpressionNoIn2766); if (state.failed) return retval;

							}
							break;

						default:
							goto loop196;
						}
					}

					loop196:
						;

					} finally { DebugExitSubRule(196); }

					DebugLocation(407, 51);
					PushFollow(Follow._bitwiseANDOperator_in_bitwiseANDExpressionNoIn2770);
					bitwiseANDOperator394=bitwiseANDOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(bitwiseANDOperator394.Tree, root_0);
					DebugLocation(407, 55);
					// JavaScript.g3:407:55: ( LT !)*
					try { DebugEnterSubRule(197);
					while (true)
					{
						int alt197=2;
						try { DebugEnterDecision(197, false);
						int LA197_1 = input.LA(1);

						if ((LA197_1==LT))
						{
							alt197 = 1;
						}


						} finally { DebugExitDecision(197); }
						switch ( alt197 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:407:55: LT !
							{
							DebugLocation(407, 55);
							LT395=(IToken)Match(input,LT,Follow._LT_in_bitwiseANDExpressionNoIn2773); if (state.failed) return retval;

							}
							break;

						default:
							goto loop197;
						}
					}

					loop197:
						;

					} finally { DebugExitSubRule(197); }

					DebugLocation(407, 58);
					PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn2777);
					equalityExpressionNoIn396=equalityExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpressionNoIn396.Tree);

					}
					break;

				default:
					goto loop198;
				}
			}

			loop198:
				;

			} finally { DebugExitSubRule(198); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseANDExpressionNoIn", 72);
			LeaveRule("bitwiseANDExpressionNoIn", 72);
			LeaveRule_bitwiseANDExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 72, bitwiseANDExpressionNoIn_StartIndex); }

		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "bitwiseANDExpressionNoIn"

	partial void EnterRule_bitwiseANDOperator();
	partial void LeaveRule_bitwiseANDOperator();
	// $ANTLR start "bitwiseANDOperator"
	// JavaScript.g3:410:1: bitwiseANDOperator : '&' -> ^( OPERATOR '&' ) ;
	[GrammarRule("bitwiseANDOperator")]
	private AstParserRuleReturnScope<object, IToken> bitwiseANDOperator()
	{
		EnterRule_bitwiseANDOperator();
		EnterRule("bitwiseANDOperator", 73);
		TraceIn("bitwiseANDOperator", 73);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitwiseANDOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal397 = default(IToken);

		object char_literal397_tree = default(object);
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		try { DebugEnterRule(GrammarFileName, "bitwiseANDOperator");
		DebugLocation(410, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// JavaScript.g3:411:2: ( '&' -> ^( OPERATOR '&' ) )
			DebugEnterAlt(1);
			// JavaScript.g3:411:4: '&'
			{
			DebugLocation(411, 4);
			char_literal397=(IToken)Match(input,85,Follow._85_in_bitwiseANDOperator2790); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_85.Add(char_literal397);



			{
			// AST REWRITE
			// elements: 85
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 411:8: -> ^( OPERATOR '&' )
			{
				DebugLocation(411, 11);
				// JavaScript.g3:411:11: ^( OPERATOR '&' )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(411, 13);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

				DebugLocation(411, 22);
				adaptor.AddChild(root_1, stream_85.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseANDOperator", 73);
			LeaveRule("bitwiseANDOperator", 73);
			LeaveRule_bitwiseANDOperator();
			if (state.backtracking > 0) { Memoize(input, 73, bitwiseANDOperator_StartIndex); }

		}
		DebugLocation(412, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDOperator"); }
		return retval;

	}
	// $ANTLR end "bitwiseANDOperator"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();
	// $ANTLR start "equalityExpression"
	// JavaScript.g3:414:1: equalityExpression : relationalExpression ( ( LT !)* equalityOperator ^ ( LT !)* relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<object, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 74);
		TraceIn("equalityExpression", 74);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int equalityExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT399 = default(IToken);
		IToken LT401 = default(IToken);
		AstParserRuleReturnScope<object, IToken> relationalExpression398 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> equalityOperator400 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> relationalExpression402 = default(AstParserRuleReturnScope<object, IToken>);

		object LT399_tree = default(object);
		object LT401_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(414, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// JavaScript.g3:415:2: ( relationalExpression ( ( LT !)* equalityOperator ^ ( LT !)* relationalExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g3:415:4: relationalExpression ( ( LT !)* equalityOperator ^ ( LT !)* relationalExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(415, 4);
			PushFollow(Follow._relationalExpression_in_equalityExpression2810);
			relationalExpression398=relationalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpression398.Tree);
			DebugLocation(415, 25);
			// JavaScript.g3:415:25: ( ( LT !)* equalityOperator ^ ( LT !)* relationalExpression )*
			try { DebugEnterSubRule(201);
			while (true)
			{
				int alt201=2;
				try { DebugEnterDecision(201, false);
				try
				{
					alt201 = dfa201.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(201); }
				switch ( alt201 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:415:26: ( LT !)* equalityOperator ^ ( LT !)* relationalExpression
					{
					DebugLocation(415, 28);
					// JavaScript.g3:415:28: ( LT !)*
					try { DebugEnterSubRule(199);
					while (true)
					{
						int alt199=2;
						try { DebugEnterDecision(199, false);
						int LA199_1 = input.LA(1);

						if ((LA199_1==LT))
						{
							alt199 = 1;
						}


						} finally { DebugExitDecision(199); }
						switch ( alt199 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:415:28: LT !
							{
							DebugLocation(415, 28);
							LT399=(IToken)Match(input,LT,Follow._LT_in_equalityExpression2813); if (state.failed) return retval;

							}
							break;

						default:
							goto loop199;
						}
					}

					loop199:
						;

					} finally { DebugExitSubRule(199); }

					DebugLocation(415, 47);
					PushFollow(Follow._equalityOperator_in_equalityExpression2817);
					equalityOperator400=equalityOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(equalityOperator400.Tree, root_0);
					DebugLocation(415, 51);
					// JavaScript.g3:415:51: ( LT !)*
					try { DebugEnterSubRule(200);
					while (true)
					{
						int alt200=2;
						try { DebugEnterDecision(200, false);
						int LA200_1 = input.LA(1);

						if ((LA200_1==LT))
						{
							alt200 = 1;
						}


						} finally { DebugExitDecision(200); }
						switch ( alt200 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:415:51: LT !
							{
							DebugLocation(415, 51);
							LT401=(IToken)Match(input,LT,Follow._LT_in_equalityExpression2820); if (state.failed) return retval;

							}
							break;

						default:
							goto loop200;
						}
					}

					loop200:
						;

					} finally { DebugExitSubRule(200); }

					DebugLocation(415, 54);
					PushFollow(Follow._relationalExpression_in_equalityExpression2824);
					relationalExpression402=relationalExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpression402.Tree);

					}
					break;

				default:
					goto loop201;
				}
			}

			loop201:
				;

			} finally { DebugExitSubRule(201); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 74);
			LeaveRule("equalityExpression", 74);
			LeaveRule_equalityExpression();
			if (state.backtracking > 0) { Memoize(input, 74, equalityExpression_StartIndex); }

		}
		DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_equalityExpressionNoIn();
	partial void LeaveRule_equalityExpressionNoIn();
	// $ANTLR start "equalityExpressionNoIn"
	// JavaScript.g3:418:1: equalityExpressionNoIn : relationalExpressionNoIn ( ( LT !)* equalityOperator ^ ( LT !)* relationalExpressionNoIn )* ;
	[GrammarRule("equalityExpressionNoIn")]
	private AstParserRuleReturnScope<object, IToken> equalityExpressionNoIn()
	{
		EnterRule_equalityExpressionNoIn();
		EnterRule("equalityExpressionNoIn", 75);
		TraceIn("equalityExpressionNoIn", 75);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int equalityExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT404 = default(IToken);
		IToken LT406 = default(IToken);
		AstParserRuleReturnScope<object, IToken> relationalExpressionNoIn403 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> equalityOperator405 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> relationalExpressionNoIn407 = default(AstParserRuleReturnScope<object, IToken>);

		object LT404_tree = default(object);
		object LT406_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equalityExpressionNoIn");
		DebugLocation(418, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// JavaScript.g3:419:2: ( relationalExpressionNoIn ( ( LT !)* equalityOperator ^ ( LT !)* relationalExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g3:419:4: relationalExpressionNoIn ( ( LT !)* equalityOperator ^ ( LT !)* relationalExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(419, 4);
			PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn2837);
			relationalExpressionNoIn403=relationalExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpressionNoIn403.Tree);
			DebugLocation(419, 29);
			// JavaScript.g3:419:29: ( ( LT !)* equalityOperator ^ ( LT !)* relationalExpressionNoIn )*
			try { DebugEnterSubRule(204);
			while (true)
			{
				int alt204=2;
				try { DebugEnterDecision(204, false);
				try
				{
					alt204 = dfa204.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(204); }
				switch ( alt204 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:419:30: ( LT !)* equalityOperator ^ ( LT !)* relationalExpressionNoIn
					{
					DebugLocation(419, 32);
					// JavaScript.g3:419:32: ( LT !)*
					try { DebugEnterSubRule(202);
					while (true)
					{
						int alt202=2;
						try { DebugEnterDecision(202, false);
						int LA202_1 = input.LA(1);

						if ((LA202_1==LT))
						{
							alt202 = 1;
						}


						} finally { DebugExitDecision(202); }
						switch ( alt202 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:419:32: LT !
							{
							DebugLocation(419, 32);
							LT404=(IToken)Match(input,LT,Follow._LT_in_equalityExpressionNoIn2840); if (state.failed) return retval;

							}
							break;

						default:
							goto loop202;
						}
					}

					loop202:
						;

					} finally { DebugExitSubRule(202); }

					DebugLocation(419, 51);
					PushFollow(Follow._equalityOperator_in_equalityExpressionNoIn2844);
					equalityOperator405=equalityOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(equalityOperator405.Tree, root_0);
					DebugLocation(419, 55);
					// JavaScript.g3:419:55: ( LT !)*
					try { DebugEnterSubRule(203);
					while (true)
					{
						int alt203=2;
						try { DebugEnterDecision(203, false);
						int LA203_1 = input.LA(1);

						if ((LA203_1==LT))
						{
							alt203 = 1;
						}


						} finally { DebugExitDecision(203); }
						switch ( alt203 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:419:55: LT !
							{
							DebugLocation(419, 55);
							LT406=(IToken)Match(input,LT,Follow._LT_in_equalityExpressionNoIn2847); if (state.failed) return retval;

							}
							break;

						default:
							goto loop203;
						}
					}

					loop203:
						;

					} finally { DebugExitSubRule(203); }

					DebugLocation(419, 58);
					PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn2851);
					relationalExpressionNoIn407=relationalExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpressionNoIn407.Tree);

					}
					break;

				default:
					goto loop204;
				}
			}

			loop204:
				;

			} finally { DebugExitSubRule(204); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpressionNoIn", 75);
			LeaveRule("equalityExpressionNoIn", 75);
			LeaveRule_equalityExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 75, equalityExpressionNoIn_StartIndex); }

		}
		DebugLocation(420, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "equalityExpressionNoIn"

	partial void EnterRule_equalityOperator();
	partial void LeaveRule_equalityOperator();
	// $ANTLR start "equalityOperator"
	// JavaScript.g3:422:1: equalityOperator : ( '==' -> ^( OPERATOR '==' ) | '!=' -> ^( OPERATOR '!=' ) | '===' -> ^( OPERATOR '===' ) | '!==' -> ^( OPERATOR '!==' ) );
	[GrammarRule("equalityOperator")]
	private AstParserRuleReturnScope<object, IToken> equalityOperator()
	{
		EnterRule_equalityOperator();
		EnterRule("equalityOperator", 76);
		TraceIn("equalityOperator", 76);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int equalityOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal408 = default(IToken);
		IToken string_literal409 = default(IToken);
		IToken string_literal410 = default(IToken);
		IToken string_literal411 = default(IToken);

		object string_literal408_tree = default(object);
		object string_literal409_tree = default(object);
		object string_literal410_tree = default(object);
		object string_literal411_tree = default(object);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		try { DebugEnterRule(GrammarFileName, "equalityOperator");
		DebugLocation(422, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// JavaScript.g3:423:2: ( '==' -> ^( OPERATOR '==' ) | '!=' -> ^( OPERATOR '!=' ) | '===' -> ^( OPERATOR '===' ) | '!==' -> ^( OPERATOR '!==' ) )
			int alt205=4;
			try { DebugEnterDecision(205, false);
			switch (input.LA(1))
			{
			case 108:
				{
				alt205 = 1;
				}
				break;
			case 80:
				{
				alt205 = 2;
				}
				break;
			case 109:
				{
				alt205 = 3;
				}
				break;
			case 81:
				{
				alt205 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 205, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(205); }
			switch (alt205)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:423:4: '=='
				{
				DebugLocation(423, 4);
				string_literal408=(IToken)Match(input,108,Follow._108_in_equalityOperator2864); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_108.Add(string_literal408);



				{
				// AST REWRITE
				// elements: 108
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 423:9: -> ^( OPERATOR '==' )
				{
					DebugLocation(423, 12);
					// JavaScript.g3:423:12: ^( OPERATOR '==' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(423, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(423, 23);
					adaptor.AddChild(root_1, stream_108.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:424:4: '!='
				{
				DebugLocation(424, 4);
				string_literal409=(IToken)Match(input,80,Follow._80_in_equalityOperator2877); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_80.Add(string_literal409);



				{
				// AST REWRITE
				// elements: 80
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 424:9: -> ^( OPERATOR '!=' )
				{
					DebugLocation(424, 12);
					// JavaScript.g3:424:12: ^( OPERATOR '!=' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(424, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(424, 23);
					adaptor.AddChild(root_1, stream_80.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g3:425:4: '==='
				{
				DebugLocation(425, 4);
				string_literal410=(IToken)Match(input,109,Follow._109_in_equalityOperator2890); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(string_literal410);



				{
				// AST REWRITE
				// elements: 109
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 425:10: -> ^( OPERATOR '===' )
				{
					DebugLocation(425, 13);
					// JavaScript.g3:425:13: ^( OPERATOR '===' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(425, 15);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(425, 24);
					adaptor.AddChild(root_1, stream_109.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaScript.g3:426:4: '!=='
				{
				DebugLocation(426, 4);
				string_literal411=(IToken)Match(input,81,Follow._81_in_equalityOperator2903); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_81.Add(string_literal411);



				{
				// AST REWRITE
				// elements: 81
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 426:10: -> ^( OPERATOR '!==' )
				{
					DebugLocation(426, 13);
					// JavaScript.g3:426:13: ^( OPERATOR '!==' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(426, 15);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(426, 24);
					adaptor.AddChild(root_1, stream_81.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityOperator", 76);
			LeaveRule("equalityOperator", 76);
			LeaveRule_equalityOperator();
			if (state.backtracking > 0) { Memoize(input, 76, equalityOperator_StartIndex); }

		}
		DebugLocation(427, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityOperator"); }
		return retval;

	}
	// $ANTLR end "equalityOperator"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// JavaScript.g3:429:1: relationalExpression : shiftExpression ( ( LT !)* relationalOperator ^ ( LT !)* shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<object, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 77);
		TraceIn("relationalExpression", 77);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int relationalExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT413 = default(IToken);
		IToken LT415 = default(IToken);
		AstParserRuleReturnScope<object, IToken> shiftExpression412 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> relationalOperator414 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> shiftExpression416 = default(AstParserRuleReturnScope<object, IToken>);

		object LT413_tree = default(object);
		object LT415_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(429, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// JavaScript.g3:430:2: ( shiftExpression ( ( LT !)* relationalOperator ^ ( LT !)* shiftExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g3:430:4: shiftExpression ( ( LT !)* relationalOperator ^ ( LT !)* shiftExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(430, 4);
			PushFollow(Follow._shiftExpression_in_relationalExpression2922);
			shiftExpression412=shiftExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression412.Tree);
			DebugLocation(430, 20);
			// JavaScript.g3:430:20: ( ( LT !)* relationalOperator ^ ( LT !)* shiftExpression )*
			try { DebugEnterSubRule(208);
			while (true)
			{
				int alt208=2;
				try { DebugEnterDecision(208, false);
				try
				{
					alt208 = dfa208.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(208); }
				switch ( alt208 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:430:21: ( LT !)* relationalOperator ^ ( LT !)* shiftExpression
					{
					DebugLocation(430, 23);
					// JavaScript.g3:430:23: ( LT !)*
					try { DebugEnterSubRule(206);
					while (true)
					{
						int alt206=2;
						try { DebugEnterDecision(206, false);
						int LA206_1 = input.LA(1);

						if ((LA206_1==LT))
						{
							alt206 = 1;
						}


						} finally { DebugExitDecision(206); }
						switch ( alt206 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:430:23: LT !
							{
							DebugLocation(430, 23);
							LT413=(IToken)Match(input,LT,Follow._LT_in_relationalExpression2925); if (state.failed) return retval;

							}
							break;

						default:
							goto loop206;
						}
					}

					loop206:
						;

					} finally { DebugExitSubRule(206); }

					DebugLocation(430, 44);
					PushFollow(Follow._relationalOperator_in_relationalExpression2929);
					relationalOperator414=relationalOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(relationalOperator414.Tree, root_0);
					DebugLocation(430, 48);
					// JavaScript.g3:430:48: ( LT !)*
					try { DebugEnterSubRule(207);
					while (true)
					{
						int alt207=2;
						try { DebugEnterDecision(207, false);
						int LA207_1 = input.LA(1);

						if ((LA207_1==LT))
						{
							alt207 = 1;
						}


						} finally { DebugExitDecision(207); }
						switch ( alt207 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:430:48: LT !
							{
							DebugLocation(430, 48);
							LT415=(IToken)Match(input,LT,Follow._LT_in_relationalExpression2932); if (state.failed) return retval;

							}
							break;

						default:
							goto loop207;
						}
					}

					loop207:
						;

					} finally { DebugExitSubRule(207); }

					DebugLocation(430, 51);
					PushFollow(Follow._shiftExpression_in_relationalExpression2936);
					shiftExpression416=shiftExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression416.Tree);

					}
					break;

				default:
					goto loop208;
				}
			}

			loop208:
				;

			} finally { DebugExitSubRule(208); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 77);
			LeaveRule("relationalExpression", 77);
			LeaveRule_relationalExpression();
			if (state.backtracking > 0) { Memoize(input, 77, relationalExpression_StartIndex); }

		}
		DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_relationalOperator();
	partial void LeaveRule_relationalOperator();
	// $ANTLR start "relationalOperator"
	// JavaScript.g3:433:1: relationalOperator : ( relationalOperatorNoIn | 'in' -> ^( OPERATOR 'in' ) );
	[GrammarRule("relationalOperator")]
	private AstParserRuleReturnScope<object, IToken> relationalOperator()
	{
		EnterRule_relationalOperator();
		EnterRule("relationalOperator", 78);
		TraceIn("relationalOperator", 78);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int relationalOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal418 = default(IToken);
		AstParserRuleReturnScope<object, IToken> relationalOperatorNoIn417 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal418_tree = default(object);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		try { DebugEnterRule(GrammarFileName, "relationalOperator");
		DebugLocation(433, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// JavaScript.g3:434:2: ( relationalOperatorNoIn | 'in' -> ^( OPERATOR 'in' ) )
			int alt209=2;
			try { DebugEnterDecision(209, false);
			int LA209_1 = input.LA(1);

			if ((LA209_1==103||LA209_1==106||(LA209_1>=110 && LA209_1<=111)||LA209_1==136))
			{
				alt209 = 1;
			}
			else if ((LA209_1==135))
			{
				alt209 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 209, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(209); }
			switch (alt209)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:434:4: relationalOperatorNoIn
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(434, 4);
				PushFollow(Follow._relationalOperatorNoIn_in_relationalOperator2949);
				relationalOperatorNoIn417=relationalOperatorNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, relationalOperatorNoIn417.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:435:4: 'in'
				{
				DebugLocation(435, 4);
				string_literal418=(IToken)Match(input,135,Follow._135_in_relationalOperator2954); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_135.Add(string_literal418);



				{
				// AST REWRITE
				// elements: 135
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 435:9: -> ^( OPERATOR 'in' )
				{
					DebugLocation(435, 12);
					// JavaScript.g3:435:12: ^( OPERATOR 'in' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(435, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(435, 23);
					adaptor.AddChild(root_1, stream_135.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalOperator", 78);
			LeaveRule("relationalOperator", 78);
			LeaveRule_relationalOperator();
			if (state.backtracking > 0) { Memoize(input, 78, relationalOperator_StartIndex); }

		}
		DebugLocation(436, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalOperator"); }
		return retval;

	}
	// $ANTLR end "relationalOperator"

	partial void EnterRule_relationalExpressionNoIn();
	partial void LeaveRule_relationalExpressionNoIn();
	// $ANTLR start "relationalExpressionNoIn"
	// JavaScript.g3:438:1: relationalExpressionNoIn : shiftExpression ( ( LT !)* relationalOperatorNoIn ^ ( LT !)* shiftExpression )* ;
	[GrammarRule("relationalExpressionNoIn")]
	private AstParserRuleReturnScope<object, IToken> relationalExpressionNoIn()
	{
		EnterRule_relationalExpressionNoIn();
		EnterRule("relationalExpressionNoIn", 79);
		TraceIn("relationalExpressionNoIn", 79);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int relationalExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT420 = default(IToken);
		IToken LT422 = default(IToken);
		AstParserRuleReturnScope<object, IToken> shiftExpression419 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> relationalOperatorNoIn421 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> shiftExpression423 = default(AstParserRuleReturnScope<object, IToken>);

		object LT420_tree = default(object);
		object LT422_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relationalExpressionNoIn");
		DebugLocation(438, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// JavaScript.g3:439:2: ( shiftExpression ( ( LT !)* relationalOperatorNoIn ^ ( LT !)* shiftExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g3:439:4: shiftExpression ( ( LT !)* relationalOperatorNoIn ^ ( LT !)* shiftExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(439, 4);
			PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn2973);
			shiftExpression419=shiftExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression419.Tree);
			DebugLocation(439, 20);
			// JavaScript.g3:439:20: ( ( LT !)* relationalOperatorNoIn ^ ( LT !)* shiftExpression )*
			try { DebugEnterSubRule(212);
			while (true)
			{
				int alt212=2;
				try { DebugEnterDecision(212, false);
				try
				{
					alt212 = dfa212.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(212); }
				switch ( alt212 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:439:21: ( LT !)* relationalOperatorNoIn ^ ( LT !)* shiftExpression
					{
					DebugLocation(439, 23);
					// JavaScript.g3:439:23: ( LT !)*
					try { DebugEnterSubRule(210);
					while (true)
					{
						int alt210=2;
						try { DebugEnterDecision(210, false);
						int LA210_1 = input.LA(1);

						if ((LA210_1==LT))
						{
							alt210 = 1;
						}


						} finally { DebugExitDecision(210); }
						switch ( alt210 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:439:23: LT !
							{
							DebugLocation(439, 23);
							LT420=(IToken)Match(input,LT,Follow._LT_in_relationalExpressionNoIn2976); if (state.failed) return retval;

							}
							break;

						default:
							goto loop210;
						}
					}

					loop210:
						;

					} finally { DebugExitSubRule(210); }

					DebugLocation(439, 48);
					PushFollow(Follow._relationalOperatorNoIn_in_relationalExpressionNoIn2980);
					relationalOperatorNoIn421=relationalOperatorNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(relationalOperatorNoIn421.Tree, root_0);
					DebugLocation(439, 52);
					// JavaScript.g3:439:52: ( LT !)*
					try { DebugEnterSubRule(211);
					while (true)
					{
						int alt211=2;
						try { DebugEnterDecision(211, false);
						int LA211_1 = input.LA(1);

						if ((LA211_1==LT))
						{
							alt211 = 1;
						}


						} finally { DebugExitDecision(211); }
						switch ( alt211 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:439:52: LT !
							{
							DebugLocation(439, 52);
							LT422=(IToken)Match(input,LT,Follow._LT_in_relationalExpressionNoIn2983); if (state.failed) return retval;

							}
							break;

						default:
							goto loop211;
						}
					}

					loop211:
						;

					} finally { DebugExitSubRule(211); }

					DebugLocation(439, 55);
					PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn2987);
					shiftExpression423=shiftExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression423.Tree);

					}
					break;

				default:
					goto loop212;
				}
			}

			loop212:
				;

			} finally { DebugExitSubRule(212); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpressionNoIn", 79);
			LeaveRule("relationalExpressionNoIn", 79);
			LeaveRule_relationalExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 79, relationalExpressionNoIn_StartIndex); }

		}
		DebugLocation(440, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "relationalExpressionNoIn"

	partial void EnterRule_relationalOperatorNoIn();
	partial void LeaveRule_relationalOperatorNoIn();
	// $ANTLR start "relationalOperatorNoIn"
	// JavaScript.g3:442:1: relationalOperatorNoIn : ( '<' -> ^( OPERATOR '<' ) | '>' -> ^( OPERATOR '>' ) | '<=' -> ^( OPERATOR '<=' ) | '>=' -> ^( OPERATOR '>=' ) | 'instanceof' -> ^( OPERATOR 'instanceof' ) );
	[GrammarRule("relationalOperatorNoIn")]
	private AstParserRuleReturnScope<object, IToken> relationalOperatorNoIn()
	{
		EnterRule_relationalOperatorNoIn();
		EnterRule("relationalOperatorNoIn", 80);
		TraceIn("relationalOperatorNoIn", 80);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int relationalOperatorNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal424 = default(IToken);
		IToken char_literal425 = default(IToken);
		IToken string_literal426 = default(IToken);
		IToken string_literal427 = default(IToken);
		IToken string_literal428 = default(IToken);

		object char_literal424_tree = default(object);
		object char_literal425_tree = default(object);
		object string_literal426_tree = default(object);
		object string_literal427_tree = default(object);
		object string_literal428_tree = default(object);
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		try { DebugEnterRule(GrammarFileName, "relationalOperatorNoIn");
		DebugLocation(442, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// JavaScript.g3:443:2: ( '<' -> ^( OPERATOR '<' ) | '>' -> ^( OPERATOR '>' ) | '<=' -> ^( OPERATOR '<=' ) | '>=' -> ^( OPERATOR '>=' ) | 'instanceof' -> ^( OPERATOR 'instanceof' ) )
			int alt213=5;
			try { DebugEnterDecision(213, false);
			switch (input.LA(1))
			{
			case 103:
				{
				alt213 = 1;
				}
				break;
			case 110:
				{
				alt213 = 2;
				}
				break;
			case 106:
				{
				alt213 = 3;
				}
				break;
			case 111:
				{
				alt213 = 4;
				}
				break;
			case 136:
				{
				alt213 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 213, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(213); }
			switch (alt213)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:443:4: '<'
				{
				DebugLocation(443, 4);
				char_literal424=(IToken)Match(input,103,Follow._103_in_relationalOperatorNoIn3000); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_103.Add(char_literal424);



				{
				// AST REWRITE
				// elements: 103
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 443:8: -> ^( OPERATOR '<' )
				{
					DebugLocation(443, 11);
					// JavaScript.g3:443:11: ^( OPERATOR '<' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(443, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(443, 22);
					adaptor.AddChild(root_1, stream_103.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:444:4: '>'
				{
				DebugLocation(444, 4);
				char_literal425=(IToken)Match(input,110,Follow._110_in_relationalOperatorNoIn3013); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal425);



				{
				// AST REWRITE
				// elements: 110
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 444:8: -> ^( OPERATOR '>' )
				{
					DebugLocation(444, 11);
					// JavaScript.g3:444:11: ^( OPERATOR '>' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(444, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(444, 22);
					adaptor.AddChild(root_1, stream_110.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g3:445:4: '<='
				{
				DebugLocation(445, 4);
				string_literal426=(IToken)Match(input,106,Follow._106_in_relationalOperatorNoIn3026); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_106.Add(string_literal426);



				{
				// AST REWRITE
				// elements: 106
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 445:9: -> ^( OPERATOR '<=' )
				{
					DebugLocation(445, 12);
					// JavaScript.g3:445:12: ^( OPERATOR '<=' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(445, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(445, 23);
					adaptor.AddChild(root_1, stream_106.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaScript.g3:446:4: '>='
				{
				DebugLocation(446, 4);
				string_literal427=(IToken)Match(input,111,Follow._111_in_relationalOperatorNoIn3039); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(string_literal427);



				{
				// AST REWRITE
				// elements: 111
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 446:9: -> ^( OPERATOR '>=' )
				{
					DebugLocation(446, 12);
					// JavaScript.g3:446:12: ^( OPERATOR '>=' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(446, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(446, 23);
					adaptor.AddChild(root_1, stream_111.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaScript.g3:447:4: 'instanceof'
				{
				DebugLocation(447, 4);
				string_literal428=(IToken)Match(input,136,Follow._136_in_relationalOperatorNoIn3052); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_136.Add(string_literal428);



				{
				// AST REWRITE
				// elements: 136
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 447:17: -> ^( OPERATOR 'instanceof' )
				{
					DebugLocation(447, 20);
					// JavaScript.g3:447:20: ^( OPERATOR 'instanceof' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(447, 22);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(447, 31);
					adaptor.AddChild(root_1, stream_136.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalOperatorNoIn", 80);
			LeaveRule("relationalOperatorNoIn", 80);
			LeaveRule_relationalOperatorNoIn();
			if (state.backtracking > 0) { Memoize(input, 80, relationalOperatorNoIn_StartIndex); }

		}
		DebugLocation(448, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalOperatorNoIn"); }
		return retval;

	}
	// $ANTLR end "relationalOperatorNoIn"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();
	// $ANTLR start "shiftExpression"
	// JavaScript.g3:450:1: shiftExpression : additiveExpression ( ( LT !)* shiftOperator ^ ( LT !)* additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private AstParserRuleReturnScope<object, IToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 81);
		TraceIn("shiftExpression", 81);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shiftExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT430 = default(IToken);
		IToken LT432 = default(IToken);
		AstParserRuleReturnScope<object, IToken> additiveExpression429 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> shiftOperator431 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> additiveExpression433 = default(AstParserRuleReturnScope<object, IToken>);

		object LT430_tree = default(object);
		object LT432_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(450, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// JavaScript.g3:451:2: ( additiveExpression ( ( LT !)* shiftOperator ^ ( LT !)* additiveExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g3:451:4: additiveExpression ( ( LT !)* shiftOperator ^ ( LT !)* additiveExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(451, 4);
			PushFollow(Follow._additiveExpression_in_shiftExpression3071);
			additiveExpression429=additiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression429.Tree);
			DebugLocation(451, 23);
			// JavaScript.g3:451:23: ( ( LT !)* shiftOperator ^ ( LT !)* additiveExpression )*
			try { DebugEnterSubRule(216);
			while (true)
			{
				int alt216=2;
				try { DebugEnterDecision(216, false);
				try
				{
					alt216 = dfa216.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(216); }
				switch ( alt216 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:451:24: ( LT !)* shiftOperator ^ ( LT !)* additiveExpression
					{
					DebugLocation(451, 26);
					// JavaScript.g3:451:26: ( LT !)*
					try { DebugEnterSubRule(214);
					while (true)
					{
						int alt214=2;
						try { DebugEnterDecision(214, false);
						int LA214_1 = input.LA(1);

						if ((LA214_1==LT))
						{
							alt214 = 1;
						}


						} finally { DebugExitDecision(214); }
						switch ( alt214 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:451:26: LT !
							{
							DebugLocation(451, 26);
							LT430=(IToken)Match(input,LT,Follow._LT_in_shiftExpression3074); if (state.failed) return retval;

							}
							break;

						default:
							goto loop214;
						}
					}

					loop214:
						;

					} finally { DebugExitSubRule(214); }

					DebugLocation(451, 42);
					PushFollow(Follow._shiftOperator_in_shiftExpression3078);
					shiftOperator431=shiftOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(shiftOperator431.Tree, root_0);
					DebugLocation(451, 46);
					// JavaScript.g3:451:46: ( LT !)*
					try { DebugEnterSubRule(215);
					while (true)
					{
						int alt215=2;
						try { DebugEnterDecision(215, false);
						int LA215_1 = input.LA(1);

						if ((LA215_1==LT))
						{
							alt215 = 1;
						}


						} finally { DebugExitDecision(215); }
						switch ( alt215 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:451:46: LT !
							{
							DebugLocation(451, 46);
							LT432=(IToken)Match(input,LT,Follow._LT_in_shiftExpression3081); if (state.failed) return retval;

							}
							break;

						default:
							goto loop215;
						}
					}

					loop215:
						;

					} finally { DebugExitSubRule(215); }

					DebugLocation(451, 49);
					PushFollow(Follow._additiveExpression_in_shiftExpression3085);
					additiveExpression433=additiveExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression433.Tree);

					}
					break;

				default:
					goto loop216;
				}
			}

			loop216:
				;

			} finally { DebugExitSubRule(216); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 81);
			LeaveRule("shiftExpression", 81);
			LeaveRule_shiftExpression();
			if (state.backtracking > 0) { Memoize(input, 81, shiftExpression_StartIndex); }

		}
		DebugLocation(452, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_shiftOperator();
	partial void LeaveRule_shiftOperator();
	// $ANTLR start "shiftOperator"
	// JavaScript.g3:454:1: shiftOperator : ( '<<' -> ^( OPERATOR '<<' ) | '>>' -> ^( OPERATOR '>>' ) | '>>>' -> ^( OPERATOR '>>>' ) );
	[GrammarRule("shiftOperator")]
	private AstParserRuleReturnScope<object, IToken> shiftOperator()
	{
		EnterRule_shiftOperator();
		EnterRule("shiftOperator", 82);
		TraceIn("shiftOperator", 82);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shiftOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal434 = default(IToken);
		IToken string_literal435 = default(IToken);
		IToken string_literal436 = default(IToken);

		object string_literal434_tree = default(object);
		object string_literal435_tree = default(object);
		object string_literal436_tree = default(object);
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		try { DebugEnterRule(GrammarFileName, "shiftOperator");
		DebugLocation(454, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// JavaScript.g3:455:2: ( '<<' -> ^( OPERATOR '<<' ) | '>>' -> ^( OPERATOR '>>' ) | '>>>' -> ^( OPERATOR '>>>' ) )
			int alt217=3;
			try { DebugEnterDecision(217, false);
			switch (input.LA(1))
			{
			case 104:
				{
				alt217 = 1;
				}
				break;
			case 112:
				{
				alt217 = 2;
				}
				break;
			case 114:
				{
				alt217 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 217, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(217); }
			switch (alt217)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:455:4: '<<'
				{
				DebugLocation(455, 4);
				string_literal434=(IToken)Match(input,104,Follow._104_in_shiftOperator3098); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_104.Add(string_literal434);



				{
				// AST REWRITE
				// elements: 104
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 455:9: -> ^( OPERATOR '<<' )
				{
					DebugLocation(455, 12);
					// JavaScript.g3:455:12: ^( OPERATOR '<<' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(455, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(455, 23);
					adaptor.AddChild(root_1, stream_104.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:456:4: '>>'
				{
				DebugLocation(456, 4);
				string_literal435=(IToken)Match(input,112,Follow._112_in_shiftOperator3111); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_112.Add(string_literal435);



				{
				// AST REWRITE
				// elements: 112
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 456:9: -> ^( OPERATOR '>>' )
				{
					DebugLocation(456, 12);
					// JavaScript.g3:456:12: ^( OPERATOR '>>' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(456, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(456, 23);
					adaptor.AddChild(root_1, stream_112.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g3:457:4: '>>>'
				{
				DebugLocation(457, 4);
				string_literal436=(IToken)Match(input,114,Follow._114_in_shiftOperator3124); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(string_literal436);



				{
				// AST REWRITE
				// elements: 114
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 457:10: -> ^( OPERATOR '>>>' )
				{
					DebugLocation(457, 13);
					// JavaScript.g3:457:13: ^( OPERATOR '>>>' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(457, 15);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(457, 24);
					adaptor.AddChild(root_1, stream_114.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftOperator", 82);
			LeaveRule("shiftOperator", 82);
			LeaveRule_shiftOperator();
			if (state.backtracking > 0) { Memoize(input, 82, shiftOperator_StartIndex); }

		}
		DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftOperator"); }
		return retval;

	}
	// $ANTLR end "shiftOperator"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// JavaScript.g3:460:1: additiveExpression : multiplicativeExpression ( ( LT !)* additiveOperator ^ ( LT !)* multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<object, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 83);
		TraceIn("additiveExpression", 83);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int additiveExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT438 = default(IToken);
		IToken LT440 = default(IToken);
		AstParserRuleReturnScope<object, IToken> multiplicativeExpression437 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> additiveOperator439 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> multiplicativeExpression441 = default(AstParserRuleReturnScope<object, IToken>);

		object LT438_tree = default(object);
		object LT440_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(460, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// JavaScript.g3:461:2: ( multiplicativeExpression ( ( LT !)* additiveOperator ^ ( LT !)* multiplicativeExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g3:461:4: multiplicativeExpression ( ( LT !)* additiveOperator ^ ( LT !)* multiplicativeExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(461, 4);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression3143);
			multiplicativeExpression437=multiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression437.Tree);
			DebugLocation(461, 29);
			// JavaScript.g3:461:29: ( ( LT !)* additiveOperator ^ ( LT !)* multiplicativeExpression )*
			try { DebugEnterSubRule(220);
			while (true)
			{
				int alt220=2;
				try { DebugEnterDecision(220, false);
				int LA220_1 = input.LA(1);

				if ((LA220_1==LT))
				{
					int LA220_2 = input.LA(2);

					if ((EvaluatePredicate(synpred256_JavaScript_fragment)))
					{
						alt220 = 1;
					}


				}
				else if ((LA220_1==91||LA220_1==95))
				{
					alt220 = 1;
				}


				} finally { DebugExitDecision(220); }
				switch ( alt220 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:461:30: ( LT !)* additiveOperator ^ ( LT !)* multiplicativeExpression
					{
					DebugLocation(461, 32);
					// JavaScript.g3:461:32: ( LT !)*
					try { DebugEnterSubRule(218);
					while (true)
					{
						int alt218=2;
						try { DebugEnterDecision(218, false);
						int LA218_1 = input.LA(1);

						if ((LA218_1==LT))
						{
							alt218 = 1;
						}


						} finally { DebugExitDecision(218); }
						switch ( alt218 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:461:32: LT !
							{
							DebugLocation(461, 32);
							LT438=(IToken)Match(input,LT,Follow._LT_in_additiveExpression3146); if (state.failed) return retval;

							}
							break;

						default:
							goto loop218;
						}
					}

					loop218:
						;

					} finally { DebugExitSubRule(218); }

					DebugLocation(461, 51);
					PushFollow(Follow._additiveOperator_in_additiveExpression3150);
					additiveOperator439=additiveOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(additiveOperator439.Tree, root_0);
					DebugLocation(461, 55);
					// JavaScript.g3:461:55: ( LT !)*
					try { DebugEnterSubRule(219);
					while (true)
					{
						int alt219=2;
						try { DebugEnterDecision(219, false);
						int LA219_1 = input.LA(1);

						if ((LA219_1==LT))
						{
							alt219 = 1;
						}


						} finally { DebugExitDecision(219); }
						switch ( alt219 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:461:55: LT !
							{
							DebugLocation(461, 55);
							LT440=(IToken)Match(input,LT,Follow._LT_in_additiveExpression3153); if (state.failed) return retval;

							}
							break;

						default:
							goto loop219;
						}
					}

					loop219:
						;

					} finally { DebugExitSubRule(219); }

					DebugLocation(461, 58);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression3157);
					multiplicativeExpression441=multiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression441.Tree);

					}
					break;

				default:
					goto loop220;
				}
			}

			loop220:
				;

			} finally { DebugExitSubRule(220); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 83);
			LeaveRule("additiveExpression", 83);
			LeaveRule_additiveExpression();
			if (state.backtracking > 0) { Memoize(input, 83, additiveExpression_StartIndex); }

		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_additiveOperator();
	partial void LeaveRule_additiveOperator();
	// $ANTLR start "additiveOperator"
	// JavaScript.g3:464:1: additiveOperator : ( '+' -> ^( OPERATOR '+' ) | '-' -> ^( OPERATOR '-' ) );
	[GrammarRule("additiveOperator")]
	private AstParserRuleReturnScope<object, IToken> additiveOperator()
	{
		EnterRule_additiveOperator();
		EnterRule("additiveOperator", 84);
		TraceIn("additiveOperator", 84);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int additiveOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal442 = default(IToken);
		IToken char_literal443 = default(IToken);

		object char_literal442_tree = default(object);
		object char_literal443_tree = default(object);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		try { DebugEnterRule(GrammarFileName, "additiveOperator");
		DebugLocation(464, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// JavaScript.g3:465:2: ( '+' -> ^( OPERATOR '+' ) | '-' -> ^( OPERATOR '-' ) )
			int alt221=2;
			try { DebugEnterDecision(221, false);
			int LA221_1 = input.LA(1);

			if ((LA221_1==91))
			{
				alt221 = 1;
			}
			else if ((LA221_1==95))
			{
				alt221 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 221, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(221); }
			switch (alt221)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:465:4: '+'
				{
				DebugLocation(465, 4);
				char_literal442=(IToken)Match(input,91,Follow._91_in_additiveOperator3170); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal442);



				{
				// AST REWRITE
				// elements: 91
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 465:8: -> ^( OPERATOR '+' )
				{
					DebugLocation(465, 11);
					// JavaScript.g3:465:11: ^( OPERATOR '+' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(465, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(465, 22);
					adaptor.AddChild(root_1, stream_91.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:466:4: '-'
				{
				DebugLocation(466, 4);
				char_literal443=(IToken)Match(input,95,Follow._95_in_additiveOperator3183); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_95.Add(char_literal443);



				{
				// AST REWRITE
				// elements: 95
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 466:8: -> ^( OPERATOR '-' )
				{
					DebugLocation(466, 11);
					// JavaScript.g3:466:11: ^( OPERATOR '-' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(466, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(466, 22);
					adaptor.AddChild(root_1, stream_95.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveOperator", 84);
			LeaveRule("additiveOperator", 84);
			LeaveRule_additiveOperator();
			if (state.backtracking > 0) { Memoize(input, 84, additiveOperator_StartIndex); }

		}
		DebugLocation(467, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveOperator"); }
		return retval;

	}
	// $ANTLR end "additiveOperator"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();
	// $ANTLR start "multiplicativeExpression"
	// JavaScript.g3:469:1: multiplicativeExpression : unaryExpression ( ( LT !)* multiplicativeOperator ^ ( LT !)* unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<object, IToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 85);
		TraceIn("multiplicativeExpression", 85);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int multiplicativeExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT445 = default(IToken);
		IToken LT447 = default(IToken);
		AstParserRuleReturnScope<object, IToken> unaryExpression444 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> multiplicativeOperator446 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression448 = default(AstParserRuleReturnScope<object, IToken>);

		object LT445_tree = default(object);
		object LT447_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(469, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// JavaScript.g3:470:2: ( unaryExpression ( ( LT !)* multiplicativeOperator ^ ( LT !)* unaryExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g3:470:4: unaryExpression ( ( LT !)* multiplicativeOperator ^ ( LT !)* unaryExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(470, 4);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression3202);
			unaryExpression444=unaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression444.Tree);
			DebugLocation(470, 20);
			// JavaScript.g3:470:20: ( ( LT !)* multiplicativeOperator ^ ( LT !)* unaryExpression )*
			try { DebugEnterSubRule(224);
			while (true)
			{
				int alt224=2;
				try { DebugEnterDecision(224, false);
				try
				{
					alt224 = dfa224.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(224); }
				switch ( alt224 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:470:21: ( LT !)* multiplicativeOperator ^ ( LT !)* unaryExpression
					{
					DebugLocation(470, 23);
					// JavaScript.g3:470:23: ( LT !)*
					try { DebugEnterSubRule(222);
					while (true)
					{
						int alt222=2;
						try { DebugEnterDecision(222, false);
						int LA222_1 = input.LA(1);

						if ((LA222_1==LT))
						{
							alt222 = 1;
						}


						} finally { DebugExitDecision(222); }
						switch ( alt222 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:470:23: LT !
							{
							DebugLocation(470, 23);
							LT445=(IToken)Match(input,LT,Follow._LT_in_multiplicativeExpression3205); if (state.failed) return retval;

							}
							break;

						default:
							goto loop222;
						}
					}

					loop222:
						;

					} finally { DebugExitSubRule(222); }

					DebugLocation(470, 48);
					PushFollow(Follow._multiplicativeOperator_in_multiplicativeExpression3209);
					multiplicativeOperator446=multiplicativeOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(multiplicativeOperator446.Tree, root_0);
					DebugLocation(470, 52);
					// JavaScript.g3:470:52: ( LT !)*
					try { DebugEnterSubRule(223);
					while (true)
					{
						int alt223=2;
						try { DebugEnterDecision(223, false);
						int LA223_1 = input.LA(1);

						if ((LA223_1==LT))
						{
							alt223 = 1;
						}


						} finally { DebugExitDecision(223); }
						switch ( alt223 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:470:52: LT !
							{
							DebugLocation(470, 52);
							LT447=(IToken)Match(input,LT,Follow._LT_in_multiplicativeExpression3212); if (state.failed) return retval;

							}
							break;

						default:
							goto loop223;
						}
					}

					loop223:
						;

					} finally { DebugExitSubRule(223); }

					DebugLocation(470, 55);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression3216);
					unaryExpression448=unaryExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression448.Tree);

					}
					break;

				default:
					goto loop224;
				}
			}

			loop224:
				;

			} finally { DebugExitSubRule(224); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 85);
			LeaveRule("multiplicativeExpression", 85);
			LeaveRule_multiplicativeExpression();
			if (state.backtracking > 0) { Memoize(input, 85, multiplicativeExpression_StartIndex); }

		}
		DebugLocation(471, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_multiplicativeOperator();
	partial void LeaveRule_multiplicativeOperator();
	// $ANTLR start "multiplicativeOperator"
	// JavaScript.g3:473:1: multiplicativeOperator : ( '*' -> ^( OPERATOR '+' ) | '/' -> ^( OPERATOR '-' ) | '%' -> ^( OPERATOR '%' ) );
	[GrammarRule("multiplicativeOperator")]
	private AstParserRuleReturnScope<object, IToken> multiplicativeOperator()
	{
		EnterRule_multiplicativeOperator();
		EnterRule("multiplicativeOperator", 86);
		TraceIn("multiplicativeOperator", 86);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int multiplicativeOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal449 = default(IToken);
		IToken char_literal450 = default(IToken);
		IToken char_literal451 = default(IToken);

		object char_literal449_tree = default(object);
		object char_literal450_tree = default(object);
		object char_literal451_tree = default(object);
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		try { DebugEnterRule(GrammarFileName, "multiplicativeOperator");
		DebugLocation(473, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// JavaScript.g3:474:2: ( '*' -> ^( OPERATOR '+' ) | '/' -> ^( OPERATOR '-' ) | '%' -> ^( OPERATOR '%' ) )
			int alt225=3;
			try { DebugEnterDecision(225, false);
			switch (input.LA(1))
			{
			case 89:
				{
				alt225 = 1;
				}
				break;
			case 99:
				{
				alt225 = 2;
				}
				break;
			case 82:
				{
				alt225 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 225, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(225); }
			switch (alt225)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:474:4: '*'
				{
				DebugLocation(474, 4);
				char_literal449=(IToken)Match(input,89,Follow._89_in_multiplicativeOperator3229); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_89.Add(char_literal449);



				{
				// AST REWRITE
				// elements: 91
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 474:8: -> ^( OPERATOR '+' )
				{
					DebugLocation(474, 11);
					// JavaScript.g3:474:11: ^( OPERATOR '+' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(474, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(474, 22);
					adaptor.AddChild(root_1, (object)adaptor.Create(91, "91"));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:475:4: '/'
				{
				DebugLocation(475, 4);
				char_literal450=(IToken)Match(input,99,Follow._99_in_multiplicativeOperator3242); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_99.Add(char_literal450);



				{
				// AST REWRITE
				// elements: 95
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 475:8: -> ^( OPERATOR '-' )
				{
					DebugLocation(475, 11);
					// JavaScript.g3:475:11: ^( OPERATOR '-' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(475, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(475, 22);
					adaptor.AddChild(root_1, (object)adaptor.Create(95, "95"));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g3:476:4: '%'
				{
				DebugLocation(476, 4);
				char_literal451=(IToken)Match(input,82,Follow._82_in_multiplicativeOperator3255); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_82.Add(char_literal451);



				{
				// AST REWRITE
				// elements: 82
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 476:8: -> ^( OPERATOR '%' )
				{
					DebugLocation(476, 11);
					// JavaScript.g3:476:11: ^( OPERATOR '%' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(476, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(476, 22);
					adaptor.AddChild(root_1, stream_82.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeOperator", 86);
			LeaveRule("multiplicativeOperator", 86);
			LeaveRule_multiplicativeOperator();
			if (state.backtracking > 0) { Memoize(input, 86, multiplicativeOperator_StartIndex); }

		}
		DebugLocation(477, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeOperator"); }
		return retval;

	}
	// $ANTLR end "multiplicativeOperator"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();
	// $ANTLR start "unaryExpression"
	// JavaScript.g3:479:1: unaryExpression : ( postfixExpression | unaryOperator ^ unaryExpression );
	[GrammarRule("unaryExpression")]
	private AstParserRuleReturnScope<object, IToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 87);
		TraceIn("unaryExpression", 87);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryExpression_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> postfixExpression452 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryOperator453 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression454 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(479, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// JavaScript.g3:480:2: ( postfixExpression | unaryOperator ^ unaryExpression )
			int alt226=2;
			try { DebugEnterDecision(226, false);
			int LA226_1 = input.LA(1);

			if ((LA226_1==Identifier||LA226_1==NumericLiteral||LA226_1==RegularExpressionLiteral||LA226_1==StringLiteral||LA226_1==87||LA226_1==117||LA226_1==130||LA226_1==133||(LA226_1>=137 && LA226_1<=138)||LA226_1==141||LA226_1==143||LA226_1==150))
			{
				alt226 = 1;
			}
			else if ((LA226_1==79||(LA226_1>=91 && LA226_1<=92)||(LA226_1>=95 && LA226_1<=96)||LA226_1==127||LA226_1==145||LA226_1==147||LA226_1==155))
			{
				alt226 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 226, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(226); }
			switch (alt226)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:480:4: postfixExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(480, 4);
				PushFollow(Follow._postfixExpression_in_unaryExpression3274);
				postfixExpression452=postfixExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfixExpression452.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:481:4: unaryOperator ^ unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(481, 17);
				PushFollow(Follow._unaryOperator_in_unaryExpression3279);
				unaryOperator453=unaryOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(unaryOperator453.Tree, root_0);
				DebugLocation(481, 19);
				PushFollow(Follow._unaryExpression_in_unaryExpression3282);
				unaryExpression454=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression454.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 87);
			LeaveRule("unaryExpression", 87);
			LeaveRule_unaryExpression();
			if (state.backtracking > 0) { Memoize(input, 87, unaryExpression_StartIndex); }

		}
		DebugLocation(482, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_unaryOperator();
	partial void LeaveRule_unaryOperator();
	// $ANTLR start "unaryOperator"
	// JavaScript.g3:484:1: unaryOperator : ( 'delete' -> ^( OPERATOR 'delete' ) | 'void' -> ^( OPERATOR 'void' ) | 'typeof' -> ^( OPERATOR 'typeof' ) | '++' -> ^( OPERATOR '++' ) | '--' -> ^( OPERATOR '--' ) | '+' -> ^( OPERATOR '+' ) | '-' -> ^( OPERATOR '-' ) | '~' -> ^( OPERATOR '~' ) | '!' -> ^( OPERATOR '!' ) );
	[GrammarRule("unaryOperator")]
	private AstParserRuleReturnScope<object, IToken> unaryOperator()
	{
		EnterRule_unaryOperator();
		EnterRule("unaryOperator", 88);
		TraceIn("unaryOperator", 88);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal455 = default(IToken);
		IToken string_literal456 = default(IToken);
		IToken string_literal457 = default(IToken);
		IToken string_literal458 = default(IToken);
		IToken string_literal459 = default(IToken);
		IToken char_literal460 = default(IToken);
		IToken char_literal461 = default(IToken);
		IToken char_literal462 = default(IToken);
		IToken char_literal463 = default(IToken);

		object string_literal455_tree = default(object);
		object string_literal456_tree = default(object);
		object string_literal457_tree = default(object);
		object string_literal458_tree = default(object);
		object string_literal459_tree = default(object);
		object char_literal460_tree = default(object);
		object char_literal461_tree = default(object);
		object char_literal462_tree = default(object);
		object char_literal463_tree = default(object);
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		try { DebugEnterRule(GrammarFileName, "unaryOperator");
		DebugLocation(484, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }

			// JavaScript.g3:485:2: ( 'delete' -> ^( OPERATOR 'delete' ) | 'void' -> ^( OPERATOR 'void' ) | 'typeof' -> ^( OPERATOR 'typeof' ) | '++' -> ^( OPERATOR '++' ) | '--' -> ^( OPERATOR '--' ) | '+' -> ^( OPERATOR '+' ) | '-' -> ^( OPERATOR '-' ) | '~' -> ^( OPERATOR '~' ) | '!' -> ^( OPERATOR '!' ) )
			int alt227=9;
			try { DebugEnterDecision(227, false);
			switch (input.LA(1))
			{
			case 127:
				{
				alt227 = 1;
				}
				break;
			case 147:
				{
				alt227 = 2;
				}
				break;
			case 145:
				{
				alt227 = 3;
				}
				break;
			case 92:
				{
				alt227 = 4;
				}
				break;
			case 96:
				{
				alt227 = 5;
				}
				break;
			case 91:
				{
				alt227 = 6;
				}
				break;
			case 95:
				{
				alt227 = 7;
				}
				break;
			case 155:
				{
				alt227 = 8;
				}
				break;
			case 79:
				{
				alt227 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 227, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(227); }
			switch (alt227)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:485:4: 'delete'
				{
				DebugLocation(485, 4);
				string_literal455=(IToken)Match(input,127,Follow._127_in_unaryOperator3293); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_127.Add(string_literal455);



				{
				// AST REWRITE
				// elements: 127
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 485:13: -> ^( OPERATOR 'delete' )
				{
					DebugLocation(485, 16);
					// JavaScript.g3:485:16: ^( OPERATOR 'delete' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(485, 18);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(485, 27);
					adaptor.AddChild(root_1, stream_127.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:486:4: 'void'
				{
				DebugLocation(486, 4);
				string_literal456=(IToken)Match(input,147,Follow._147_in_unaryOperator3306); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_147.Add(string_literal456);



				{
				// AST REWRITE
				// elements: 147
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 486:11: -> ^( OPERATOR 'void' )
				{
					DebugLocation(486, 14);
					// JavaScript.g3:486:14: ^( OPERATOR 'void' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(486, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(486, 25);
					adaptor.AddChild(root_1, stream_147.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g3:487:4: 'typeof'
				{
				DebugLocation(487, 4);
				string_literal457=(IToken)Match(input,145,Follow._145_in_unaryOperator3319); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_145.Add(string_literal457);



				{
				// AST REWRITE
				// elements: 145
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 487:13: -> ^( OPERATOR 'typeof' )
				{
					DebugLocation(487, 16);
					// JavaScript.g3:487:16: ^( OPERATOR 'typeof' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(487, 18);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(487, 27);
					adaptor.AddChild(root_1, stream_145.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaScript.g3:488:4: '++'
				{
				DebugLocation(488, 4);
				string_literal458=(IToken)Match(input,92,Follow._92_in_unaryOperator3332); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(string_literal458);



				{
				// AST REWRITE
				// elements: 92
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 488:9: -> ^( OPERATOR '++' )
				{
					DebugLocation(488, 12);
					// JavaScript.g3:488:12: ^( OPERATOR '++' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(488, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(488, 23);
					adaptor.AddChild(root_1, stream_92.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaScript.g3:489:4: '--'
				{
				DebugLocation(489, 4);
				string_literal459=(IToken)Match(input,96,Follow._96_in_unaryOperator3345); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_96.Add(string_literal459);



				{
				// AST REWRITE
				// elements: 96
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 489:9: -> ^( OPERATOR '--' )
				{
					DebugLocation(489, 12);
					// JavaScript.g3:489:12: ^( OPERATOR '--' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(489, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(489, 23);
					adaptor.AddChild(root_1, stream_96.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// JavaScript.g3:490:4: '+'
				{
				DebugLocation(490, 4);
				char_literal460=(IToken)Match(input,91,Follow._91_in_unaryOperator3358); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal460);



				{
				// AST REWRITE
				// elements: 91
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 490:8: -> ^( OPERATOR '+' )
				{
					DebugLocation(490, 11);
					// JavaScript.g3:490:11: ^( OPERATOR '+' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(490, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(490, 22);
					adaptor.AddChild(root_1, stream_91.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// JavaScript.g3:491:4: '-'
				{
				DebugLocation(491, 4);
				char_literal461=(IToken)Match(input,95,Follow._95_in_unaryOperator3371); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_95.Add(char_literal461);



				{
				// AST REWRITE
				// elements: 95
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 491:8: -> ^( OPERATOR '-' )
				{
					DebugLocation(491, 11);
					// JavaScript.g3:491:11: ^( OPERATOR '-' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(491, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(491, 22);
					adaptor.AddChild(root_1, stream_95.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// JavaScript.g3:492:4: '~'
				{
				DebugLocation(492, 4);
				char_literal462=(IToken)Match(input,155,Follow._155_in_unaryOperator3384); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_155.Add(char_literal462);



				{
				// AST REWRITE
				// elements: 155
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 492:8: -> ^( OPERATOR '~' )
				{
					DebugLocation(492, 11);
					// JavaScript.g3:492:11: ^( OPERATOR '~' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(492, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(492, 22);
					adaptor.AddChild(root_1, stream_155.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// JavaScript.g3:493:4: '!'
				{
				DebugLocation(493, 4);
				char_literal463=(IToken)Match(input,79,Follow._79_in_unaryOperator3397); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_79.Add(char_literal463);



				{
				// AST REWRITE
				// elements: 79
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 493:7: -> ^( OPERATOR '!' )
				{
					DebugLocation(493, 10);
					// JavaScript.g3:493:10: ^( OPERATOR '!' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(493, 12);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(493, 21);
					adaptor.AddChild(root_1, stream_79.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryOperator", 88);
			LeaveRule("unaryOperator", 88);
			LeaveRule_unaryOperator();
			if (state.backtracking > 0) { Memoize(input, 88, unaryOperator_StartIndex); }

		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryOperator"); }
		return retval;

	}
	// $ANTLR end "unaryOperator"

	partial void EnterRule_postfixExpression();
	partial void LeaveRule_postfixExpression();
	// $ANTLR start "postfixExpression"
	// JavaScript.g3:496:1: postfixExpression : ( leftHandSideExpression ^ postfixOperator | leftHandSideExpression );
	[GrammarRule("postfixExpression")]
	private AstParserRuleReturnScope<object, IToken> postfixExpression()
	{
		EnterRule_postfixExpression();
		EnterRule("postfixExpression", 89);
		TraceIn("postfixExpression", 89);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int postfixExpression_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> leftHandSideExpression464 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> postfixOperator465 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> leftHandSideExpression466 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "postfixExpression");
		DebugLocation(496, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }

			// JavaScript.g3:497:2: ( leftHandSideExpression ^ postfixOperator | leftHandSideExpression )
			int alt228=2;
			try { DebugEnterDecision(228, false);
			switch (input.LA(1))
			{
			case 141:
				{
				int LA228_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_JavaScript_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA228_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_JavaScript_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 138:
				{
				int LA228_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_JavaScript_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 143:
				{
				int LA228_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_JavaScript_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA228_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_JavaScript_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NumericLiteral:
				{
				int LA228_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_JavaScript_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case StringLiteral:
				{
				int LA228_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_JavaScript_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RegularExpressionLiteral:
				{
				int LA228_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_JavaScript_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 117:
				{
				int LA228_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_JavaScript_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 150:
				{
				int LA228_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_JavaScript_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 87:
				{
				int LA228_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_JavaScript_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 133:
				{
				int LA228_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_JavaScript_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 137:
				{
				int LA228_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_JavaScript_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(228); }
			switch (alt228)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:497:4: leftHandSideExpression ^ postfixOperator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(497, 26);
				PushFollow(Follow._leftHandSideExpression_in_postfixExpression3415);
				leftHandSideExpression464=leftHandSideExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(leftHandSideExpression464.Tree, root_0);
				DebugLocation(497, 28);
				PushFollow(Follow._postfixOperator_in_postfixExpression3418);
				postfixOperator465=postfixOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfixOperator465.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:498:4: leftHandSideExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(498, 4);
				PushFollow(Follow._leftHandSideExpression_in_postfixExpression3423);
				leftHandSideExpression466=leftHandSideExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, leftHandSideExpression466.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfixExpression", 89);
			LeaveRule("postfixExpression", 89);
			LeaveRule_postfixExpression();
			if (state.backtracking > 0) { Memoize(input, 89, postfixExpression_StartIndex); }

		}
		DebugLocation(499, 1);
		} finally { DebugExitRule(GrammarFileName, "postfixExpression"); }
		return retval;

	}
	// $ANTLR end "postfixExpression"

	partial void EnterRule_postfixOperator();
	partial void LeaveRule_postfixOperator();
	// $ANTLR start "postfixOperator"
	// JavaScript.g3:501:1: postfixOperator : ( '++' -> ^( OPERATOR '++' ) | '--' -> ^( OPERATOR '--' ) );
	[GrammarRule("postfixOperator")]
	private AstParserRuleReturnScope<object, IToken> postfixOperator()
	{
		EnterRule_postfixOperator();
		EnterRule("postfixOperator", 90);
		TraceIn("postfixOperator", 90);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int postfixOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal467 = default(IToken);
		IToken string_literal468 = default(IToken);

		object string_literal467_tree = default(object);
		object string_literal468_tree = default(object);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		try { DebugEnterRule(GrammarFileName, "postfixOperator");
		DebugLocation(501, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }

			// JavaScript.g3:502:2: ( '++' -> ^( OPERATOR '++' ) | '--' -> ^( OPERATOR '--' ) )
			int alt229=2;
			try { DebugEnterDecision(229, false);
			int LA229_1 = input.LA(1);

			if ((LA229_1==92))
			{
				alt229 = 1;
			}
			else if ((LA229_1==96))
			{
				alt229 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 229, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(229); }
			switch (alt229)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:502:4: '++'
				{
				DebugLocation(502, 4);
				string_literal467=(IToken)Match(input,92,Follow._92_in_postfixOperator3434); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(string_literal467);



				{
				// AST REWRITE
				// elements: 92
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 502:9: -> ^( OPERATOR '++' )
				{
					DebugLocation(502, 12);
					// JavaScript.g3:502:12: ^( OPERATOR '++' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(502, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(502, 23);
					adaptor.AddChild(root_1, stream_92.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:503:4: '--'
				{
				DebugLocation(503, 4);
				string_literal468=(IToken)Match(input,96,Follow._96_in_postfixOperator3447); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_96.Add(string_literal468);



				{
				// AST REWRITE
				// elements: 96
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 503:9: -> ^( OPERATOR '--' )
				{
					DebugLocation(503, 12);
					// JavaScript.g3:503:12: ^( OPERATOR '--' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(503, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_1);

					DebugLocation(503, 23);
					adaptor.AddChild(root_1, stream_96.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfixOperator", 90);
			LeaveRule("postfixOperator", 90);
			LeaveRule_postfixOperator();
			if (state.backtracking > 0) { Memoize(input, 90, postfixOperator_StartIndex); }

		}
		DebugLocation(504, 1);
		} finally { DebugExitRule(GrammarFileName, "postfixOperator"); }
		return retval;

	}
	// $ANTLR end "postfixOperator"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();
	// $ANTLR start "primaryExpression"
	// JavaScript.g3:506:1: primaryExpression : ( 'this' | Identifier -> ^( IDENTIFIER Identifier ) | literal | arrayLiteral | objectLiteral | '(' ! ( LT !)* expression ( LT !)* ')' !);
	[GrammarRule("primaryExpression")]
	private AstParserRuleReturnScope<object, IToken> primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 91);
		TraceIn("primaryExpression", 91);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primaryExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal469 = default(IToken);
		IToken Identifier470 = default(IToken);
		IToken char_literal474 = default(IToken);
		IToken LT475 = default(IToken);
		IToken LT477 = default(IToken);
		IToken char_literal478 = default(IToken);
		AstParserRuleReturnScope<object, IToken> literal471 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayLiteral472 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> objectLiteral473 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression476 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal469_tree = default(object);
		object Identifier470_tree = default(object);
		object char_literal474_tree = default(object);
		object LT475_tree = default(object);
		object LT477_tree = default(object);
		object char_literal478_tree = default(object);
		RewriteRuleITokenStream stream_Identifier=new RewriteRuleITokenStream(adaptor,"token Identifier");
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(506, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }

			// JavaScript.g3:507:2: ( 'this' | Identifier -> ^( IDENTIFIER Identifier ) | literal | arrayLiteral | objectLiteral | '(' ! ( LT !)* expression ( LT !)* ')' !)
			int alt232=6;
			try { DebugEnterDecision(232, false);
			switch (input.LA(1))
			{
			case 141:
				{
				alt232 = 1;
				}
				break;
			case Identifier:
				{
				alt232 = 2;
				}
				break;
			case NumericLiteral:
			case RegularExpressionLiteral:
			case StringLiteral:
			case 130:
			case 138:
			case 143:
				{
				alt232 = 3;
				}
				break;
			case 117:
				{
				alt232 = 4;
				}
				break;
			case 150:
				{
				alt232 = 5;
				}
				break;
			case 87:
				{
				alt232 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 232, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(232); }
			switch (alt232)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:507:4: 'this'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(507, 4);
				string_literal469=(IToken)Match(input,141,Follow._141_in_primaryExpression3466); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal469_tree = (object)adaptor.Create(string_literal469);
				adaptor.AddChild(root_0, string_literal469_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:508:4: Identifier
				{
				DebugLocation(508, 4);
				Identifier470=(IToken)Match(input,Identifier,Follow._Identifier_in_primaryExpression3471); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Identifier.Add(Identifier470);



				{
				// AST REWRITE
				// elements: Identifier
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 508:15: -> ^( IDENTIFIER Identifier )
				{
					DebugLocation(508, 18);
					// JavaScript.g3:508:18: ^( IDENTIFIER Identifier )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(508, 20);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_1);

					DebugLocation(508, 31);
					adaptor.AddChild(root_1, stream_Identifier.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g3:509:4: literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(509, 4);
				PushFollow(Follow._literal_in_primaryExpression3484);
				literal471=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal471.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaScript.g3:510:4: arrayLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(510, 4);
				PushFollow(Follow._arrayLiteral_in_primaryExpression3489);
				arrayLiteral472=arrayLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayLiteral472.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaScript.g3:511:4: objectLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(511, 4);
				PushFollow(Follow._objectLiteral_in_primaryExpression3494);
				objectLiteral473=objectLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objectLiteral473.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// JavaScript.g3:512:4: '(' ! ( LT !)* expression ( LT !)* ')' !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(512, 7);
				char_literal474=(IToken)Match(input,87,Follow._87_in_primaryExpression3499); if (state.failed) return retval;
				DebugLocation(512, 11);
				// JavaScript.g3:512:11: ( LT !)*
				try { DebugEnterSubRule(230);
				while (true)
				{
					int alt230=2;
					try { DebugEnterDecision(230, false);
					int LA230_1 = input.LA(1);

					if ((LA230_1==LT))
					{
						alt230 = 1;
					}


					} finally { DebugExitDecision(230); }
					switch ( alt230 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:512:11: LT !
						{
						DebugLocation(512, 11);
						LT475=(IToken)Match(input,LT,Follow._LT_in_primaryExpression3502); if (state.failed) return retval;

						}
						break;

					default:
						goto loop230;
					}
				}

				loop230:
					;

				} finally { DebugExitSubRule(230); }

				DebugLocation(512, 14);
				PushFollow(Follow._expression_in_primaryExpression3506);
				expression476=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression476.Tree);
				DebugLocation(512, 27);
				// JavaScript.g3:512:27: ( LT !)*
				try { DebugEnterSubRule(231);
				while (true)
				{
					int alt231=2;
					try { DebugEnterDecision(231, false);
					int LA231_1 = input.LA(1);

					if ((LA231_1==LT))
					{
						alt231 = 1;
					}


					} finally { DebugExitDecision(231); }
					switch ( alt231 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:512:27: LT !
						{
						DebugLocation(512, 27);
						LT477=(IToken)Match(input,LT,Follow._LT_in_primaryExpression3508); if (state.failed) return retval;

						}
						break;

					default:
						goto loop231;
					}
				}

				loop231:
					;

				} finally { DebugExitSubRule(231); }

				DebugLocation(512, 33);
				char_literal478=(IToken)Match(input,88,Follow._88_in_primaryExpression3512); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 91);
			LeaveRule("primaryExpression", 91);
			LeaveRule_primaryExpression();
			if (state.backtracking > 0) { Memoize(input, 91, primaryExpression_StartIndex); }

		}
		DebugLocation(513, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_arrayLiteral();
	partial void LeaveRule_arrayLiteral();
	// $ANTLR start "arrayLiteral"
	// JavaScript.g3:516:1: arrayLiteral : '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ']' -> ^( ARRAY ( assignmentExpression )* ) ;
	[GrammarRule("arrayLiteral")]
	private AstParserRuleReturnScope<object, IToken> arrayLiteral()
	{
		EnterRule_arrayLiteral();
		EnterRule("arrayLiteral", 92);
		TraceIn("arrayLiteral", 92);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal479 = default(IToken);
		IToken LT480 = default(IToken);
		IToken LT482 = default(IToken);
		IToken char_literal483 = default(IToken);
		IToken LT484 = default(IToken);
		IToken LT486 = default(IToken);
		IToken char_literal487 = default(IToken);
		AstParserRuleReturnScope<object, IToken> assignmentExpression481 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentExpression485 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal479_tree = default(object);
		object LT480_tree = default(object);
		object LT482_tree = default(object);
		object char_literal483_tree = default(object);
		object LT484_tree = default(object);
		object LT486_tree = default(object);
		object char_literal487_tree = default(object);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "arrayLiteral");
		DebugLocation(516, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return retval; }

			// JavaScript.g3:517:2: ( '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ']' -> ^( ARRAY ( assignmentExpression )* ) )
			DebugEnterAlt(1);
			// JavaScript.g3:517:4: '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ']'
			{
			DebugLocation(517, 4);
			char_literal479=(IToken)Match(input,117,Follow._117_in_arrayLiteral3525); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_117.Add(char_literal479);

			DebugLocation(517, 8);
			// JavaScript.g3:517:8: ( LT )*
			try { DebugEnterSubRule(233);
			while (true)
			{
				int alt233=2;
				try { DebugEnterDecision(233, false);
				int LA233_1 = input.LA(1);

				if ((LA233_1==LT))
				{
					int LA233_2 = input.LA(2);

					if ((EvaluatePredicate(synpred281_JavaScript_fragment)))
					{
						alt233 = 1;
					}


				}


				} finally { DebugExitDecision(233); }
				switch ( alt233 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:517:8: LT
					{
					DebugLocation(517, 8);
					LT480=(IToken)Match(input,LT,Follow._LT_in_arrayLiteral3527); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT480);


					}
					break;

				default:
					goto loop233;
				}
			}

			loop233:
				;

			} finally { DebugExitSubRule(233); }

			DebugLocation(517, 12);
			// JavaScript.g3:517:12: ( assignmentExpression )?
			int alt234=2;
			try { DebugEnterSubRule(234);
			try { DebugEnterDecision(234, false);
			int LA234_1 = input.LA(1);

			if ((LA234_1==Identifier||LA234_1==NumericLiteral||LA234_1==RegularExpressionLiteral||LA234_1==StringLiteral||LA234_1==79||LA234_1==87||(LA234_1>=91 && LA234_1<=92)||(LA234_1>=95 && LA234_1<=96)||LA234_1==117||LA234_1==127||LA234_1==130||LA234_1==133||(LA234_1>=137 && LA234_1<=138)||LA234_1==141||LA234_1==143||LA234_1==145||LA234_1==147||LA234_1==150||LA234_1==155))
			{
				alt234 = 1;
			}
			} finally { DebugExitDecision(234); }
			switch (alt234)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:517:12: assignmentExpression
				{
				DebugLocation(517, 12);
				PushFollow(Follow._assignmentExpression_in_arrayLiteral3530);
				assignmentExpression481=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression481.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(234); }

			DebugLocation(517, 34);
			// JavaScript.g3:517:34: ( ( LT )* ',' ( ( LT )* assignmentExpression )? )*
			try { DebugEnterSubRule(238);
			while (true)
			{
				int alt238=2;
				try { DebugEnterDecision(238, false);
				try
				{
					alt238 = dfa238.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(238); }
				switch ( alt238 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:517:35: ( LT )* ',' ( ( LT )* assignmentExpression )?
					{
					DebugLocation(517, 35);
					// JavaScript.g3:517:35: ( LT )*
					try { DebugEnterSubRule(235);
					while (true)
					{
						int alt235=2;
						try { DebugEnterDecision(235, false);
						int LA235_1 = input.LA(1);

						if ((LA235_1==LT))
						{
							alt235 = 1;
						}


						} finally { DebugExitDecision(235); }
						switch ( alt235 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:517:35: LT
							{
							DebugLocation(517, 35);
							LT482=(IToken)Match(input,LT,Follow._LT_in_arrayLiteral3534); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_LT.Add(LT482);


							}
							break;

						default:
							goto loop235;
						}
					}

					loop235:
						;

					} finally { DebugExitSubRule(235); }

					DebugLocation(517, 39);
					char_literal483=(IToken)Match(input,94,Follow._94_in_arrayLiteral3537); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal483);

					DebugLocation(517, 43);
					// JavaScript.g3:517:43: ( ( LT )* assignmentExpression )?
					int alt237=2;
					try { DebugEnterSubRule(237);
					try { DebugEnterDecision(237, false);
					try
					{
						alt237 = dfa237.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(237); }
					switch (alt237)
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g3:517:44: ( LT )* assignmentExpression
						{
						DebugLocation(517, 44);
						// JavaScript.g3:517:44: ( LT )*
						try { DebugEnterSubRule(236);
						while (true)
						{
							int alt236=2;
							try { DebugEnterDecision(236, false);
							int LA236_1 = input.LA(1);

							if ((LA236_1==LT))
							{
								alt236 = 1;
							}


							} finally { DebugExitDecision(236); }
							switch ( alt236 )
							{
							case 1:
								DebugEnterAlt(1);
								// JavaScript.g3:517:44: LT
								{
								DebugLocation(517, 44);
								LT484=(IToken)Match(input,LT,Follow._LT_in_arrayLiteral3540); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_LT.Add(LT484);


								}
								break;

							default:
								goto loop236;
							}
						}

						loop236:
							;

						} finally { DebugExitSubRule(236); }

						DebugLocation(517, 48);
						PushFollow(Follow._assignmentExpression_in_arrayLiteral3543);
						assignmentExpression485=assignmentExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression485.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(237); }


					}
					break;

				default:
					goto loop238;
				}
			}

			loop238:
				;

			} finally { DebugExitSubRule(238); }

			DebugLocation(517, 73);
			// JavaScript.g3:517:73: ( LT )*
			try { DebugEnterSubRule(239);
			while (true)
			{
				int alt239=2;
				try { DebugEnterDecision(239, false);
				int LA239_1 = input.LA(1);

				if ((LA239_1==LT))
				{
					alt239 = 1;
				}


				} finally { DebugExitDecision(239); }
				switch ( alt239 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:517:73: LT
					{
					DebugLocation(517, 73);
					LT486=(IToken)Match(input,LT,Follow._LT_in_arrayLiteral3549); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT486);


					}
					break;

				default:
					goto loop239;
				}
			}

			loop239:
				;

			} finally { DebugExitSubRule(239); }

			DebugLocation(517, 77);
			char_literal487=(IToken)Match(input,118,Follow._118_in_arrayLiteral3552); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_118.Add(char_literal487);



			{
			// AST REWRITE
			// elements: assignmentExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 517:81: -> ^( ARRAY ( assignmentExpression )* )
			{
				DebugLocation(517, 84);
				// JavaScript.g3:517:84: ^( ARRAY ( assignmentExpression )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(517, 86);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ARRAY, "ARRAY"), root_1);

				DebugLocation(517, 92);
				// JavaScript.g3:517:92: ( assignmentExpression )*
				while ( stream_assignmentExpression.HasNext )
				{
					DebugLocation(517, 92);
					adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				}
				stream_assignmentExpression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayLiteral", 92);
			LeaveRule("arrayLiteral", 92);
			LeaveRule_arrayLiteral();
			if (state.backtracking > 0) { Memoize(input, 92, arrayLiteral_StartIndex); }

		}
		DebugLocation(518, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayLiteral"); }
		return retval;

	}
	// $ANTLR end "arrayLiteral"

	partial void EnterRule_objectLiteral();
	partial void LeaveRule_objectLiteral();
	// $ANTLR start "objectLiteral"
	// JavaScript.g3:521:1: objectLiteral : '{' ( LT )* propertyNameAndValue ( ( LT )* ',' ( LT )* propertyNameAndValue )* ( LT )* '}' -> ^( OBJECT ( propertyNameAndValue )* ) ;
	[GrammarRule("objectLiteral")]
	private AstParserRuleReturnScope<object, IToken> objectLiteral()
	{
		EnterRule_objectLiteral();
		EnterRule("objectLiteral", 93);
		TraceIn("objectLiteral", 93);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int objectLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal488 = default(IToken);
		IToken LT489 = default(IToken);
		IToken LT491 = default(IToken);
		IToken char_literal492 = default(IToken);
		IToken LT493 = default(IToken);
		IToken LT495 = default(IToken);
		IToken char_literal496 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyNameAndValue490 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyNameAndValue494 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal488_tree = default(object);
		object LT489_tree = default(object);
		object LT491_tree = default(object);
		object char_literal492_tree = default(object);
		object LT493_tree = default(object);
		object LT495_tree = default(object);
		object char_literal496_tree = default(object);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_propertyNameAndValue=new RewriteRuleSubtreeStream(adaptor,"rule propertyNameAndValue");
		try { DebugEnterRule(GrammarFileName, "objectLiteral");
		DebugLocation(521, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return retval; }

			// JavaScript.g3:522:2: ( '{' ( LT )* propertyNameAndValue ( ( LT )* ',' ( LT )* propertyNameAndValue )* ( LT )* '}' -> ^( OBJECT ( propertyNameAndValue )* ) )
			DebugEnterAlt(1);
			// JavaScript.g3:522:4: '{' ( LT )* propertyNameAndValue ( ( LT )* ',' ( LT )* propertyNameAndValue )* ( LT )* '}'
			{
			DebugLocation(522, 4);
			char_literal488=(IToken)Match(input,150,Follow._150_in_objectLiteral3573); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_150.Add(char_literal488);

			DebugLocation(522, 8);
			// JavaScript.g3:522:8: ( LT )*
			try { DebugEnterSubRule(240);
			while (true)
			{
				int alt240=2;
				try { DebugEnterDecision(240, false);
				int LA240_1 = input.LA(1);

				if ((LA240_1==LT))
				{
					alt240 = 1;
				}


				} finally { DebugExitDecision(240); }
				switch ( alt240 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:522:8: LT
					{
					DebugLocation(522, 8);
					LT489=(IToken)Match(input,LT,Follow._LT_in_objectLiteral3575); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT489);


					}
					break;

				default:
					goto loop240;
				}
			}

			loop240:
				;

			} finally { DebugExitSubRule(240); }

			DebugLocation(522, 12);
			PushFollow(Follow._propertyNameAndValue_in_objectLiteral3578);
			propertyNameAndValue490=propertyNameAndValue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_propertyNameAndValue.Add(propertyNameAndValue490.Tree);
			DebugLocation(522, 33);
			// JavaScript.g3:522:33: ( ( LT )* ',' ( LT )* propertyNameAndValue )*
			try { DebugEnterSubRule(243);
			while (true)
			{
				int alt243=2;
				try { DebugEnterDecision(243, false);
				try
				{
					alt243 = dfa243.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(243); }
				switch ( alt243 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:522:34: ( LT )* ',' ( LT )* propertyNameAndValue
					{
					DebugLocation(522, 34);
					// JavaScript.g3:522:34: ( LT )*
					try { DebugEnterSubRule(241);
					while (true)
					{
						int alt241=2;
						try { DebugEnterDecision(241, false);
						int LA241_1 = input.LA(1);

						if ((LA241_1==LT))
						{
							alt241 = 1;
						}


						} finally { DebugExitDecision(241); }
						switch ( alt241 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:522:34: LT
							{
							DebugLocation(522, 34);
							LT491=(IToken)Match(input,LT,Follow._LT_in_objectLiteral3581); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_LT.Add(LT491);


							}
							break;

						default:
							goto loop241;
						}
					}

					loop241:
						;

					} finally { DebugExitSubRule(241); }

					DebugLocation(522, 38);
					char_literal492=(IToken)Match(input,94,Follow._94_in_objectLiteral3584); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal492);

					DebugLocation(522, 42);
					// JavaScript.g3:522:42: ( LT )*
					try { DebugEnterSubRule(242);
					while (true)
					{
						int alt242=2;
						try { DebugEnterDecision(242, false);
						int LA242_1 = input.LA(1);

						if ((LA242_1==LT))
						{
							alt242 = 1;
						}


						} finally { DebugExitDecision(242); }
						switch ( alt242 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g3:522:42: LT
							{
							DebugLocation(522, 42);
							LT493=(IToken)Match(input,LT,Follow._LT_in_objectLiteral3586); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_LT.Add(LT493);


							}
							break;

						default:
							goto loop242;
						}
					}

					loop242:
						;

					} finally { DebugExitSubRule(242); }

					DebugLocation(522, 46);
					PushFollow(Follow._propertyNameAndValue_in_objectLiteral3589);
					propertyNameAndValue494=propertyNameAndValue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_propertyNameAndValue.Add(propertyNameAndValue494.Tree);

					}
					break;

				default:
					goto loop243;
				}
			}

			loop243:
				;

			} finally { DebugExitSubRule(243); }

			DebugLocation(522, 69);
			// JavaScript.g3:522:69: ( LT )*
			try { DebugEnterSubRule(244);
			while (true)
			{
				int alt244=2;
				try { DebugEnterDecision(244, false);
				int LA244_1 = input.LA(1);

				if ((LA244_1==LT))
				{
					alt244 = 1;
				}


				} finally { DebugExitDecision(244); }
				switch ( alt244 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:522:69: LT
					{
					DebugLocation(522, 69);
					LT495=(IToken)Match(input,LT,Follow._LT_in_objectLiteral3593); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT495);


					}
					break;

				default:
					goto loop244;
				}
			}

			loop244:
				;

			} finally { DebugExitSubRule(244); }

			DebugLocation(522, 73);
			char_literal496=(IToken)Match(input,154,Follow._154_in_objectLiteral3596); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_154.Add(char_literal496);



			{
			// AST REWRITE
			// elements: propertyNameAndValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 522:77: -> ^( OBJECT ( propertyNameAndValue )* )
			{
				DebugLocation(522, 80);
				// JavaScript.g3:522:80: ^( OBJECT ( propertyNameAndValue )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(522, 82);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OBJECT, "OBJECT"), root_1);

				DebugLocation(522, 89);
				// JavaScript.g3:522:89: ( propertyNameAndValue )*
				while ( stream_propertyNameAndValue.HasNext )
				{
					DebugLocation(522, 89);
					adaptor.AddChild(root_1, stream_propertyNameAndValue.NextTree());

				}
				stream_propertyNameAndValue.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectLiteral", 93);
			LeaveRule("objectLiteral", 93);
			LeaveRule_objectLiteral();
			if (state.backtracking > 0) { Memoize(input, 93, objectLiteral_StartIndex); }

		}
		DebugLocation(523, 1);
		} finally { DebugExitRule(GrammarFileName, "objectLiteral"); }
		return retval;

	}
	// $ANTLR end "objectLiteral"

	partial void EnterRule_propertyNameAndValue();
	partial void LeaveRule_propertyNameAndValue();
	// $ANTLR start "propertyNameAndValue"
	// JavaScript.g3:525:1: propertyNameAndValue : propertyName ( LT )* ':' ( LT )* assignmentExpression -> ^( PROPERTY propertyName assignmentExpression ) ;
	[GrammarRule("propertyNameAndValue")]
	private AstParserRuleReturnScope<object, IToken> propertyNameAndValue()
	{
		EnterRule_propertyNameAndValue();
		EnterRule("propertyNameAndValue", 94);
		TraceIn("propertyNameAndValue", 94);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int propertyNameAndValue_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT498 = default(IToken);
		IToken char_literal499 = default(IToken);
		IToken LT500 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyName497 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentExpression501 = default(AstParserRuleReturnScope<object, IToken>);

		object LT498_tree = default(object);
		object char_literal499_tree = default(object);
		object LT500_tree = default(object);
		RewriteRuleITokenStream stream_LT=new RewriteRuleITokenStream(adaptor,"token LT");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_propertyName=new RewriteRuleSubtreeStream(adaptor,"rule propertyName");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "propertyNameAndValue");
		DebugLocation(525, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return retval; }

			// JavaScript.g3:526:2: ( propertyName ( LT )* ':' ( LT )* assignmentExpression -> ^( PROPERTY propertyName assignmentExpression ) )
			DebugEnterAlt(1);
			// JavaScript.g3:526:4: propertyName ( LT )* ':' ( LT )* assignmentExpression
			{
			DebugLocation(526, 4);
			PushFollow(Follow._propertyName_in_propertyNameAndValue3616);
			propertyName497=propertyName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_propertyName.Add(propertyName497.Tree);
			DebugLocation(526, 17);
			// JavaScript.g3:526:17: ( LT )*
			try { DebugEnterSubRule(245);
			while (true)
			{
				int alt245=2;
				try { DebugEnterDecision(245, false);
				int LA245_1 = input.LA(1);

				if ((LA245_1==LT))
				{
					alt245 = 1;
				}


				} finally { DebugExitDecision(245); }
				switch ( alt245 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:526:17: LT
					{
					DebugLocation(526, 17);
					LT498=(IToken)Match(input,LT,Follow._LT_in_propertyNameAndValue3618); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT498);


					}
					break;

				default:
					goto loop245;
				}
			}

			loop245:
				;

			} finally { DebugExitSubRule(245); }

			DebugLocation(526, 21);
			char_literal499=(IToken)Match(input,101,Follow._101_in_propertyNameAndValue3621); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_101.Add(char_literal499);

			DebugLocation(526, 25);
			// JavaScript.g3:526:25: ( LT )*
			try { DebugEnterSubRule(246);
			while (true)
			{
				int alt246=2;
				try { DebugEnterDecision(246, false);
				int LA246_1 = input.LA(1);

				if ((LA246_1==LT))
				{
					alt246 = 1;
				}


				} finally { DebugExitDecision(246); }
				switch ( alt246 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:526:25: LT
					{
					DebugLocation(526, 25);
					LT500=(IToken)Match(input,LT,Follow._LT_in_propertyNameAndValue3623); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LT.Add(LT500);


					}
					break;

				default:
					goto loop246;
				}
			}

			loop246:
				;

			} finally { DebugExitSubRule(246); }

			DebugLocation(526, 29);
			PushFollow(Follow._assignmentExpression_in_propertyNameAndValue3626);
			assignmentExpression501=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression501.Tree);


			{
			// AST REWRITE
			// elements: propertyName, assignmentExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 526:50: -> ^( PROPERTY propertyName assignmentExpression )
			{
				DebugLocation(526, 53);
				// JavaScript.g3:526:53: ^( PROPERTY propertyName assignmentExpression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(526, 55);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PROPERTY, "PROPERTY"), root_1);

				DebugLocation(526, 64);
				adaptor.AddChild(root_1, stream_propertyName.NextTree());
				DebugLocation(526, 77);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyNameAndValue", 94);
			LeaveRule("propertyNameAndValue", 94);
			LeaveRule_propertyNameAndValue();
			if (state.backtracking > 0) { Memoize(input, 94, propertyNameAndValue_StartIndex); }

		}
		DebugLocation(527, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyNameAndValue"); }
		return retval;

	}
	// $ANTLR end "propertyNameAndValue"

	partial void EnterRule_propertyName();
	partial void LeaveRule_propertyName();
	// $ANTLR start "propertyName"
	// JavaScript.g3:529:1: propertyName : ( Identifier -> ^( IDENTIFIER Identifier ) | StringLiteral -> ^( STRING StringLiteral ) | NumericLiteral -> ^( NUMERIC NumericLiteral ) );
	[GrammarRule("propertyName")]
	private AstParserRuleReturnScope<object, IToken> propertyName()
	{
		EnterRule_propertyName();
		EnterRule("propertyName", 95);
		TraceIn("propertyName", 95);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int propertyName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Identifier502 = default(IToken);
		IToken StringLiteral503 = default(IToken);
		IToken NumericLiteral504 = default(IToken);

		object Identifier502_tree = default(object);
		object StringLiteral503_tree = default(object);
		object NumericLiteral504_tree = default(object);
		RewriteRuleITokenStream stream_Identifier=new RewriteRuleITokenStream(adaptor,"token Identifier");
		RewriteRuleITokenStream stream_StringLiteral=new RewriteRuleITokenStream(adaptor,"token StringLiteral");
		RewriteRuleITokenStream stream_NumericLiteral=new RewriteRuleITokenStream(adaptor,"token NumericLiteral");
		try { DebugEnterRule(GrammarFileName, "propertyName");
		DebugLocation(529, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return retval; }

			// JavaScript.g3:530:2: ( Identifier -> ^( IDENTIFIER Identifier ) | StringLiteral -> ^( STRING StringLiteral ) | NumericLiteral -> ^( NUMERIC NumericLiteral ) )
			int alt247=3;
			try { DebugEnterDecision(247, false);
			switch (input.LA(1))
			{
			case Identifier:
				{
				alt247 = 1;
				}
				break;
			case StringLiteral:
				{
				alt247 = 2;
				}
				break;
			case NumericLiteral:
				{
				alt247 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 247, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(247); }
			switch (alt247)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:530:4: Identifier
				{
				DebugLocation(530, 4);
				Identifier502=(IToken)Match(input,Identifier,Follow._Identifier_in_propertyName3647); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Identifier.Add(Identifier502);



				{
				// AST REWRITE
				// elements: Identifier
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 530:15: -> ^( IDENTIFIER Identifier )
				{
					DebugLocation(530, 18);
					// JavaScript.g3:530:18: ^( IDENTIFIER Identifier )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(530, 20);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_1);

					DebugLocation(530, 31);
					adaptor.AddChild(root_1, stream_Identifier.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:531:4: StringLiteral
				{
				DebugLocation(531, 4);
				StringLiteral503=(IToken)Match(input,StringLiteral,Follow._StringLiteral_in_propertyName3660); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_StringLiteral.Add(StringLiteral503);



				{
				// AST REWRITE
				// elements: StringLiteral
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 531:18: -> ^( STRING StringLiteral )
				{
					DebugLocation(531, 21);
					// JavaScript.g3:531:21: ^( STRING StringLiteral )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(531, 23);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(STRING, "STRING"), root_1);

					DebugLocation(531, 30);
					adaptor.AddChild(root_1, stream_StringLiteral.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g3:532:4: NumericLiteral
				{
				DebugLocation(532, 4);
				NumericLiteral504=(IToken)Match(input,NumericLiteral,Follow._NumericLiteral_in_propertyName3673); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NumericLiteral.Add(NumericLiteral504);



				{
				// AST REWRITE
				// elements: NumericLiteral
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 532:19: -> ^( NUMERIC NumericLiteral )
				{
					DebugLocation(532, 22);
					// JavaScript.g3:532:22: ^( NUMERIC NumericLiteral )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(532, 24);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(NUMERIC, "NUMERIC"), root_1);

					DebugLocation(532, 32);
					adaptor.AddChild(root_1, stream_NumericLiteral.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyName", 95);
			LeaveRule("propertyName", 95);
			LeaveRule_propertyName();
			if (state.backtracking > 0) { Memoize(input, 95, propertyName_StartIndex); }

		}
		DebugLocation(533, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyName"); }
		return retval;

	}
	// $ANTLR end "propertyName"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// JavaScript.g3:536:1: literal : ( 'null' -> ^( NULL ) | 'true' -> ^( BOOLEAN 'true' ) | 'false' -> ^( BOOLEAN 'false' ) | NumericLiteral -> ^( NUMERIC NumericLiteral ) | StringLiteral -> ^( STRING StringLiteral ) | RegularExpressionLiteral -> ^( IDENTIFIER RegularExpressionLiteral ) );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<object, IToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 96);
		TraceIn("literal", 96);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal505 = default(IToken);
		IToken string_literal506 = default(IToken);
		IToken string_literal507 = default(IToken);
		IToken NumericLiteral508 = default(IToken);
		IToken StringLiteral509 = default(IToken);
		IToken RegularExpressionLiteral510 = default(IToken);

		object string_literal505_tree = default(object);
		object string_literal506_tree = default(object);
		object string_literal507_tree = default(object);
		object NumericLiteral508_tree = default(object);
		object StringLiteral509_tree = default(object);
		object RegularExpressionLiteral510_tree = default(object);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_NumericLiteral=new RewriteRuleITokenStream(adaptor,"token NumericLiteral");
		RewriteRuleITokenStream stream_StringLiteral=new RewriteRuleITokenStream(adaptor,"token StringLiteral");
		RewriteRuleITokenStream stream_RegularExpressionLiteral=new RewriteRuleITokenStream(adaptor,"token RegularExpressionLiteral");
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(536, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return retval; }

			// JavaScript.g3:537:2: ( 'null' -> ^( NULL ) | 'true' -> ^( BOOLEAN 'true' ) | 'false' -> ^( BOOLEAN 'false' ) | NumericLiteral -> ^( NUMERIC NumericLiteral ) | StringLiteral -> ^( STRING StringLiteral ) | RegularExpressionLiteral -> ^( IDENTIFIER RegularExpressionLiteral ) )
			int alt248=6;
			try { DebugEnterDecision(248, false);
			switch (input.LA(1))
			{
			case 138:
				{
				alt248 = 1;
				}
				break;
			case 143:
				{
				alt248 = 2;
				}
				break;
			case 130:
				{
				alt248 = 3;
				}
				break;
			case NumericLiteral:
				{
				alt248 = 4;
				}
				break;
			case StringLiteral:
				{
				alt248 = 5;
				}
				break;
			case RegularExpressionLiteral:
				{
				alt248 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 248, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(248); }
			switch (alt248)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g3:537:4: 'null'
				{
				DebugLocation(537, 4);
				string_literal505=(IToken)Match(input,138,Follow._138_in_literal3694); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_138.Add(string_literal505);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 537:11: -> ^( NULL )
				{
					DebugLocation(537, 14);
					// JavaScript.g3:537:14: ^( NULL )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(537, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(NULL, "NULL"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g3:538:4: 'true'
				{
				DebugLocation(538, 4);
				string_literal506=(IToken)Match(input,143,Follow._143_in_literal3705); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_143.Add(string_literal506);



				{
				// AST REWRITE
				// elements: 143
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 538:11: -> ^( BOOLEAN 'true' )
				{
					DebugLocation(538, 14);
					// JavaScript.g3:538:14: ^( BOOLEAN 'true' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(538, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(BOOLEAN, "BOOLEAN"), root_1);

					DebugLocation(538, 24);
					adaptor.AddChild(root_1, stream_143.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g3:539:4: 'false'
				{
				DebugLocation(539, 4);
				string_literal507=(IToken)Match(input,130,Follow._130_in_literal3718); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(string_literal507);



				{
				// AST REWRITE
				// elements: 130
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 539:12: -> ^( BOOLEAN 'false' )
				{
					DebugLocation(539, 15);
					// JavaScript.g3:539:15: ^( BOOLEAN 'false' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(539, 17);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(BOOLEAN, "BOOLEAN"), root_1);

					DebugLocation(539, 25);
					adaptor.AddChild(root_1, stream_130.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaScript.g3:540:4: NumericLiteral
				{
				DebugLocation(540, 4);
				NumericLiteral508=(IToken)Match(input,NumericLiteral,Follow._NumericLiteral_in_literal3731); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NumericLiteral.Add(NumericLiteral508);



				{
				// AST REWRITE
				// elements: NumericLiteral
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 540:19: -> ^( NUMERIC NumericLiteral )
				{
					DebugLocation(540, 22);
					// JavaScript.g3:540:22: ^( NUMERIC NumericLiteral )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(540, 24);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(NUMERIC, "NUMERIC"), root_1);

					DebugLocation(540, 32);
					adaptor.AddChild(root_1, stream_NumericLiteral.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaScript.g3:541:4: StringLiteral
				{
				DebugLocation(541, 4);
				StringLiteral509=(IToken)Match(input,StringLiteral,Follow._StringLiteral_in_literal3744); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_StringLiteral.Add(StringLiteral509);



				{
				// AST REWRITE
				// elements: StringLiteral
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 541:18: -> ^( STRING StringLiteral )
				{
					DebugLocation(541, 21);
					// JavaScript.g3:541:21: ^( STRING StringLiteral )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(541, 23);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(STRING, "STRING"), root_1);

					DebugLocation(541, 30);
					adaptor.AddChild(root_1, stream_StringLiteral.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// JavaScript.g3:542:4: RegularExpressionLiteral
				{
				DebugLocation(542, 4);
				RegularExpressionLiteral510=(IToken)Match(input,RegularExpressionLiteral,Follow._RegularExpressionLiteral_in_literal3757); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RegularExpressionLiteral.Add(RegularExpressionLiteral510);



				{
				// AST REWRITE
				// elements: RegularExpressionLiteral
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 542:29: -> ^( IDENTIFIER RegularExpressionLiteral )
				{
					DebugLocation(542, 32);
					// JavaScript.g3:542:32: ^( IDENTIFIER RegularExpressionLiteral )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(542, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_1);

					DebugLocation(542, 45);
					adaptor.AddChild(root_1, stream_RegularExpressionLiteral.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 96);
			LeaveRule("literal", 96);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 96, literal_StartIndex); }

		}
		DebugLocation(543, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_synpred1_JavaScript_fragment();
	partial void LeaveRule_synpred1_JavaScript_fragment();

	// $ANTLR start synpred1_JavaScript
	public void synpred1_JavaScript_fragment()
	{
		EnterRule_synpred1_JavaScript_fragment();
		EnterRule("synpred1_JavaScript_fragment", 97);
		TraceIn("synpred1_JavaScript_fragment", 97);
		try
		{
			// JavaScript.g3:78:4: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g3:78:4: LT
			{
			DebugLocation(78, 4);
			Match(input,LT,Follow._LT_in_synpred1_JavaScript283); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_JavaScript_fragment", 97);
			LeaveRule("synpred1_JavaScript_fragment", 97);
			LeaveRule_synpred1_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred1_JavaScript

	partial void EnterRule_synpred6_JavaScript_fragment();
	partial void LeaveRule_synpred6_JavaScript_fragment();

	// $ANTLR start synpred6_JavaScript
	public void synpred6_JavaScript_fragment()
	{
		EnterRule_synpred6_JavaScript_fragment();
		EnterRule("synpred6_JavaScript_fragment", 102);
		TraceIn("synpred6_JavaScript_fragment", 102);
		try
		{
			// JavaScript.g3:86:4: ( statement )
			DebugEnterAlt(1);
			// JavaScript.g3:86:4: statement
			{
			DebugLocation(86, 4);
			PushFollow(Follow._statement_in_synpred6_JavaScript334);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_JavaScript_fragment", 102);
			LeaveRule("synpred6_JavaScript_fragment", 102);
			LeaveRule_synpred6_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred6_JavaScript

	partial void EnterRule_synpred7_JavaScript_fragment();
	partial void LeaveRule_synpred7_JavaScript_fragment();

	// $ANTLR start synpred7_JavaScript
	public void synpred7_JavaScript_fragment()
	{
		EnterRule_synpred7_JavaScript_fragment();
		EnterRule("synpred7_JavaScript_fragment", 103);
		TraceIn("synpred7_JavaScript_fragment", 103);
		try
		{
			// JavaScript.g3:92:4: ( blockStatement )
			DebugEnterAlt(1);
			// JavaScript.g3:92:4: blockStatement
			{
			DebugLocation(92, 4);
			PushFollow(Follow._blockStatement_in_synpred7_JavaScript351);
			blockStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred7_JavaScript_fragment", 103);
			LeaveRule("synpred7_JavaScript_fragment", 103);
			LeaveRule_synpred7_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred7_JavaScript

	partial void EnterRule_synpred10_JavaScript_fragment();
	partial void LeaveRule_synpred10_JavaScript_fragment();

	// $ANTLR start synpred10_JavaScript
	public void synpred10_JavaScript_fragment()
	{
		EnterRule_synpred10_JavaScript_fragment();
		EnterRule("synpred10_JavaScript_fragment", 106);
		TraceIn("synpred10_JavaScript_fragment", 106);
		try
		{
			// JavaScript.g3:95:4: ( expressionStatement )
			DebugEnterAlt(1);
			// JavaScript.g3:95:4: expressionStatement
			{
			DebugLocation(95, 4);
			PushFollow(Follow._expressionStatement_in_synpred10_JavaScript366);
			expressionStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_JavaScript_fragment", 106);
			LeaveRule("synpred10_JavaScript_fragment", 106);
			LeaveRule_synpred10_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred10_JavaScript

	partial void EnterRule_synpred17_JavaScript_fragment();
	partial void LeaveRule_synpred17_JavaScript_fragment();

	// $ANTLR start synpred17_JavaScript
	public void synpred17_JavaScript_fragment()
	{
		EnterRule_synpred17_JavaScript_fragment();
		EnterRule("synpred17_JavaScript_fragment", 113);
		TraceIn("synpred17_JavaScript_fragment", 113);
		try
		{
			// JavaScript.g3:102:4: ( labelledStatement )
			DebugEnterAlt(1);
			// JavaScript.g3:102:4: labelledStatement
			{
			DebugLocation(102, 4);
			PushFollow(Follow._labelledStatement_in_synpred17_JavaScript401);
			labelledStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_JavaScript_fragment", 113);
			LeaveRule("synpred17_JavaScript_fragment", 113);
			LeaveRule_synpred17_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred17_JavaScript

	partial void EnterRule_synpred21_JavaScript_fragment();
	partial void LeaveRule_synpred21_JavaScript_fragment();

	// $ANTLR start synpred21_JavaScript
	public void synpred21_JavaScript_fragment()
	{
		EnterRule_synpred21_JavaScript_fragment();
		EnterRule("synpred21_JavaScript_fragment", 117);
		TraceIn("synpred21_JavaScript_fragment", 117);
		try
		{
			// JavaScript.g3:110:8: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g3:110:8: LT
			{
			DebugLocation(110, 8);
			Match(input,LT,Follow._LT_in_synpred21_JavaScript434); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred21_JavaScript_fragment", 117);
			LeaveRule("synpred21_JavaScript_fragment", 117);
			LeaveRule_synpred21_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred21_JavaScript

	partial void EnterRule_synpred47_JavaScript_fragment();
	partial void LeaveRule_synpred47_JavaScript_fragment();

	// $ANTLR start synpred47_JavaScript
	public void synpred47_JavaScript_fragment()
	{
		EnterRule_synpred47_JavaScript_fragment();
		EnterRule("synpred47_JavaScript_fragment", 143);
		TraceIn("synpred47_JavaScript_fragment", 143);
		try
		{
			// JavaScript.g3:148:4: ( 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement ( LT )* 'else' ( LT )* statement )
			DebugEnterAlt(1);
			// JavaScript.g3:148:4: 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement ( LT )* 'else' ( LT )* statement
			{
			DebugLocation(148, 4);
			Match(input,134,Follow._134_in_synpred47_JavaScript714); if (state.failed) return;
			DebugLocation(148, 9);
			// JavaScript.g3:148:9: ( LT )*
			try { DebugEnterSubRule(255);
			while (true)
			{
				int alt255=2;
				try { DebugEnterDecision(255, false);
				int LA255_1 = input.LA(1);

				if ((LA255_1==LT))
				{
					alt255 = 1;
				}


				} finally { DebugExitDecision(255); }
				switch ( alt255 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:148:9: LT
					{
					DebugLocation(148, 9);
					Match(input,LT,Follow._LT_in_synpred47_JavaScript716); if (state.failed) return;

					}
					break;

				default:
					goto loop255;
				}
			}

			loop255:
				;

			} finally { DebugExitSubRule(255); }

			DebugLocation(148, 13);
			Match(input,87,Follow._87_in_synpred47_JavaScript719); if (state.failed) return;
			DebugLocation(148, 17);
			// JavaScript.g3:148:17: ( LT )*
			try { DebugEnterSubRule(256);
			while (true)
			{
				int alt256=2;
				try { DebugEnterDecision(256, false);
				int LA256_1 = input.LA(1);

				if ((LA256_1==LT))
				{
					alt256 = 1;
				}


				} finally { DebugExitDecision(256); }
				switch ( alt256 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:148:17: LT
					{
					DebugLocation(148, 17);
					Match(input,LT,Follow._LT_in_synpred47_JavaScript721); if (state.failed) return;

					}
					break;

				default:
					goto loop256;
				}
			}

			loop256:
				;

			} finally { DebugExitSubRule(256); }

			DebugLocation(148, 21);
			PushFollow(Follow._expression_in_synpred47_JavaScript724);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(148, 32);
			// JavaScript.g3:148:32: ( LT )*
			try { DebugEnterSubRule(257);
			while (true)
			{
				int alt257=2;
				try { DebugEnterDecision(257, false);
				int LA257_1 = input.LA(1);

				if ((LA257_1==LT))
				{
					alt257 = 1;
				}


				} finally { DebugExitDecision(257); }
				switch ( alt257 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:148:32: LT
					{
					DebugLocation(148, 32);
					Match(input,LT,Follow._LT_in_synpred47_JavaScript726); if (state.failed) return;

					}
					break;

				default:
					goto loop257;
				}
			}

			loop257:
				;

			} finally { DebugExitSubRule(257); }

			DebugLocation(148, 36);
			Match(input,88,Follow._88_in_synpred47_JavaScript729); if (state.failed) return;
			DebugLocation(148, 40);
			// JavaScript.g3:148:40: ( LT )*
			try { DebugEnterSubRule(258);
			while (true)
			{
				int alt258=2;
				try { DebugEnterDecision(258, false);
				int LA258_1 = input.LA(1);

				if ((LA258_1==LT))
				{
					alt258 = 1;
				}


				} finally { DebugExitDecision(258); }
				switch ( alt258 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:148:40: LT
					{
					DebugLocation(148, 40);
					Match(input,LT,Follow._LT_in_synpred47_JavaScript731); if (state.failed) return;

					}
					break;

				default:
					goto loop258;
				}
			}

			loop258:
				;

			} finally { DebugExitSubRule(258); }

			DebugLocation(148, 44);
			PushFollow(Follow._statement_in_synpred47_JavaScript734);
			statement();
			PopFollow();
			if (state.failed) return;
			DebugLocation(148, 54);
			// JavaScript.g3:148:54: ( LT )*
			try { DebugEnterSubRule(259);
			while (true)
			{
				int alt259=2;
				try { DebugEnterDecision(259, false);
				int LA259_1 = input.LA(1);

				if ((LA259_1==LT))
				{
					alt259 = 1;
				}


				} finally { DebugExitDecision(259); }
				switch ( alt259 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:148:54: LT
					{
					DebugLocation(148, 54);
					Match(input,LT,Follow._LT_in_synpred47_JavaScript736); if (state.failed) return;

					}
					break;

				default:
					goto loop259;
				}
			}

			loop259:
				;

			} finally { DebugExitSubRule(259); }

			DebugLocation(148, 58);
			Match(input,129,Follow._129_in_synpred47_JavaScript739); if (state.failed) return;
			DebugLocation(148, 65);
			// JavaScript.g3:148:65: ( LT )*
			try { DebugEnterSubRule(260);
			while (true)
			{
				int alt260=2;
				try { DebugEnterDecision(260, false);
				int LA260_1 = input.LA(1);

				if ((LA260_1==LT))
				{
					alt260 = 1;
				}


				} finally { DebugExitDecision(260); }
				switch ( alt260 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:148:65: LT
					{
					DebugLocation(148, 65);
					Match(input,LT,Follow._LT_in_synpred47_JavaScript741); if (state.failed) return;

					}
					break;

				default:
					goto loop260;
				}
			}

			loop260:
				;

			} finally { DebugExitSubRule(260); }

			DebugLocation(148, 69);
			PushFollow(Follow._statement_in_synpred47_JavaScript744);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred47_JavaScript_fragment", 143);
			LeaveRule("synpred47_JavaScript_fragment", 143);
			LeaveRule_synpred47_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred47_JavaScript

	partial void EnterRule_synpred54_JavaScript_fragment();
	partial void LeaveRule_synpred54_JavaScript_fragment();

	// $ANTLR start synpred54_JavaScript
	public void synpred54_JavaScript_fragment()
	{
		EnterRule_synpred54_JavaScript_fragment();
		EnterRule("synpred54_JavaScript_fragment", 150);
		TraceIn("synpred54_JavaScript_fragment", 150);
		try
		{
			// JavaScript.g3:155:4: ( forStatement )
			DebugEnterAlt(1);
			// JavaScript.g3:155:4: forStatement
			{
			DebugLocation(155, 4);
			PushFollow(Follow._forStatement_in_synpred54_JavaScript816);
			forStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred54_JavaScript_fragment", 150);
			LeaveRule("synpred54_JavaScript_fragment", 150);
			LeaveRule_synpred54_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred54_JavaScript

	partial void EnterRule_synpred109_JavaScript_fragment();
	partial void LeaveRule_synpred109_JavaScript_fragment();

	// $ANTLR start synpred109_JavaScript
	public void synpred109_JavaScript_fragment()
	{
		EnterRule_synpred109_JavaScript_fragment();
		EnterRule("synpred109_JavaScript_fragment", 205);
		TraceIn("synpred109_JavaScript_fragment", 205);
		try
		{
			// JavaScript.g3:217:34: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g3:217:34: LT
			{
			DebugLocation(217, 34);
			Match(input,LT,Follow._LT_in_synpred109_JavaScript1396); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred109_JavaScript_fragment", 205);
			LeaveRule("synpred109_JavaScript_fragment", 205);
			LeaveRule_synpred109_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred109_JavaScript

	partial void EnterRule_synpred112_JavaScript_fragment();
	partial void LeaveRule_synpred112_JavaScript_fragment();

	// $ANTLR start synpred112_JavaScript
	public void synpred112_JavaScript_fragment()
	{
		EnterRule_synpred112_JavaScript_fragment();
		EnterRule("synpred112_JavaScript_fragment", 208);
		TraceIn("synpred112_JavaScript_fragment", 208);
		try
		{
			// JavaScript.g3:221:22: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g3:221:22: LT
			{
			DebugLocation(221, 22);
			Match(input,LT,Follow._LT_in_synpred112_JavaScript1429); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred112_JavaScript_fragment", 208);
			LeaveRule("synpred112_JavaScript_fragment", 208);
			LeaveRule_synpred112_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred112_JavaScript

	partial void EnterRule_synpred129_JavaScript_fragment();
	partial void LeaveRule_synpred129_JavaScript_fragment();

	// $ANTLR start synpred129_JavaScript
	public void synpred129_JavaScript_fragment()
	{
		EnterRule_synpred129_JavaScript_fragment();
		EnterRule("synpred129_JavaScript_fragment", 225);
		TraceIn("synpred129_JavaScript_fragment", 225);
		try
		{
			// JavaScript.g3:251:15: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g3:251:15: LT
			{
			DebugLocation(251, 15);
			Match(input,LT,Follow._LT_in_synpred129_JavaScript1680); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred129_JavaScript_fragment", 225);
			LeaveRule("synpred129_JavaScript_fragment", 225);
			LeaveRule_synpred129_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred129_JavaScript

	partial void EnterRule_synpred139_JavaScript_fragment();
	partial void LeaveRule_synpred139_JavaScript_fragment();

	// $ANTLR start synpred139_JavaScript
	public void synpred139_JavaScript_fragment()
	{
		EnterRule_synpred139_JavaScript_fragment();
		EnterRule("synpred139_JavaScript_fragment", 235);
		TraceIn("synpred139_JavaScript_fragment", 235);
		try
		{
			// JavaScript.g3:263:8: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g3:263:8: LT
			{
			DebugLocation(263, 8);
			Match(input,LT,Follow._LT_in_synpred139_JavaScript1794); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred139_JavaScript_fragment", 235);
			LeaveRule("synpred139_JavaScript_fragment", 235);
			LeaveRule_synpred139_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred139_JavaScript

	partial void EnterRule_synpred148_JavaScript_fragment();
	partial void LeaveRule_synpred148_JavaScript_fragment();

	// $ANTLR start synpred148_JavaScript
	public void synpred148_JavaScript_fragment()
	{
		EnterRule_synpred148_JavaScript_fragment();
		EnterRule("synpred148_JavaScript_fragment", 244);
		TraceIn("synpred148_JavaScript_fragment", 244);
		try
		{
			// JavaScript.g3:276:4: ( conditionalExpression )
			DebugEnterAlt(1);
			// JavaScript.g3:276:4: conditionalExpression
			{
			DebugLocation(276, 4);
			PushFollow(Follow._conditionalExpression_in_synpred148_JavaScript1881);
			conditionalExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred148_JavaScript_fragment", 244);
			LeaveRule("synpred148_JavaScript_fragment", 244);
			LeaveRule_synpred148_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred148_JavaScript

	partial void EnterRule_synpred151_JavaScript_fragment();
	partial void LeaveRule_synpred151_JavaScript_fragment();

	// $ANTLR start synpred151_JavaScript
	public void synpred151_JavaScript_fragment()
	{
		EnterRule_synpred151_JavaScript_fragment();
		EnterRule("synpred151_JavaScript_fragment", 247);
		TraceIn("synpred151_JavaScript_fragment", 247);
		try
		{
			// JavaScript.g3:281:4: ( conditionalExpressionNoIn )
			DebugEnterAlt(1);
			// JavaScript.g3:281:4: conditionalExpressionNoIn
			{
			DebugLocation(281, 4);
			PushFollow(Follow._conditionalExpressionNoIn_in_synpred151_JavaScript1920);
			conditionalExpressionNoIn();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred151_JavaScript_fragment", 247);
			LeaveRule("synpred151_JavaScript_fragment", 247);
			LeaveRule_synpred151_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred151_JavaScript

	partial void EnterRule_synpred154_JavaScript_fragment();
	partial void LeaveRule_synpred154_JavaScript_fragment();

	// $ANTLR start synpred154_JavaScript
	public void synpred154_JavaScript_fragment()
	{
		EnterRule_synpred154_JavaScript_fragment();
		EnterRule("synpred154_JavaScript_fragment", 250);
		TraceIn("synpred154_JavaScript_fragment", 250);
		try
		{
			// JavaScript.g3:286:4: ( callExpression )
			DebugEnterAlt(1);
			// JavaScript.g3:286:4: callExpression
			{
			DebugLocation(286, 4);
			PushFollow(Follow._callExpression_in_synpred154_JavaScript1958);
			callExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred154_JavaScript_fragment", 250);
			LeaveRule("synpred154_JavaScript_fragment", 250);
			LeaveRule_synpred154_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred154_JavaScript

	partial void EnterRule_synpred155_JavaScript_fragment();
	partial void LeaveRule_synpred155_JavaScript_fragment();

	// $ANTLR start synpred155_JavaScript
	public void synpred155_JavaScript_fragment()
	{
		EnterRule_synpred155_JavaScript_fragment();
		EnterRule("synpred155_JavaScript_fragment", 251);
		TraceIn("synpred155_JavaScript_fragment", 251);
		try
		{
			// JavaScript.g3:291:4: ( memberExpression )
			DebugEnterAlt(1);
			// JavaScript.g3:291:4: memberExpression
			{
			DebugLocation(291, 4);
			PushFollow(Follow._memberExpression_in_synpred155_JavaScript1974);
			memberExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred155_JavaScript_fragment", 251);
			LeaveRule("synpred155_JavaScript_fragment", 251);
			LeaveRule_synpred155_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred155_JavaScript

	partial void EnterRule_synpred160_JavaScript_fragment();
	partial void LeaveRule_synpred160_JavaScript_fragment();

	// $ANTLR start synpred160_JavaScript
	public void synpred160_JavaScript_fragment()
	{
		EnterRule_synpred160_JavaScript_fragment();
		EnterRule("synpred160_JavaScript_fragment", 256);
		TraceIn("synpred160_JavaScript_fragment", 256);
		try
		{
			// JavaScript.g3:300:5: ( ( LT )* memberExpressionSuffix )
			DebugEnterAlt(1);
			// JavaScript.g3:300:5: ( LT )* memberExpressionSuffix
			{
			DebugLocation(300, 5);
			// JavaScript.g3:300:5: ( LT )*
			try { DebugEnterSubRule(280);
			while (true)
			{
				int alt280=2;
				try { DebugEnterDecision(280, false);
				int LA280_1 = input.LA(1);

				if ((LA280_1==LT))
				{
					alt280 = 1;
				}


				} finally { DebugExitDecision(280); }
				switch ( alt280 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:300:5: LT
					{
					DebugLocation(300, 5);
					Match(input,LT,Follow._LT_in_synpred160_JavaScript2031); if (state.failed) return;

					}
					break;

				default:
					goto loop280;
				}
			}

			loop280:
				;

			} finally { DebugExitSubRule(280); }

			DebugLocation(300, 9);
			PushFollow(Follow._memberExpressionSuffix_in_synpred160_JavaScript2034);
			memberExpressionSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred160_JavaScript_fragment", 256);
			LeaveRule("synpred160_JavaScript_fragment", 256);
			LeaveRule_synpred160_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred160_JavaScript

	partial void EnterRule_synpred166_JavaScript_fragment();
	partial void LeaveRule_synpred166_JavaScript_fragment();

	// $ANTLR start synpred166_JavaScript
	public void synpred166_JavaScript_fragment()
	{
		EnterRule_synpred166_JavaScript_fragment();
		EnterRule("synpred166_JavaScript_fragment", 262);
		TraceIn("synpred166_JavaScript_fragment", 262);
		try
		{
			// JavaScript.g3:313:36: ( ( LT )* callExpressionSuffix )
			DebugEnterAlt(1);
			// JavaScript.g3:313:36: ( LT )* callExpressionSuffix
			{
			DebugLocation(313, 36);
			// JavaScript.g3:313:36: ( LT )*
			try { DebugEnterSubRule(281);
			while (true)
			{
				int alt281=2;
				try { DebugEnterDecision(281, false);
				int LA281_1 = input.LA(1);

				if ((LA281_1==LT))
				{
					alt281 = 1;
				}


				} finally { DebugExitDecision(281); }
				switch ( alt281 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:313:36: LT
					{
					DebugLocation(313, 36);
					Match(input,LT,Follow._LT_in_synpred166_JavaScript2102); if (state.failed) return;

					}
					break;

				default:
					goto loop281;
				}
			}

			loop281:
				;

			} finally { DebugExitSubRule(281); }

			DebugLocation(313, 40);
			PushFollow(Follow._callExpressionSuffix_in_synpred166_JavaScript2105);
			callExpressionSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred166_JavaScript_fragment", 262);
			LeaveRule("synpred166_JavaScript_fragment", 262);
			LeaveRule_synpred166_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred166_JavaScript

	partial void EnterRule_synpred193_JavaScript_fragment();
	partial void LeaveRule_synpred193_JavaScript_fragment();

	// $ANTLR start synpred193_JavaScript
	public void synpred193_JavaScript_fragment()
	{
		EnterRule_synpred193_JavaScript_fragment();
		EnterRule("synpred193_JavaScript_fragment", 289);
		TraceIn("synpred193_JavaScript_fragment", 289);
		try
		{
			// JavaScript.g3:343:4: ( logicalORExpression ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression ) )
			DebugEnterAlt(1);
			// JavaScript.g3:343:4: logicalORExpression ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )
			{
			DebugLocation(343, 4);
			PushFollow(Follow._logicalORExpression_in_synpred193_JavaScript2333);
			logicalORExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(343, 24);
			// JavaScript.g3:343:24: ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )
			DebugEnterAlt(1);
			// JavaScript.g3:343:25: ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression
			{
			DebugLocation(343, 25);
			// JavaScript.g3:343:25: ( LT )*
			try { DebugEnterSubRule(288);
			while (true)
			{
				int alt288=2;
				try { DebugEnterDecision(288, false);
				int LA288_1 = input.LA(1);

				if ((LA288_1==LT))
				{
					alt288 = 1;
				}


				} finally { DebugExitDecision(288); }
				switch ( alt288 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:343:25: LT
					{
					DebugLocation(343, 25);
					Match(input,LT,Follow._LT_in_synpred193_JavaScript2336); if (state.failed) return;

					}
					break;

				default:
					goto loop288;
				}
			}

			loop288:
				;

			} finally { DebugExitSubRule(288); }

			DebugLocation(343, 29);
			Match(input,116,Follow._116_in_synpred193_JavaScript2339); if (state.failed) return;
			DebugLocation(343, 33);
			// JavaScript.g3:343:33: ( LT )*
			try { DebugEnterSubRule(289);
			while (true)
			{
				int alt289=2;
				try { DebugEnterDecision(289, false);
				int LA289_1 = input.LA(1);

				if ((LA289_1==LT))
				{
					alt289 = 1;
				}


				} finally { DebugExitDecision(289); }
				switch ( alt289 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:343:33: LT
					{
					DebugLocation(343, 33);
					Match(input,LT,Follow._LT_in_synpred193_JavaScript2341); if (state.failed) return;

					}
					break;

				default:
					goto loop289;
				}
			}

			loop289:
				;

			} finally { DebugExitSubRule(289); }

			DebugLocation(343, 37);
			PushFollow(Follow._assignmentExpression_in_synpred193_JavaScript2344);
			assignmentExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(343, 58);
			// JavaScript.g3:343:58: ( LT )*
			try { DebugEnterSubRule(290);
			while (true)
			{
				int alt290=2;
				try { DebugEnterDecision(290, false);
				int LA290_1 = input.LA(1);

				if ((LA290_1==LT))
				{
					alt290 = 1;
				}


				} finally { DebugExitDecision(290); }
				switch ( alt290 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:343:58: LT
					{
					DebugLocation(343, 58);
					Match(input,LT,Follow._LT_in_synpred193_JavaScript2346); if (state.failed) return;

					}
					break;

				default:
					goto loop290;
				}
			}

			loop290:
				;

			} finally { DebugExitSubRule(290); }

			DebugLocation(343, 62);
			Match(input,101,Follow._101_in_synpred193_JavaScript2349); if (state.failed) return;
			DebugLocation(343, 66);
			// JavaScript.g3:343:66: ( LT )*
			try { DebugEnterSubRule(291);
			while (true)
			{
				int alt291=2;
				try { DebugEnterDecision(291, false);
				int LA291_1 = input.LA(1);

				if ((LA291_1==LT))
				{
					alt291 = 1;
				}


				} finally { DebugExitDecision(291); }
				switch ( alt291 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:343:66: LT
					{
					DebugLocation(343, 66);
					Match(input,LT,Follow._LT_in_synpred193_JavaScript2351); if (state.failed) return;

					}
					break;

				default:
					goto loop291;
				}
			}

			loop291:
				;

			} finally { DebugExitSubRule(291); }

			DebugLocation(343, 70);
			PushFollow(Follow._assignmentExpression_in_synpred193_JavaScript2354);
			assignmentExpression();
			PopFollow();
			if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred193_JavaScript_fragment", 289);
			LeaveRule("synpred193_JavaScript_fragment", 289);
			LeaveRule_synpred193_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred193_JavaScript

	partial void EnterRule_synpred198_JavaScript_fragment();
	partial void LeaveRule_synpred198_JavaScript_fragment();

	// $ANTLR start synpred198_JavaScript
	public void synpred198_JavaScript_fragment()
	{
		EnterRule_synpred198_JavaScript_fragment();
		EnterRule("synpred198_JavaScript_fragment", 294);
		TraceIn("synpred198_JavaScript_fragment", 294);
		try
		{
			// JavaScript.g3:349:4: ( logicalORExpressionNoIn ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn ) )
			DebugEnterAlt(1);
			// JavaScript.g3:349:4: logicalORExpressionNoIn ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn )
			{
			DebugLocation(349, 4);
			PushFollow(Follow._logicalORExpressionNoIn_in_synpred198_JavaScript2387);
			logicalORExpressionNoIn();
			PopFollow();
			if (state.failed) return;
			DebugLocation(349, 28);
			// JavaScript.g3:349:28: ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn )
			DebugEnterAlt(1);
			// JavaScript.g3:349:29: ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn
			{
			DebugLocation(349, 29);
			// JavaScript.g3:349:29: ( LT )*
			try { DebugEnterSubRule(292);
			while (true)
			{
				int alt292=2;
				try { DebugEnterDecision(292, false);
				int LA292_1 = input.LA(1);

				if ((LA292_1==LT))
				{
					alt292 = 1;
				}


				} finally { DebugExitDecision(292); }
				switch ( alt292 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:349:29: LT
					{
					DebugLocation(349, 29);
					Match(input,LT,Follow._LT_in_synpred198_JavaScript2390); if (state.failed) return;

					}
					break;

				default:
					goto loop292;
				}
			}

			loop292:
				;

			} finally { DebugExitSubRule(292); }

			DebugLocation(349, 33);
			Match(input,116,Follow._116_in_synpred198_JavaScript2393); if (state.failed) return;
			DebugLocation(349, 37);
			// JavaScript.g3:349:37: ( LT )*
			try { DebugEnterSubRule(293);
			while (true)
			{
				int alt293=2;
				try { DebugEnterDecision(293, false);
				int LA293_1 = input.LA(1);

				if ((LA293_1==LT))
				{
					alt293 = 1;
				}


				} finally { DebugExitDecision(293); }
				switch ( alt293 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:349:37: LT
					{
					DebugLocation(349, 37);
					Match(input,LT,Follow._LT_in_synpred198_JavaScript2395); if (state.failed) return;

					}
					break;

				default:
					goto loop293;
				}
			}

			loop293:
				;

			} finally { DebugExitSubRule(293); }

			DebugLocation(349, 41);
			PushFollow(Follow._assignmentExpressionNoIn_in_synpred198_JavaScript2398);
			assignmentExpressionNoIn();
			PopFollow();
			if (state.failed) return;
			DebugLocation(349, 66);
			// JavaScript.g3:349:66: ( LT )*
			try { DebugEnterSubRule(294);
			while (true)
			{
				int alt294=2;
				try { DebugEnterDecision(294, false);
				int LA294_1 = input.LA(1);

				if ((LA294_1==LT))
				{
					alt294 = 1;
				}


				} finally { DebugExitDecision(294); }
				switch ( alt294 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:349:66: LT
					{
					DebugLocation(349, 66);
					Match(input,LT,Follow._LT_in_synpred198_JavaScript2400); if (state.failed) return;

					}
					break;

				default:
					goto loop294;
				}
			}

			loop294:
				;

			} finally { DebugExitSubRule(294); }

			DebugLocation(349, 70);
			Match(input,101,Follow._101_in_synpred198_JavaScript2403); if (state.failed) return;
			DebugLocation(349, 74);
			// JavaScript.g3:349:74: ( LT )*
			try { DebugEnterSubRule(295);
			while (true)
			{
				int alt295=2;
				try { DebugEnterDecision(295, false);
				int LA295_1 = input.LA(1);

				if ((LA295_1==LT))
				{
					alt295 = 1;
				}


				} finally { DebugExitDecision(295); }
				switch ( alt295 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:349:74: LT
					{
					DebugLocation(349, 74);
					Match(input,LT,Follow._LT_in_synpred198_JavaScript2405); if (state.failed) return;

					}
					break;

				default:
					goto loop295;
				}
			}

			loop295:
				;

			} finally { DebugExitSubRule(295); }

			DebugLocation(349, 78);
			PushFollow(Follow._assignmentExpressionNoIn_in_synpred198_JavaScript2408);
			assignmentExpressionNoIn();
			PopFollow();
			if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred198_JavaScript_fragment", 294);
			LeaveRule("synpred198_JavaScript_fragment", 294);
			LeaveRule_synpred198_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred198_JavaScript

	partial void EnterRule_synpred256_JavaScript_fragment();
	partial void LeaveRule_synpred256_JavaScript_fragment();

	// $ANTLR start synpred256_JavaScript
	public void synpred256_JavaScript_fragment()
	{
		EnterRule_synpred256_JavaScript_fragment();
		EnterRule("synpred256_JavaScript_fragment", 352);
		TraceIn("synpred256_JavaScript_fragment", 352);
		try
		{
			// JavaScript.g3:461:30: ( ( LT )* additiveOperator ( LT )* multiplicativeExpression )
			DebugEnterAlt(1);
			// JavaScript.g3:461:30: ( LT )* additiveOperator ( LT )* multiplicativeExpression
			{
			DebugLocation(461, 32);
			// JavaScript.g3:461:32: ( LT )*
			try { DebugEnterSubRule(326);
			while (true)
			{
				int alt326=2;
				try { DebugEnterDecision(326, false);
				int LA326_1 = input.LA(1);

				if ((LA326_1==LT))
				{
					alt326 = 1;
				}


				} finally { DebugExitDecision(326); }
				switch ( alt326 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:461:32: LT
					{
					DebugLocation(461, 30);
					Match(input,LT,Follow._LT_in_synpred256_JavaScript3146); if (state.failed) return;

					}
					break;

				default:
					goto loop326;
				}
			}

			loop326:
				;

			} finally { DebugExitSubRule(326); }

			DebugLocation(461, 35);
			PushFollow(Follow._additiveOperator_in_synpred256_JavaScript3150);
			additiveOperator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(461, 55);
			// JavaScript.g3:461:55: ( LT )*
			try { DebugEnterSubRule(327);
			while (true)
			{
				int alt327=2;
				try { DebugEnterDecision(327, false);
				int LA327_1 = input.LA(1);

				if ((LA327_1==LT))
				{
					alt327 = 1;
				}


				} finally { DebugExitDecision(327); }
				switch ( alt327 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g3:461:55: LT
					{
					DebugLocation(461, 53);
					Match(input,LT,Follow._LT_in_synpred256_JavaScript3153); if (state.failed) return;

					}
					break;

				default:
					goto loop327;
				}
			}

			loop327:
				;

			} finally { DebugExitSubRule(327); }

			DebugLocation(461, 58);
			PushFollow(Follow._multiplicativeExpression_in_synpred256_JavaScript3157);
			multiplicativeExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred256_JavaScript_fragment", 352);
			LeaveRule("synpred256_JavaScript_fragment", 352);
			LeaveRule_synpred256_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred256_JavaScript

	partial void EnterRule_synpred272_JavaScript_fragment();
	partial void LeaveRule_synpred272_JavaScript_fragment();

	// $ANTLR start synpred272_JavaScript
	public void synpred272_JavaScript_fragment()
	{
		EnterRule_synpred272_JavaScript_fragment();
		EnterRule("synpred272_JavaScript_fragment", 368);
		TraceIn("synpred272_JavaScript_fragment", 368);
		try
		{
			// JavaScript.g3:497:4: ( leftHandSideExpression postfixOperator )
			DebugEnterAlt(1);
			// JavaScript.g3:497:4: leftHandSideExpression postfixOperator
			{
			DebugLocation(497, 4);
			PushFollow(Follow._leftHandSideExpression_in_synpred272_JavaScript3415);
			leftHandSideExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(497, 28);
			PushFollow(Follow._postfixOperator_in_synpred272_JavaScript3418);
			postfixOperator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred272_JavaScript_fragment", 368);
			LeaveRule("synpred272_JavaScript_fragment", 368);
			LeaveRule_synpred272_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred272_JavaScript

	partial void EnterRule_synpred281_JavaScript_fragment();
	partial void LeaveRule_synpred281_JavaScript_fragment();

	// $ANTLR start synpred281_JavaScript
	public void synpred281_JavaScript_fragment()
	{
		EnterRule_synpred281_JavaScript_fragment();
		EnterRule("synpred281_JavaScript_fragment", 377);
		TraceIn("synpred281_JavaScript_fragment", 377);
		try
		{
			// JavaScript.g3:517:8: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g3:517:8: LT
			{
			DebugLocation(517, 8);
			Match(input,LT,Follow._LT_in_synpred281_JavaScript3527); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred281_JavaScript_fragment", 377);
			LeaveRule("synpred281_JavaScript_fragment", 377);
			LeaveRule_synpred281_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred281_JavaScript
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA5 dfa5;
	private DFA12 dfa12;
	private DFA16 dfa16;
	private DFA19 dfa19;
	private DFA22 dfa22;
	private DFA25 dfa25;
	private DFA48 dfa48;
	private DFA51 dfa51;
	private DFA54 dfa54;
	private DFA84 dfa84;
	private DFA88 dfa88;
	private DFA87 dfa87;
	private DFA101 dfa101;
	private DFA120 dfa120;
	private DFA119 dfa119;
	private DFA127 dfa127;
	private DFA130 dfa130;
	private DFA154 dfa154;
	private DFA153 dfa153;
	private DFA171 dfa171;
	private DFA174 dfa174;
	private DFA177 dfa177;
	private DFA180 dfa180;
	private DFA183 dfa183;
	private DFA186 dfa186;
	private DFA189 dfa189;
	private DFA192 dfa192;
	private DFA195 dfa195;
	private DFA198 dfa198;
	private DFA201 dfa201;
	private DFA204 dfa204;
	private DFA208 dfa208;
	private DFA212 dfa212;
	private DFA216 dfa216;
	private DFA224 dfa224;
	private DFA238 dfa238;
	private DFA237 dfa237;
	private DFA243 dfa243;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa5 = new DFA5( this );
		dfa12 = new DFA12( this );
		dfa16 = new DFA16( this );
		dfa19 = new DFA19( this );
		dfa22 = new DFA22( this );
		dfa25 = new DFA25( this );
		dfa48 = new DFA48( this );
		dfa51 = new DFA51( this );
		dfa54 = new DFA54( this );
		dfa84 = new DFA84( this );
		dfa88 = new DFA88( this );
		dfa87 = new DFA87( this );
		dfa101 = new DFA101( this );
		dfa120 = new DFA120( this );
		dfa119 = new DFA119( this );
		dfa127 = new DFA127( this );
		dfa130 = new DFA130( this );
		dfa154 = new DFA154( this );
		dfa153 = new DFA153( this );
		dfa171 = new DFA171( this );
		dfa174 = new DFA174( this );
		dfa177 = new DFA177( this );
		dfa180 = new DFA180( this );
		dfa183 = new DFA183( this );
		dfa186 = new DFA186( this );
		dfa189 = new DFA189( this );
		dfa192 = new DFA192( this );
		dfa195 = new DFA195( this );
		dfa198 = new DFA198( this );
		dfa201 = new DFA201( this );
		dfa204 = new DFA204( this );
		dfa208 = new DFA208( this );
		dfa212 = new DFA212( this );
		dfa216 = new DFA216( this );
		dfa224 = new DFA224( this );
		dfa238 = new DFA238( this );
		dfa237 = new DFA237( this );
		dfa243 = new DFA243( this );
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\x4\xFFFF";
		private const string DFA5_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA5_minS =
			"\x2\x29\x2\xFFFF";
		private const string DFA5_maxS =
			"\x2\x9B\x2\xFFFF";
		private const string DFA5_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA5_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x3\x2\xFFFF\x1\x1\x5\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF\x1\x3\xB"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\xE\x3\x3\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x2\xFFFF\x1\x1\x5\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF\x1\x3\xB"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\xE\x3\x3\xFFFF\x1\x2\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "()* loopback of 82:18: ( ( LT !)* sourceElement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA12 : DFA
	{
		private const string DFA12_eotS =
			"\x4\xFFFF";
		private const string DFA12_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA12_minS =
			"\x2\x29\x2\xFFFF";
		private const string DFA12_maxS =
			"\x2\x9B\x2\xFFFF";
		private const string DFA12_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA12_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA12_transitionS =
			{
				"\x1\x3\x2\xFFFF\x1\x1\x5\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF\x1\x3\xB"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\x2\x1\xFFFF\x2\x3\x1\x2\x2\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\xE\x3\x3\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x2\xFFFF\x1\x1\x5\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF\x1\x3\xB"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\x2\x1\xFFFF\x2\x3\x1\x2\x2\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\xE\x3\x3\xFFFF\x1\x2\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA12_eot = DFA.UnpackEncodedString(DFA12_eotS);
		private static readonly short[] DFA12_eof = DFA.UnpackEncodedString(DFA12_eofS);
		private static readonly char[] DFA12_min = DFA.UnpackEncodedStringToUnsignedChars(DFA12_minS);
		private static readonly char[] DFA12_max = DFA.UnpackEncodedStringToUnsignedChars(DFA12_maxS);
		private static readonly short[] DFA12_accept = DFA.UnpackEncodedString(DFA12_acceptS);
		private static readonly short[] DFA12_special = DFA.UnpackEncodedString(DFA12_specialS);
		private static readonly short[][] DFA12_transition;

		static DFA12()
		{
			int numStates = DFA12_transitionS.Length;
			DFA12_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA12_transition[i] = DFA.UnpackEncodedString(DFA12_transitionS[i]);
			}
		}

		public DFA12( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 12;
			this.eot = DFA12_eot;
			this.eof = DFA12_eof;
			this.min = DFA12_min;
			this.max = DFA12_max;
			this.accept = DFA12_accept;
			this.special = DFA12_special;
			this.transition = DFA12_transition;
		}

		public override string Description { get { return "()* loopback of 114:14: ( ( LT !)* statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA16 : DFA
	{
		private const string DFA16_eotS =
			"\x5\xFFFF";
		private const string DFA16_eofS =
			"\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2";
		private const string DFA16_minS =
			"\x1\x2C\x1\x29\x2\xFFFF\x1\x29";
		private const string DFA16_maxS =
			"\x1\x66\x1\x9B\x2\xFFFF\x1\x9B";
		private const string DFA16_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA16_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA16_transitionS =
			{
				"\x1\x1\x31\xFFFF\x1\x3\x7\xFFFF\x1\x2",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x5\xFFFF"+
				"\x1\x2\xE\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF\x3\x2\x2"+
				"\xFFFF\xE\x2\x3\xFFFF\x2\x2",
				"",
				"",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x5\xFFFF"+
				"\x1\x2\xE\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF\x3\x2\x2"+
				"\xFFFF\xE\x2\x3\xFFFF\x2\x2"
			};

		private static readonly short[] DFA16_eot = DFA.UnpackEncodedString(DFA16_eotS);
		private static readonly short[] DFA16_eof = DFA.UnpackEncodedString(DFA16_eofS);
		private static readonly char[] DFA16_min = DFA.UnpackEncodedStringToUnsignedChars(DFA16_minS);
		private static readonly char[] DFA16_max = DFA.UnpackEncodedStringToUnsignedChars(DFA16_maxS);
		private static readonly short[] DFA16_accept = DFA.UnpackEncodedString(DFA16_acceptS);
		private static readonly short[] DFA16_special = DFA.UnpackEncodedString(DFA16_specialS);
		private static readonly short[][] DFA16_transition;

		static DFA16()
		{
			int numStates = DFA16_transitionS.Length;
			DFA16_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA16_transition[i] = DFA.UnpackEncodedString(DFA16_transitionS[i]);
			}
		}

		public DFA16( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 16;
			this.eot = DFA16_eot;
			this.eof = DFA16_eof;
			this.min = DFA16_min;
			this.max = DFA16_max;
			this.accept = DFA16_accept;
			this.special = DFA16_special;
			this.transition = DFA16_transition;
		}

		public override string Description { get { return "()* loopback of 122:24: ( ( LT )* ',' ( LT )* variableDeclaration )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA19 : DFA
	{
		private const string DFA19_eotS =
			"\x4\xFFFF";
		private const string DFA19_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA19_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA19_maxS =
			"\x2\x66\x2\xFFFF";
		private const string DFA19_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA19_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA19_transitionS =
			{
				"\x1\x1\x31\xFFFF\x1\x3\x7\xFFFF\x1\x2",
				"\x1\x1\x31\xFFFF\x1\x3\x7\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA19_eot = DFA.UnpackEncodedString(DFA19_eotS);
		private static readonly short[] DFA19_eof = DFA.UnpackEncodedString(DFA19_eofS);
		private static readonly char[] DFA19_min = DFA.UnpackEncodedStringToUnsignedChars(DFA19_minS);
		private static readonly char[] DFA19_max = DFA.UnpackEncodedStringToUnsignedChars(DFA19_maxS);
		private static readonly short[] DFA19_accept = DFA.UnpackEncodedString(DFA19_acceptS);
		private static readonly short[] DFA19_special = DFA.UnpackEncodedString(DFA19_specialS);
		private static readonly short[][] DFA19_transition;

		static DFA19()
		{
			int numStates = DFA19_transitionS.Length;
			DFA19_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA19_transition[i] = DFA.UnpackEncodedString(DFA19_transitionS[i]);
			}
		}

		public DFA19( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 19;
			this.eot = DFA19_eot;
			this.eof = DFA19_eof;
			this.min = DFA19_min;
			this.max = DFA19_max;
			this.accept = DFA19_accept;
			this.special = DFA19_special;
			this.transition = DFA19_transition;
		}

		public override string Description { get { return "()* loopback of 126:28: ( ( LT )* ',' ( LT )* variableDeclarationNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA22 : DFA
	{
		private const string DFA22_eotS =
			"\x6\xFFFF";
		private const string DFA22_eofS =
			"\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3";
		private const string DFA22_minS =
			"\x1\x29\x1\x2C\x1\x29\x2\xFFFF\x1\x29";
		private const string DFA22_maxS =
			"\x1\x29\x1\x6B\x1\x9B\x2\xFFFF\x1\x9B";
		private const string DFA22_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA22_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA22_transitionS =
			{
				"\x1\x1",
				"\x1\x2\x31\xFFFF\x1\x3\x7\xFFFF\x1\x3\x4\xFFFF\x1\x4",
				"\x1\x3\x2\xFFFF\x1\x5\x5\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF\x1\x3\xB"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x1\xFFFF\x3\x3\x5\xFFFF\x1"+
				"\x3\x4\xFFFF\x1\x4\x9\xFFFF\x1\x3\x3\xFFFF\x2\x3\x1\xFFFF\x7\x3\x1\xFFFF"+
				"\x3\x3\x2\xFFFF\xE\x3\x3\xFFFF\x2\x3",
				"",
				"",
				"\x1\x3\x2\xFFFF\x1\x5\x5\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF\x1\x3\xB"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x1\xFFFF\x3\x3\x5\xFFFF\x1"+
				"\x3\x4\xFFFF\x1\x4\x9\xFFFF\x1\x3\x3\xFFFF\x2\x3\x1\xFFFF\x7\x3\x1\xFFFF"+
				"\x3\x3\x2\xFFFF\xE\x3\x3\xFFFF\x2\x3"
			};

		private static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
		private static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
		private static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
		private static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
		private static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
		private static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
		private static readonly short[][] DFA22_transition;

		static DFA22()
		{
			int numStates = DFA22_transitionS.Length;
			DFA22_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA22_transition[i] = DFA.UnpackEncodedString(DFA22_transitionS[i]);
			}
		}

		public DFA22( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 22;
			this.eot = DFA22_eot;
			this.eof = DFA22_eof;
			this.min = DFA22_min;
			this.max = DFA22_max;
			this.accept = DFA22_accept;
			this.special = DFA22_special;
			this.transition = DFA22_transition;
		}

		public override string Description { get { return "129:1: variableDeclaration : ( Identifier -> ^( IDENTIFIER Identifier ) | Identifier ( LT )* '=' ( LT )* assignmentExpression -> ^( OPERATOR '=' ^( IDENTIFIER Identifier ) assignmentExpression ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA25 : DFA
	{
		private const string DFA25_eotS =
			"\x5\xFFFF";
		private const string DFA25_eofS =
			"\x1\xFFFF\x1\x3\x3\xFFFF";
		private const string DFA25_minS =
			"\x1\x29\x2\x2C\x2\xFFFF";
		private const string DFA25_maxS =
			"\x1\x29\x2\x87\x2\xFFFF";
		private const string DFA25_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2";
		private const string DFA25_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA25_transitionS =
			{
				"\x1\x1",
				"\x1\x2\x31\xFFFF\x1\x3\x7\xFFFF\x1\x3\x4\xFFFF\x1\x4\x1B\xFFFF\x1\x3",
				"\x1\x2\x31\xFFFF\x1\x3\x7\xFFFF\x1\x3\x4\xFFFF\x1\x4\x1B\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA25_eot = DFA.UnpackEncodedString(DFA25_eotS);
		private static readonly short[] DFA25_eof = DFA.UnpackEncodedString(DFA25_eofS);
		private static readonly char[] DFA25_min = DFA.UnpackEncodedStringToUnsignedChars(DFA25_minS);
		private static readonly char[] DFA25_max = DFA.UnpackEncodedStringToUnsignedChars(DFA25_maxS);
		private static readonly short[] DFA25_accept = DFA.UnpackEncodedString(DFA25_acceptS);
		private static readonly short[] DFA25_special = DFA.UnpackEncodedString(DFA25_specialS);
		private static readonly short[][] DFA25_transition;

		static DFA25()
		{
			int numStates = DFA25_transitionS.Length;
			DFA25_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA25_transition[i] = DFA.UnpackEncodedString(DFA25_transitionS[i]);
			}
		}

		public DFA25( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 25;
			this.eot = DFA25_eot;
			this.eof = DFA25_eof;
			this.min = DFA25_min;
			this.max = DFA25_max;
			this.accept = DFA25_accept;
			this.special = DFA25_special;
			this.transition = DFA25_transition;
		}

		public override string Description { get { return "134:1: variableDeclarationNoIn : ( Identifier -> ^( IDENTIFIER Identifier ) | Identifier ( LT )* '=' ( LT )* assignmentExpressionNoIn -> ^( OPERATOR '=' ^( IDENTIFIER Identifier ) assignmentExpressionNoIn ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA48 : DFA
	{
		private const string DFA48_eotS =
			"\x4\xFFFF";
		private const string DFA48_eofS =
			"\x4\xFFFF";
		private const string DFA48_minS =
			"\x2\x29\x2\xFFFF";
		private const string DFA48_maxS =
			"\x2\x9B\x2\xFFFF";
		private const string DFA48_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA48_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA48_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x1\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF\x2\x2\x5\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF"+
				"\x2\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x2\x4"+
				"\xFFFF\x1\x2",
				"\x1\x2\x2\xFFFF\x1\x1\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF\x2\x2\x5\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF"+
				"\x2\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x2\x4"+
				"\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA48_eot = DFA.UnpackEncodedString(DFA48_eotS);
		private static readonly short[] DFA48_eof = DFA.UnpackEncodedString(DFA48_eofS);
		private static readonly char[] DFA48_min = DFA.UnpackEncodedStringToUnsignedChars(DFA48_minS);
		private static readonly char[] DFA48_max = DFA.UnpackEncodedStringToUnsignedChars(DFA48_maxS);
		private static readonly short[] DFA48_accept = DFA.UnpackEncodedString(DFA48_acceptS);
		private static readonly short[] DFA48_special = DFA.UnpackEncodedString(DFA48_specialS);
		private static readonly short[][] DFA48_transition;

		static DFA48()
		{
			int numStates = DFA48_transitionS.Length;
			DFA48_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA48_transition[i] = DFA.UnpackEncodedString(DFA48_transitionS[i]);
			}
		}

		public DFA48( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 48;
			this.eot = DFA48_eot;
			this.eof = DFA48_eof;
			this.min = DFA48_min;
			this.max = DFA48_max;
			this.accept = DFA48_accept;
			this.special = DFA48_special;
			this.transition = DFA48_transition;
		}

		public override string Description { get { return "169:18: ( ( LT )* forStatementInitialiserPart )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA51 : DFA
	{
		private const string DFA51_eotS =
			"\x4\xFFFF";
		private const string DFA51_eofS =
			"\x4\xFFFF";
		private const string DFA51_minS =
			"\x2\x29\x2\xFFFF";
		private const string DFA51_maxS =
			"\x2\x9B\x2\xFFFF";
		private const string DFA51_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA51_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA51_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x1\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF\x2\x2\x5\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF"+
				"\x2\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2",
				"\x1\x2\x2\xFFFF\x1\x1\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF\x2\x2\x5\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF"+
				"\x2\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA51_eot = DFA.UnpackEncodedString(DFA51_eotS);
		private static readonly short[] DFA51_eof = DFA.UnpackEncodedString(DFA51_eofS);
		private static readonly char[] DFA51_min = DFA.UnpackEncodedStringToUnsignedChars(DFA51_minS);
		private static readonly char[] DFA51_max = DFA.UnpackEncodedStringToUnsignedChars(DFA51_maxS);
		private static readonly short[] DFA51_accept = DFA.UnpackEncodedString(DFA51_acceptS);
		private static readonly short[] DFA51_special = DFA.UnpackEncodedString(DFA51_specialS);
		private static readonly short[][] DFA51_transition;

		static DFA51()
		{
			int numStates = DFA51_transitionS.Length;
			DFA51_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA51_transition[i] = DFA.UnpackEncodedString(DFA51_transitionS[i]);
			}
		}

		public DFA51( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 51;
			this.eot = DFA51_eot;
			this.eof = DFA51_eof;
			this.min = DFA51_min;
			this.max = DFA51_max;
			this.accept = DFA51_accept;
			this.special = DFA51_special;
			this.transition = DFA51_transition;
		}

		public override string Description { get { return "169:61: ( ( LT )* cond= expression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA54 : DFA
	{
		private const string DFA54_eotS =
			"\x4\xFFFF";
		private const string DFA54_eofS =
			"\x4\xFFFF";
		private const string DFA54_minS =
			"\x2\x29\x2\xFFFF";
		private const string DFA54_maxS =
			"\x2\x9B\x2\xFFFF";
		private const string DFA54_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA54_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA54_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x1\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\x3\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x14"+
				"\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x2"+
				"\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x4\xFFFF\x1\x2",
				"\x1\x2\x2\xFFFF\x1\x1\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\x3\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x14"+
				"\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x2"+
				"\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA54_eot = DFA.UnpackEncodedString(DFA54_eotS);
		private static readonly short[] DFA54_eof = DFA.UnpackEncodedString(DFA54_eofS);
		private static readonly char[] DFA54_min = DFA.UnpackEncodedStringToUnsignedChars(DFA54_minS);
		private static readonly char[] DFA54_max = DFA.UnpackEncodedStringToUnsignedChars(DFA54_maxS);
		private static readonly short[] DFA54_accept = DFA.UnpackEncodedString(DFA54_acceptS);
		private static readonly short[] DFA54_special = DFA.UnpackEncodedString(DFA54_specialS);
		private static readonly short[][] DFA54_transition;

		static DFA54()
		{
			int numStates = DFA54_transitionS.Length;
			DFA54_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA54_transition[i] = DFA.UnpackEncodedString(DFA54_transitionS[i]);
			}
		}

		public DFA54( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 54;
			this.eot = DFA54_eot;
			this.eof = DFA54_eof;
			this.min = DFA54_min;
			this.max = DFA54_max;
			this.accept = DFA54_accept;
			this.special = DFA54_special;
			this.transition = DFA54_transition;
		}

		public override string Description { get { return "169:92: ( ( LT )* iter= expression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA84 : DFA
	{
		private const string DFA84_eotS =
			"\x4\xFFFF";
		private const string DFA84_eofS =
			"\x4\xFFFF";
		private const string DFA84_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA84_maxS =
			"\x2\x9A\x2\xFFFF";
		private const string DFA84_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA84_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA84_transitionS =
			{
				"\x1\x1\x4D\xFFFF\x1\x3\x3\xFFFF\x1\x2\x1B\xFFFF\x1\x2",
				"\x1\x1\x4D\xFFFF\x1\x3\x3\xFFFF\x1\x2\x1B\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA84_eot = DFA.UnpackEncodedString(DFA84_eotS);
		private static readonly short[] DFA84_eof = DFA.UnpackEncodedString(DFA84_eofS);
		private static readonly char[] DFA84_min = DFA.UnpackEncodedStringToUnsignedChars(DFA84_minS);
		private static readonly char[] DFA84_max = DFA.UnpackEncodedStringToUnsignedChars(DFA84_maxS);
		private static readonly short[] DFA84_accept = DFA.UnpackEncodedString(DFA84_acceptS);
		private static readonly short[] DFA84_special = DFA.UnpackEncodedString(DFA84_specialS);
		private static readonly short[][] DFA84_transition;

		static DFA84()
		{
			int numStates = DFA84_transitionS.Length;
			DFA84_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA84_transition[i] = DFA.UnpackEncodedString(DFA84_transitionS[i]);
			}
		}

		public DFA84( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 84;
			this.eot = DFA84_eot;
			this.eof = DFA84_eof;
			this.min = DFA84_min;
			this.max = DFA84_max;
			this.accept = DFA84_accept;
			this.special = DFA84_special;
			this.transition = DFA84_transition;
		}

		public override string Description { get { return "()* loopback of 213:9: ( ( LT !)* caseClause )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA88 : DFA
	{
		private const string DFA88_eotS =
			"\x4\xFFFF";
		private const string DFA88_eofS =
			"\x4\xFFFF";
		private const string DFA88_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA88_maxS =
			"\x2\x9A\x2\xFFFF";
		private const string DFA88_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA88_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA88_transitionS =
			{
				"\x1\x1\x51\xFFFF\x1\x2\x1B\xFFFF\x1\x3",
				"\x1\x1\x51\xFFFF\x1\x2\x1B\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA88_eot = DFA.UnpackEncodedString(DFA88_eotS);
		private static readonly short[] DFA88_eof = DFA.UnpackEncodedString(DFA88_eofS);
		private static readonly char[] DFA88_min = DFA.UnpackEncodedStringToUnsignedChars(DFA88_minS);
		private static readonly char[] DFA88_max = DFA.UnpackEncodedStringToUnsignedChars(DFA88_maxS);
		private static readonly short[] DFA88_accept = DFA.UnpackEncodedString(DFA88_acceptS);
		private static readonly short[] DFA88_special = DFA.UnpackEncodedString(DFA88_specialS);
		private static readonly short[][] DFA88_transition;

		static DFA88()
		{
			int numStates = DFA88_transitionS.Length;
			DFA88_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA88_transition[i] = DFA.UnpackEncodedString(DFA88_transitionS[i]);
			}
		}

		public DFA88( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 88;
			this.eot = DFA88_eot;
			this.eof = DFA88_eof;
			this.min = DFA88_min;
			this.max = DFA88_max;
			this.accept = DFA88_accept;
			this.special = DFA88_special;
			this.transition = DFA88_transition;
		}

		public override string Description { get { return "213:28: ( ( LT !)* defaultClause ( ( LT !)* caseClause )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA87 : DFA
	{
		private const string DFA87_eotS =
			"\x4\xFFFF";
		private const string DFA87_eofS =
			"\x4\xFFFF";
		private const string DFA87_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA87_maxS =
			"\x2\x9A\x2\xFFFF";
		private const string DFA87_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA87_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA87_transitionS =
			{
				"\x1\x1\x4D\xFFFF\x1\x3\x1F\xFFFF\x1\x2",
				"\x1\x1\x4D\xFFFF\x1\x3\x1F\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA87_eot = DFA.UnpackEncodedString(DFA87_eotS);
		private static readonly short[] DFA87_eof = DFA.UnpackEncodedString(DFA87_eofS);
		private static readonly char[] DFA87_min = DFA.UnpackEncodedStringToUnsignedChars(DFA87_minS);
		private static readonly char[] DFA87_max = DFA.UnpackEncodedStringToUnsignedChars(DFA87_maxS);
		private static readonly short[] DFA87_accept = DFA.UnpackEncodedString(DFA87_acceptS);
		private static readonly short[] DFA87_special = DFA.UnpackEncodedString(DFA87_specialS);
		private static readonly short[][] DFA87_transition;

		static DFA87()
		{
			int numStates = DFA87_transitionS.Length;
			DFA87_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA87_transition[i] = DFA.UnpackEncodedString(DFA87_transitionS[i]);
			}
		}

		public DFA87( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 87;
			this.eot = DFA87_eot;
			this.eof = DFA87_eof;
			this.min = DFA87_min;
			this.max = DFA87_max;
			this.accept = DFA87_accept;
			this.special = DFA87_special;
			this.transition = DFA87_transition;
		}

		public override string Description { get { return "()* loopback of 213:48: ( ( LT !)* caseClause )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA101 : DFA
	{
		private const string DFA101_eotS =
			"\x4\xFFFF";
		private const string DFA101_eofS =
			"\x2\x3\x2\xFFFF";
		private const string DFA101_minS =
			"\x2\x29\x2\xFFFF";
		private const string DFA101_maxS =
			"\x2\x9B\x2\xFFFF";
		private const string DFA101_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA101_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA101_transitionS =
			{
				"\x1\x3\x2\xFFFF\x1\x1\x5\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF\x1\x3\xB"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x3\x3\xFFFF\x2\x3\x1\xFFFF\x7\x3\x1\x2\x3\x3\x2\xFFFF"+
				"\xE\x3\x3\xFFFF\x2\x3",
				"\x1\x3\x2\xFFFF\x1\x1\x5\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF\x1\x3\xB"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1"+
				"\x3\xE\xFFFF\x1\x3\x3\xFFFF\x2\x3\x1\xFFFF\x7\x3\x1\x2\x3\x3\x2\xFFFF"+
				"\xE\x3\x3\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA101_eot = DFA.UnpackEncodedString(DFA101_eotS);
		private static readonly short[] DFA101_eof = DFA.UnpackEncodedString(DFA101_eofS);
		private static readonly char[] DFA101_min = DFA.UnpackEncodedStringToUnsignedChars(DFA101_minS);
		private static readonly char[] DFA101_max = DFA.UnpackEncodedStringToUnsignedChars(DFA101_maxS);
		private static readonly short[] DFA101_accept = DFA.UnpackEncodedString(DFA101_acceptS);
		private static readonly short[] DFA101_special = DFA.UnpackEncodedString(DFA101_specialS);
		private static readonly short[][] DFA101_transition;

		static DFA101()
		{
			int numStates = DFA101_transitionS.Length;
			DFA101_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA101_transition[i] = DFA.UnpackEncodedString(DFA101_transitionS[i]);
			}
		}

		public DFA101( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 101;
			this.eot = DFA101_eot;
			this.eof = DFA101_eof;
			this.min = DFA101_min;
			this.max = DFA101_max;
			this.accept = DFA101_accept;
			this.special = DFA101_special;
			this.transition = DFA101_transition;
		}

		public override string Description { get { return "229:62: ( ( LT )* finallyClause )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA120 : DFA
	{
		private const string DFA120_eotS =
			"\x4\xFFFF";
		private const string DFA120_eofS =
			"\x4\xFFFF";
		private const string DFA120_minS =
			"\x2\x29\x2\xFFFF";
		private const string DFA120_maxS =
			"\x2\x58\x2\xFFFF";
		private const string DFA120_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA120_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA120_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x1\x2B\xFFFF\x1\x3",
				"\x1\x2\x2\xFFFF\x1\x1\x2B\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA120_eot = DFA.UnpackEncodedString(DFA120_eotS);
		private static readonly short[] DFA120_eof = DFA.UnpackEncodedString(DFA120_eofS);
		private static readonly char[] DFA120_min = DFA.UnpackEncodedStringToUnsignedChars(DFA120_minS);
		private static readonly char[] DFA120_max = DFA.UnpackEncodedStringToUnsignedChars(DFA120_maxS);
		private static readonly short[] DFA120_accept = DFA.UnpackEncodedString(DFA120_acceptS);
		private static readonly short[] DFA120_special = DFA.UnpackEncodedString(DFA120_specialS);
		private static readonly short[][] DFA120_transition;

		static DFA120()
		{
			int numStates = DFA120_transitionS.Length;
			DFA120_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA120_transition[i] = DFA.UnpackEncodedString(DFA120_transitionS[i]);
			}
		}

		public DFA120( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 120;
			this.eot = DFA120_eot;
			this.eof = DFA120_eof;
			this.min = DFA120_min;
			this.max = DFA120_max;
			this.accept = DFA120_accept;
			this.special = DFA120_special;
			this.transition = DFA120_transition;
		}

		public override string Description { get { return "255:9: ( ( LT !)* formalParameter ( ( LT !)* ',' ! ( LT !)* formalParameter )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA119 : DFA
	{
		private const string DFA119_eotS =
			"\x4\xFFFF";
		private const string DFA119_eofS =
			"\x4\xFFFF";
		private const string DFA119_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA119_maxS =
			"\x2\x5E\x2\xFFFF";
		private const string DFA119_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA119_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA119_transitionS =
			{
				"\x1\x1\x2B\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x1\x2B\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA119_eot = DFA.UnpackEncodedString(DFA119_eotS);
		private static readonly short[] DFA119_eof = DFA.UnpackEncodedString(DFA119_eofS);
		private static readonly char[] DFA119_min = DFA.UnpackEncodedStringToUnsignedChars(DFA119_minS);
		private static readonly char[] DFA119_max = DFA.UnpackEncodedStringToUnsignedChars(DFA119_maxS);
		private static readonly short[] DFA119_accept = DFA.UnpackEncodedString(DFA119_acceptS);
		private static readonly short[] DFA119_special = DFA.UnpackEncodedString(DFA119_specialS);
		private static readonly short[][] DFA119_transition;

		static DFA119()
		{
			int numStates = DFA119_transitionS.Length;
			DFA119_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA119_transition[i] = DFA.UnpackEncodedString(DFA119_transitionS[i]);
			}
		}

		public DFA119( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 119;
			this.eot = DFA119_eot;
			this.eof = DFA119_eof;
			this.min = DFA119_min;
			this.max = DFA119_max;
			this.accept = DFA119_accept;
			this.special = DFA119_special;
			this.transition = DFA119_transition;
		}

		public override string Description { get { return "()* loopback of 255:31: ( ( LT !)* ',' ! ( LT !)* formalParameter )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA127 : DFA
	{
		private const string DFA127_eotS =
			"\x5\xFFFF";
		private const string DFA127_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA127_minS =
			"\x1\x2C\x1\x29\x2\xFFFF\x1\x29";
		private const string DFA127_maxS =
			"\x1\x76\x1\x9B\x2\xFFFF\x1\x9B";
		private const string DFA127_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA127_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA127_transitionS =
			{
				"\x1\x1\x2B\xFFFF\x1\x2\x5\xFFFF\x1\x3\x6\xFFFF\x2\x2\xF\xFFFF\x1\x2",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x4\xFFFF"+
				"\x2\x2\xE\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF\x3\x2\x2"+
				"\xFFFF\xE\x2\x3\xFFFF\x2\x2",
				"",
				"",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x4\xFFFF"+
				"\x2\x2\xE\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF\x3\x2\x2"+
				"\xFFFF\xE\x2\x3\xFFFF\x2\x2"
			};

		private static readonly short[] DFA127_eot = DFA.UnpackEncodedString(DFA127_eotS);
		private static readonly short[] DFA127_eof = DFA.UnpackEncodedString(DFA127_eofS);
		private static readonly char[] DFA127_min = DFA.UnpackEncodedStringToUnsignedChars(DFA127_minS);
		private static readonly char[] DFA127_max = DFA.UnpackEncodedStringToUnsignedChars(DFA127_maxS);
		private static readonly short[] DFA127_accept = DFA.UnpackEncodedString(DFA127_acceptS);
		private static readonly short[] DFA127_special = DFA.UnpackEncodedString(DFA127_specialS);
		private static readonly short[][] DFA127_transition;

		static DFA127()
		{
			int numStates = DFA127_transitionS.Length;
			DFA127_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA127_transition[i] = DFA.UnpackEncodedString(DFA127_transitionS[i]);
			}
		}

		public DFA127( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 127;
			this.eot = DFA127_eot;
			this.eof = DFA127_eof;
			this.min = DFA127_min;
			this.max = DFA127_max;
			this.accept = DFA127_accept;
			this.special = DFA127_special;
			this.transition = DFA127_transition;
		}

		public override string Description { get { return "()* loopback of 268:25: ( ( LT !)* ',' ! ( LT !)* assignmentExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA130 : DFA
	{
		private const string DFA130_eotS =
			"\x4\xFFFF";
		private const string DFA130_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA130_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA130_maxS =
			"\x2\x66\x2\xFFFF";
		private const string DFA130_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA130_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA130_transitionS =
			{
				"\x1\x1\x31\xFFFF\x1\x3\x7\xFFFF\x1\x2",
				"\x1\x1\x31\xFFFF\x1\x3\x7\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA130_eot = DFA.UnpackEncodedString(DFA130_eotS);
		private static readonly short[] DFA130_eof = DFA.UnpackEncodedString(DFA130_eofS);
		private static readonly char[] DFA130_min = DFA.UnpackEncodedStringToUnsignedChars(DFA130_minS);
		private static readonly char[] DFA130_max = DFA.UnpackEncodedStringToUnsignedChars(DFA130_maxS);
		private static readonly short[] DFA130_accept = DFA.UnpackEncodedString(DFA130_acceptS);
		private static readonly short[] DFA130_special = DFA.UnpackEncodedString(DFA130_specialS);
		private static readonly short[][] DFA130_transition;

		static DFA130()
		{
			int numStates = DFA130_transitionS.Length;
			DFA130_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA130_transition[i] = DFA.UnpackEncodedString(DFA130_transitionS[i]);
			}
		}

		public DFA130( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 130;
			this.eot = DFA130_eot;
			this.eof = DFA130_eof;
			this.min = DFA130_min;
			this.max = DFA130_max;
			this.accept = DFA130_accept;
			this.special = DFA130_special;
			this.transition = DFA130_transition;
		}

		public override string Description { get { return "()* loopback of 272:29: ( ( LT !)* ',' ! ( LT !)* assignmentExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA154 : DFA
	{
		private const string DFA154_eotS =
			"\x4\xFFFF";
		private const string DFA154_eofS =
			"\x4\xFFFF";
		private const string DFA154_minS =
			"\x2\x29\x2\xFFFF";
		private const string DFA154_maxS =
			"\x2\x9B\x2\xFFFF";
		private const string DFA154_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA154_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA154_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x1\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\x3\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x14"+
				"\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x2"+
				"\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x4\xFFFF\x1\x2",
				"\x1\x2\x2\xFFFF\x1\x1\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\x3\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x14"+
				"\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x2"+
				"\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA154_eot = DFA.UnpackEncodedString(DFA154_eotS);
		private static readonly short[] DFA154_eof = DFA.UnpackEncodedString(DFA154_eofS);
		private static readonly char[] DFA154_min = DFA.UnpackEncodedStringToUnsignedChars(DFA154_minS);
		private static readonly char[] DFA154_max = DFA.UnpackEncodedStringToUnsignedChars(DFA154_maxS);
		private static readonly short[] DFA154_accept = DFA.UnpackEncodedString(DFA154_acceptS);
		private static readonly short[] DFA154_special = DFA.UnpackEncodedString(DFA154_specialS);
		private static readonly short[][] DFA154_transition;

		static DFA154()
		{
			int numStates = DFA154_transitionS.Length;
			DFA154_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA154_transition[i] = DFA.UnpackEncodedString(DFA154_transitionS[i]);
			}
		}

		public DFA154( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 154;
			this.eot = DFA154_eot;
			this.eof = DFA154_eof;
			this.min = DFA154_min;
			this.max = DFA154_max;
			this.accept = DFA154_accept;
			this.special = DFA154_special;
			this.transition = DFA154_transition;
		}

		public override string Description { get { return "323:9: ( ( LT !)* argument ( ( LT !)* ',' ! ( LT !)* argument )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA153 : DFA
	{
		private const string DFA153_eotS =
			"\x4\xFFFF";
		private const string DFA153_eofS =
			"\x4\xFFFF";
		private const string DFA153_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA153_maxS =
			"\x2\x5E\x2\xFFFF";
		private const string DFA153_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA153_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA153_transitionS =
			{
				"\x1\x1\x2B\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x1\x2B\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA153_eot = DFA.UnpackEncodedString(DFA153_eotS);
		private static readonly short[] DFA153_eof = DFA.UnpackEncodedString(DFA153_eofS);
		private static readonly char[] DFA153_min = DFA.UnpackEncodedStringToUnsignedChars(DFA153_minS);
		private static readonly char[] DFA153_max = DFA.UnpackEncodedStringToUnsignedChars(DFA153_maxS);
		private static readonly short[] DFA153_accept = DFA.UnpackEncodedString(DFA153_acceptS);
		private static readonly short[] DFA153_special = DFA.UnpackEncodedString(DFA153_specialS);
		private static readonly short[][] DFA153_transition;

		static DFA153()
		{
			int numStates = DFA153_transitionS.Length;
			DFA153_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA153_transition[i] = DFA.UnpackEncodedString(DFA153_transitionS[i]);
			}
		}

		public DFA153( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 153;
			this.eot = DFA153_eot;
			this.eof = DFA153_eof;
			this.min = DFA153_min;
			this.max = DFA153_max;
			this.accept = DFA153_accept;
			this.special = DFA153_special;
			this.transition = DFA153_transition;
		}

		public override string Description { get { return "()* loopback of 323:24: ( ( LT !)* ',' ! ( LT !)* argument )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA171 : DFA
	{
		private const string DFA171_eotS =
			"\x4\xFFFF";
		private const string DFA171_eofS =
			"\x4\xFFFF";
		private const string DFA171_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA171_maxS =
			"\x2\x99\x2\xFFFF";
		private const string DFA171_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA171_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA171_transitionS =
			{
				"\x1\x1\x47\xFFFF\x1\x2\x24\xFFFF\x1\x3",
				"\x1\x1\x47\xFFFF\x1\x2\x24\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA171_eot = DFA.UnpackEncodedString(DFA171_eotS);
		private static readonly short[] DFA171_eof = DFA.UnpackEncodedString(DFA171_eofS);
		private static readonly char[] DFA171_min = DFA.UnpackEncodedStringToUnsignedChars(DFA171_minS);
		private static readonly char[] DFA171_max = DFA.UnpackEncodedStringToUnsignedChars(DFA171_maxS);
		private static readonly short[] DFA171_accept = DFA.UnpackEncodedString(DFA171_acceptS);
		private static readonly short[] DFA171_special = DFA.UnpackEncodedString(DFA171_specialS);
		private static readonly short[][] DFA171_transition;

		static DFA171()
		{
			int numStates = DFA171_transitionS.Length;
			DFA171_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA171_transition[i] = DFA.UnpackEncodedString(DFA171_transitionS[i]);
			}
		}

		public DFA171( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 171;
			this.eot = DFA171_eot;
			this.eof = DFA171_eof;
			this.min = DFA171_min;
			this.max = DFA171_max;
			this.accept = DFA171_accept;
			this.special = DFA171_special;
			this.transition = DFA171_transition;
		}

		public override string Description { get { return "()* loopback of 355:25: ( ( LT !)* logicalOROperator ^ ( LT !)* logicalANDExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA174 : DFA
	{
		private const string DFA174_eotS =
			"\x5\xFFFF";
		private const string DFA174_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA174_minS =
			"\x1\x2C\x1\x29\x2\xFFFF\x1\x29";
		private const string DFA174_maxS =
			"\x1\x9A\x1\x9B\x2\xFFFF\x1\x9B";
		private const string DFA174_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA174_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA174_transitionS =
			{
				"\x1\x1\x2B\xFFFF\x1\x2\x5\xFFFF\x1\x2\x6\xFFFF\x2\x2\xD\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x10\xFFFF\x1\x2\x11\xFFFF\x1\x3\x1\x2",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2"+
				"\x2\xD\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF\x4\x2\x1\xFFFF"+
				"\xE\x2\x2\xFFFF\x1\x3\x2\x2",
				"",
				"",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2"+
				"\x2\xD\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF\x4\x2\x1\xFFFF"+
				"\xE\x2\x2\xFFFF\x1\x3\x2\x2"
			};

		private static readonly short[] DFA174_eot = DFA.UnpackEncodedString(DFA174_eotS);
		private static readonly short[] DFA174_eof = DFA.UnpackEncodedString(DFA174_eofS);
		private static readonly char[] DFA174_min = DFA.UnpackEncodedStringToUnsignedChars(DFA174_minS);
		private static readonly char[] DFA174_max = DFA.UnpackEncodedStringToUnsignedChars(DFA174_maxS);
		private static readonly short[] DFA174_accept = DFA.UnpackEncodedString(DFA174_acceptS);
		private static readonly short[] DFA174_special = DFA.UnpackEncodedString(DFA174_specialS);
		private static readonly short[][] DFA174_transition;

		static DFA174()
		{
			int numStates = DFA174_transitionS.Length;
			DFA174_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA174_transition[i] = DFA.UnpackEncodedString(DFA174_transitionS[i]);
			}
		}

		public DFA174( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 174;
			this.eot = DFA174_eot;
			this.eof = DFA174_eof;
			this.min = DFA174_min;
			this.max = DFA174_max;
			this.accept = DFA174_accept;
			this.special = DFA174_special;
			this.transition = DFA174_transition;
		}

		public override string Description { get { return "()* loopback of 359:29: ( ( LT !)* logicalOROperator ^ ( LT !)* logicalANDExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA177 : DFA
	{
		private const string DFA177_eotS =
			"\x4\xFFFF";
		private const string DFA177_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA177_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA177_maxS =
			"\x2\x99\x2\xFFFF";
		private const string DFA177_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA177_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA177_transitionS =
			{
				"\x1\x1\x27\xFFFF\x1\x3\x1F\xFFFF\x1\x2\x24\xFFFF\x1\x2",
				"\x1\x1\x27\xFFFF\x1\x3\x1F\xFFFF\x1\x2\x24\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA177_eot = DFA.UnpackEncodedString(DFA177_eotS);
		private static readonly short[] DFA177_eof = DFA.UnpackEncodedString(DFA177_eofS);
		private static readonly char[] DFA177_min = DFA.UnpackEncodedStringToUnsignedChars(DFA177_minS);
		private static readonly char[] DFA177_max = DFA.UnpackEncodedStringToUnsignedChars(DFA177_maxS);
		private static readonly short[] DFA177_accept = DFA.UnpackEncodedString(DFA177_acceptS);
		private static readonly short[] DFA177_special = DFA.UnpackEncodedString(DFA177_specialS);
		private static readonly short[][] DFA177_transition;

		static DFA177()
		{
			int numStates = DFA177_transitionS.Length;
			DFA177_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA177_transition[i] = DFA.UnpackEncodedString(DFA177_transitionS[i]);
			}
		}

		public DFA177( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 177;
			this.eot = DFA177_eot;
			this.eof = DFA177_eof;
			this.min = DFA177_min;
			this.max = DFA177_max;
			this.accept = DFA177_accept;
			this.special = DFA177_special;
			this.transition = DFA177_transition;
		}

		public override string Description { get { return "()* loopback of 367:24: ( ( LT !)* logicalANDOperator ^ ( LT !)* bitwiseORExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA180 : DFA
	{
		private const string DFA180_eotS =
			"\x5\xFFFF";
		private const string DFA180_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA180_minS =
			"\x1\x2C\x1\x29\x2\xFFFF\x1\x29";
		private const string DFA180_maxS =
			"\x1\x9A\x1\x9B\x2\xFFFF\x1\x9B";
		private const string DFA180_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA180_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA180_transitionS =
			{
				"\x1\x1\x27\xFFFF\x1\x3\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x6\xFFFF\x2\x2"+
				"\xD\xFFFF\x1\x2\x1\xFFFF\x1\x2\x10\xFFFF\x1\x2\x11\xFFFF\x2\x2",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x3\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x4\xFFFF\x2\x2\xD\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\xE\x2\x2\xFFFF\x3\x2",
				"",
				"",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x3\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x4\xFFFF\x2\x2\xD\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\xE\x2\x2\xFFFF\x3\x2"
			};

		private static readonly short[] DFA180_eot = DFA.UnpackEncodedString(DFA180_eotS);
		private static readonly short[] DFA180_eof = DFA.UnpackEncodedString(DFA180_eofS);
		private static readonly char[] DFA180_min = DFA.UnpackEncodedStringToUnsignedChars(DFA180_minS);
		private static readonly char[] DFA180_max = DFA.UnpackEncodedStringToUnsignedChars(DFA180_maxS);
		private static readonly short[] DFA180_accept = DFA.UnpackEncodedString(DFA180_acceptS);
		private static readonly short[] DFA180_special = DFA.UnpackEncodedString(DFA180_specialS);
		private static readonly short[][] DFA180_transition;

		static DFA180()
		{
			int numStates = DFA180_transitionS.Length;
			DFA180_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA180_transition[i] = DFA.UnpackEncodedString(DFA180_transitionS[i]);
			}
		}

		public DFA180( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 180;
			this.eot = DFA180_eot;
			this.eof = DFA180_eof;
			this.min = DFA180_min;
			this.max = DFA180_max;
			this.accept = DFA180_accept;
			this.special = DFA180_special;
			this.transition = DFA180_transition;
		}

		public override string Description { get { return "()* loopback of 371:28: ( ( LT !)* logicalANDOperator ^ ( LT !)* bitwiseORExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA183 : DFA
	{
		private const string DFA183_eotS =
			"\x4\xFFFF";
		private const string DFA183_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA183_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA183_maxS =
			"\x2\x99\x2\xFFFF";
		private const string DFA183_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA183_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA183_transitionS =
			{
				"\x1\x1\x27\xFFFF\x1\x2\x1F\xFFFF\x1\x2\x22\xFFFF\x1\x3\x1\xFFFF\x1\x2",
				"\x1\x1\x27\xFFFF\x1\x2\x1F\xFFFF\x1\x2\x22\xFFFF\x1\x3\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA183_eot = DFA.UnpackEncodedString(DFA183_eotS);
		private static readonly short[] DFA183_eof = DFA.UnpackEncodedString(DFA183_eofS);
		private static readonly char[] DFA183_min = DFA.UnpackEncodedStringToUnsignedChars(DFA183_minS);
		private static readonly char[] DFA183_max = DFA.UnpackEncodedStringToUnsignedChars(DFA183_maxS);
		private static readonly short[] DFA183_accept = DFA.UnpackEncodedString(DFA183_acceptS);
		private static readonly short[] DFA183_special = DFA.UnpackEncodedString(DFA183_specialS);
		private static readonly short[][] DFA183_transition;

		static DFA183()
		{
			int numStates = DFA183_transitionS.Length;
			DFA183_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA183_transition[i] = DFA.UnpackEncodedString(DFA183_transitionS[i]);
			}
		}

		public DFA183( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 183;
			this.eot = DFA183_eot;
			this.eof = DFA183_eof;
			this.min = DFA183_min;
			this.max = DFA183_max;
			this.accept = DFA183_accept;
			this.special = DFA183_special;
			this.transition = DFA183_transition;
		}

		public override string Description { get { return "()* loopback of 379:25: ( ( LT !)* bitwiseOROperator ^ ( LT !)* bitwiseXORExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA186 : DFA
	{
		private const string DFA186_eotS =
			"\x5\xFFFF";
		private const string DFA186_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA186_minS =
			"\x1\x2C\x1\x29\x2\xFFFF\x1\x29";
		private const string DFA186_maxS =
			"\x1\x9A\x1\x9B\x2\xFFFF\x1\x9B";
		private const string DFA186_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA186_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA186_transitionS =
			{
				"\x1\x1\x27\xFFFF\x1\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x6\xFFFF\x2\x2"+
				"\xD\xFFFF\x1\x2\x1\xFFFF\x1\x2\x10\xFFFF\x1\x2\xF\xFFFF\x1\x3\x1\xFFFF"+
				"\x2\x2",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x4\xFFFF\x2\x2\xD\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\xE\x2\x1\x3\x1\xFFFF\x3\x2",
				"",
				"",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x4\xFFFF\x2\x2\xD\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\xE\x2\x1\x3\x1\xFFFF\x3\x2"
			};

		private static readonly short[] DFA186_eot = DFA.UnpackEncodedString(DFA186_eotS);
		private static readonly short[] DFA186_eof = DFA.UnpackEncodedString(DFA186_eofS);
		private static readonly char[] DFA186_min = DFA.UnpackEncodedStringToUnsignedChars(DFA186_minS);
		private static readonly char[] DFA186_max = DFA.UnpackEncodedStringToUnsignedChars(DFA186_maxS);
		private static readonly short[] DFA186_accept = DFA.UnpackEncodedString(DFA186_acceptS);
		private static readonly short[] DFA186_special = DFA.UnpackEncodedString(DFA186_specialS);
		private static readonly short[][] DFA186_transition;

		static DFA186()
		{
			int numStates = DFA186_transitionS.Length;
			DFA186_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA186_transition[i] = DFA.UnpackEncodedString(DFA186_transitionS[i]);
			}
		}

		public DFA186( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 186;
			this.eot = DFA186_eot;
			this.eof = DFA186_eof;
			this.min = DFA186_min;
			this.max = DFA186_max;
			this.accept = DFA186_accept;
			this.special = DFA186_special;
			this.transition = DFA186_transition;
		}

		public override string Description { get { return "()* loopback of 383:29: ( ( LT !)* bitwiseOROperator ^ ( LT !)* bitwiseXORExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA189 : DFA
	{
		private const string DFA189_eotS =
			"\x4\xFFFF";
		private const string DFA189_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA189_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA189_maxS =
			"\x2\x99\x2\xFFFF";
		private const string DFA189_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA189_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA189_transitionS =
			{
				"\x1\x1\x27\xFFFF\x1\x2\x1F\xFFFF\x1\x2\x2\xFFFF\x1\x3\x1F\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2",
				"\x1\x1\x27\xFFFF\x1\x2\x1F\xFFFF\x1\x2\x2\xFFFF\x1\x3\x1F\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA189_eot = DFA.UnpackEncodedString(DFA189_eotS);
		private static readonly short[] DFA189_eof = DFA.UnpackEncodedString(DFA189_eofS);
		private static readonly char[] DFA189_min = DFA.UnpackEncodedStringToUnsignedChars(DFA189_minS);
		private static readonly char[] DFA189_max = DFA.UnpackEncodedStringToUnsignedChars(DFA189_maxS);
		private static readonly short[] DFA189_accept = DFA.UnpackEncodedString(DFA189_acceptS);
		private static readonly short[] DFA189_special = DFA.UnpackEncodedString(DFA189_specialS);
		private static readonly short[][] DFA189_transition;

		static DFA189()
		{
			int numStates = DFA189_transitionS.Length;
			DFA189_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA189_transition[i] = DFA.UnpackEncodedString(DFA189_transitionS[i]);
			}
		}

		public DFA189( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 189;
			this.eot = DFA189_eot;
			this.eof = DFA189_eof;
			this.min = DFA189_min;
			this.max = DFA189_max;
			this.accept = DFA189_accept;
			this.special = DFA189_special;
			this.transition = DFA189_transition;
		}

		public override string Description { get { return "()* loopback of 391:25: ( ( LT !)* bitwiseXOROperator ^ ( LT !)* bitwiseANDExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA192 : DFA
	{
		private const string DFA192_eotS =
			"\x5\xFFFF";
		private const string DFA192_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA192_minS =
			"\x1\x2C\x1\x29\x2\xFFFF\x1\x29";
		private const string DFA192_maxS =
			"\x1\x9A\x1\x9B\x2\xFFFF\x1\x9B";
		private const string DFA192_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA192_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA192_transitionS =
			{
				"\x1\x1\x27\xFFFF\x1\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x6\xFFFF\x2\x2"+
				"\xD\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\x3\xF\xFFFF\x1\x2\xF\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x4\xFFFF\x2\x2\xD\xFFFF\x3\x2\x1\x3\x1\xFFFF\x2\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x4\x2\x1\xFFFF\xF\x2\x1\xFFFF\x3\x2",
				"",
				"",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x4\xFFFF\x2\x2\xD\xFFFF\x3\x2\x1\x3\x1\xFFFF\x2\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x4\x2\x1\xFFFF\xF\x2\x1\xFFFF\x3\x2"
			};

		private static readonly short[] DFA192_eot = DFA.UnpackEncodedString(DFA192_eotS);
		private static readonly short[] DFA192_eof = DFA.UnpackEncodedString(DFA192_eofS);
		private static readonly char[] DFA192_min = DFA.UnpackEncodedStringToUnsignedChars(DFA192_minS);
		private static readonly char[] DFA192_max = DFA.UnpackEncodedStringToUnsignedChars(DFA192_maxS);
		private static readonly short[] DFA192_accept = DFA.UnpackEncodedString(DFA192_acceptS);
		private static readonly short[] DFA192_special = DFA.UnpackEncodedString(DFA192_specialS);
		private static readonly short[][] DFA192_transition;

		static DFA192()
		{
			int numStates = DFA192_transitionS.Length;
			DFA192_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA192_transition[i] = DFA.UnpackEncodedString(DFA192_transitionS[i]);
			}
		}

		public DFA192( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 192;
			this.eot = DFA192_eot;
			this.eof = DFA192_eof;
			this.min = DFA192_min;
			this.max = DFA192_max;
			this.accept = DFA192_accept;
			this.special = DFA192_special;
			this.transition = DFA192_transition;
		}

		public override string Description { get { return "()* loopback of 395:29: ( ( LT !)* bitwiseXOROperator ^ ( LT !)* bitwiseANDExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA195 : DFA
	{
		private const string DFA195_eotS =
			"\x4\xFFFF";
		private const string DFA195_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA195_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA195_maxS =
			"\x2\x99\x2\xFFFF";
		private const string DFA195_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA195_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA195_transitionS =
			{
				"\x1\x1\x27\xFFFF\x1\x2\x1\x3\x1E\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1F\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2",
				"\x1\x1\x27\xFFFF\x1\x2\x1\x3\x1E\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1F\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA195_eot = DFA.UnpackEncodedString(DFA195_eotS);
		private static readonly short[] DFA195_eof = DFA.UnpackEncodedString(DFA195_eofS);
		private static readonly char[] DFA195_min = DFA.UnpackEncodedStringToUnsignedChars(DFA195_minS);
		private static readonly char[] DFA195_max = DFA.UnpackEncodedStringToUnsignedChars(DFA195_maxS);
		private static readonly short[] DFA195_accept = DFA.UnpackEncodedString(DFA195_acceptS);
		private static readonly short[] DFA195_special = DFA.UnpackEncodedString(DFA195_specialS);
		private static readonly short[][] DFA195_transition;

		static DFA195()
		{
			int numStates = DFA195_transitionS.Length;
			DFA195_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA195_transition[i] = DFA.UnpackEncodedString(DFA195_transitionS[i]);
			}
		}

		public DFA195( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 195;
			this.eot = DFA195_eot;
			this.eof = DFA195_eof;
			this.min = DFA195_min;
			this.max = DFA195_max;
			this.accept = DFA195_accept;
			this.special = DFA195_special;
			this.transition = DFA195_transition;
		}

		public override string Description { get { return "()* loopback of 403:23: ( ( LT !)* bitwiseANDOperator ^ ( LT !)* equalityExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA198 : DFA
	{
		private const string DFA198_eotS =
			"\x5\xFFFF";
		private const string DFA198_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA198_minS =
			"\x1\x2C\x1\x29\x2\xFFFF\x1\x29";
		private const string DFA198_maxS =
			"\x1\x9A\x1\x9B\x2\xFFFF\x1\x9B";
		private const string DFA198_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA198_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA198_transitionS =
			{
				"\x1\x1\x27\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x2\x5\xFFFF\x1\x2\x6\xFFFF"+
				"\x2\x2\xD\xFFFF\x1\x2\x1\xFFFF\x2\x2\xF\xFFFF\x1\x2\xF\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\x3\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1"+
				"\xFFFF\x4\x2\x1\xFFFF\xF\x2\x1\xFFFF\x3\x2",
				"",
				"",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\x3\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1"+
				"\xFFFF\x4\x2\x1\xFFFF\xF\x2\x1\xFFFF\x3\x2"
			};

		private static readonly short[] DFA198_eot = DFA.UnpackEncodedString(DFA198_eotS);
		private static readonly short[] DFA198_eof = DFA.UnpackEncodedString(DFA198_eofS);
		private static readonly char[] DFA198_min = DFA.UnpackEncodedStringToUnsignedChars(DFA198_minS);
		private static readonly char[] DFA198_max = DFA.UnpackEncodedStringToUnsignedChars(DFA198_maxS);
		private static readonly short[] DFA198_accept = DFA.UnpackEncodedString(DFA198_acceptS);
		private static readonly short[] DFA198_special = DFA.UnpackEncodedString(DFA198_specialS);
		private static readonly short[][] DFA198_transition;

		static DFA198()
		{
			int numStates = DFA198_transitionS.Length;
			DFA198_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA198_transition[i] = DFA.UnpackEncodedString(DFA198_transitionS[i]);
			}
		}

		public DFA198( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 198;
			this.eot = DFA198_eot;
			this.eof = DFA198_eof;
			this.min = DFA198_min;
			this.max = DFA198_max;
			this.accept = DFA198_accept;
			this.special = DFA198_special;
			this.transition = DFA198_transition;
		}

		public override string Description { get { return "()* loopback of 407:27: ( ( LT !)* bitwiseANDOperator ^ ( LT !)* equalityExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA201 : DFA
	{
		private const string DFA201_eotS =
			"\x4\xFFFF";
		private const string DFA201_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA201_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA201_maxS =
			"\x2\x99\x2\xFFFF";
		private const string DFA201_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA201_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA201_transitionS =
			{
				"\x1\x1\x23\xFFFF\x2\x3\x2\xFFFF\x2\x2\x16\xFFFF\x2\x3\x6\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x2\x1F\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"\x1\x1\x23\xFFFF\x2\x3\x2\xFFFF\x2\x2\x16\xFFFF\x2\x3\x6\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x2\x1F\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA201_eot = DFA.UnpackEncodedString(DFA201_eotS);
		private static readonly short[] DFA201_eof = DFA.UnpackEncodedString(DFA201_eofS);
		private static readonly char[] DFA201_min = DFA.UnpackEncodedStringToUnsignedChars(DFA201_minS);
		private static readonly char[] DFA201_max = DFA.UnpackEncodedStringToUnsignedChars(DFA201_maxS);
		private static readonly short[] DFA201_accept = DFA.UnpackEncodedString(DFA201_acceptS);
		private static readonly short[] DFA201_special = DFA.UnpackEncodedString(DFA201_specialS);
		private static readonly short[][] DFA201_transition;

		static DFA201()
		{
			int numStates = DFA201_transitionS.Length;
			DFA201_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA201_transition[i] = DFA.UnpackEncodedString(DFA201_transitionS[i]);
			}
		}

		public DFA201( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 201;
			this.eot = DFA201_eot;
			this.eof = DFA201_eof;
			this.min = DFA201_min;
			this.max = DFA201_max;
			this.accept = DFA201_accept;
			this.special = DFA201_special;
			this.transition = DFA201_transition;
		}

		public override string Description { get { return "()* loopback of 415:25: ( ( LT !)* equalityOperator ^ ( LT !)* relationalExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA204 : DFA
	{
		private const string DFA204_eotS =
			"\x5\xFFFF";
		private const string DFA204_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA204_minS =
			"\x1\x2C\x1\x29\x2\xFFFF\x1\x29";
		private const string DFA204_maxS =
			"\x1\x9A\x1\x9B\x2\xFFFF\x1\x9B";
		private const string DFA204_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA204_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA204_transitionS =
			{
				"\x1\x1\x23\xFFFF\x2\x3\x2\xFFFF\x2\x2\x2\xFFFF\x1\x2\x5\xFFFF\x1\x2"+
				"\x6\xFFFF\x2\x2\x5\xFFFF\x2\x3\x6\xFFFF\x1\x2\x1\xFFFF\x2\x2\xF\xFFFF"+
				"\x1\x2\xF\xFFFF\x1\x2\x1\xFFFF\x2\x2",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x2\x3\x2\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x3\x2\x4\xFFFF\x2\x2\x5\xFFFF\x2\x3\x6\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1"+
				"\xFFFF\x7\x2\x1\xFFFF\x4\x2\x1\xFFFF\xF\x2\x1\xFFFF\x3\x2",
				"",
				"",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x2\x3\x2\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x3\x2\x4\xFFFF\x2\x2\x5\xFFFF\x2\x3\x6\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1"+
				"\xFFFF\x7\x2\x1\xFFFF\x4\x2\x1\xFFFF\xF\x2\x1\xFFFF\x3\x2"
			};

		private static readonly short[] DFA204_eot = DFA.UnpackEncodedString(DFA204_eotS);
		private static readonly short[] DFA204_eof = DFA.UnpackEncodedString(DFA204_eofS);
		private static readonly char[] DFA204_min = DFA.UnpackEncodedStringToUnsignedChars(DFA204_minS);
		private static readonly char[] DFA204_max = DFA.UnpackEncodedStringToUnsignedChars(DFA204_maxS);
		private static readonly short[] DFA204_accept = DFA.UnpackEncodedString(DFA204_acceptS);
		private static readonly short[] DFA204_special = DFA.UnpackEncodedString(DFA204_specialS);
		private static readonly short[][] DFA204_transition;

		static DFA204()
		{
			int numStates = DFA204_transitionS.Length;
			DFA204_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA204_transition[i] = DFA.UnpackEncodedString(DFA204_transitionS[i]);
			}
		}

		public DFA204( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 204;
			this.eot = DFA204_eot;
			this.eof = DFA204_eof;
			this.min = DFA204_min;
			this.max = DFA204_max;
			this.accept = DFA204_accept;
			this.special = DFA204_special;
			this.transition = DFA204_transition;
		}

		public override string Description { get { return "()* loopback of 419:29: ( ( LT !)* equalityOperator ^ ( LT !)* relationalExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA208 : DFA
	{
		private const string DFA208_eotS =
			"\x4\xFFFF";
		private const string DFA208_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA208_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA208_maxS =
			"\x2\x99\x2\xFFFF";
		private const string DFA208_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA208_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA208_transitionS =
			{
				"\x1\x1\x23\xFFFF\x2\x2\x2\xFFFF\x2\x2\x11\xFFFF\x1\x3\x2\xFFFF\x1\x3"+
				"\x1\xFFFF\x2\x2\x2\x3\x4\xFFFF\x1\x2\x2\xFFFF\x1\x2\xF\xFFFF\x2\x3\xE"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"\x1\x1\x23\xFFFF\x2\x2\x2\xFFFF\x2\x2\x11\xFFFF\x1\x3\x2\xFFFF\x1\x3"+
				"\x1\xFFFF\x2\x2\x2\x3\x4\xFFFF\x1\x2\x2\xFFFF\x1\x2\xF\xFFFF\x2\x3\xE"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA208_eot = DFA.UnpackEncodedString(DFA208_eotS);
		private static readonly short[] DFA208_eof = DFA.UnpackEncodedString(DFA208_eofS);
		private static readonly char[] DFA208_min = DFA.UnpackEncodedStringToUnsignedChars(DFA208_minS);
		private static readonly char[] DFA208_max = DFA.UnpackEncodedStringToUnsignedChars(DFA208_maxS);
		private static readonly short[] DFA208_accept = DFA.UnpackEncodedString(DFA208_acceptS);
		private static readonly short[] DFA208_special = DFA.UnpackEncodedString(DFA208_specialS);
		private static readonly short[][] DFA208_transition;

		static DFA208()
		{
			int numStates = DFA208_transitionS.Length;
			DFA208_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA208_transition[i] = DFA.UnpackEncodedString(DFA208_transitionS[i]);
			}
		}

		public DFA208( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 208;
			this.eot = DFA208_eot;
			this.eof = DFA208_eof;
			this.min = DFA208_min;
			this.max = DFA208_max;
			this.accept = DFA208_accept;
			this.special = DFA208_special;
			this.transition = DFA208_transition;
		}

		public override string Description { get { return "()* loopback of 430:20: ( ( LT !)* relationalOperator ^ ( LT !)* shiftExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA212 : DFA
	{
		private const string DFA212_eotS =
			"\x5\xFFFF";
		private const string DFA212_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA212_minS =
			"\x1\x2C\x1\x29\x2\xFFFF\x1\x29";
		private const string DFA212_maxS =
			"\x1\x9A\x1\x9B\x2\xFFFF\x1\x9B";
		private const string DFA212_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA212_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA212_transitionS =
			{
				"\x1\x1\x23\xFFFF\x2\x2\x2\xFFFF\x2\x2\x2\xFFFF\x1\x2\x5\xFFFF\x1\x2"+
				"\x6\xFFFF\x2\x2\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x2\x2\x3\x4\xFFFF\x1"+
				"\x2\x1\xFFFF\x2\x2\xF\xFFFF\x1\x2\x1\x3\xE\xFFFF\x1\x2\x1\xFFFF\x2\x2",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x4\xFFFF\x2\x2\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x2\x2\x3\x4\xFFFF"+
				"\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF\x4\x2\x1\x3\xF\x2\x1\xFFFF"+
				"\x3\x2",
				"",
				"",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x4\xFFFF\x2\x2\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x2\x2\x3\x4\xFFFF"+
				"\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF\x4\x2\x1\x3\xF\x2\x1\xFFFF"+
				"\x3\x2"
			};

		private static readonly short[] DFA212_eot = DFA.UnpackEncodedString(DFA212_eotS);
		private static readonly short[] DFA212_eof = DFA.UnpackEncodedString(DFA212_eofS);
		private static readonly char[] DFA212_min = DFA.UnpackEncodedStringToUnsignedChars(DFA212_minS);
		private static readonly char[] DFA212_max = DFA.UnpackEncodedStringToUnsignedChars(DFA212_maxS);
		private static readonly short[] DFA212_accept = DFA.UnpackEncodedString(DFA212_acceptS);
		private static readonly short[] DFA212_special = DFA.UnpackEncodedString(DFA212_specialS);
		private static readonly short[][] DFA212_transition;

		static DFA212()
		{
			int numStates = DFA212_transitionS.Length;
			DFA212_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA212_transition[i] = DFA.UnpackEncodedString(DFA212_transitionS[i]);
			}
		}

		public DFA212( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 212;
			this.eot = DFA212_eot;
			this.eof = DFA212_eof;
			this.min = DFA212_min;
			this.max = DFA212_max;
			this.accept = DFA212_accept;
			this.special = DFA212_special;
			this.transition = DFA212_transition;
		}

		public override string Description { get { return "()* loopback of 439:20: ( ( LT !)* relationalOperatorNoIn ^ ( LT !)* shiftExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA216 : DFA
	{
		private const string DFA216_eotS =
			"\x5\xFFFF";
		private const string DFA216_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA216_minS =
			"\x1\x2C\x1\x29\x2\xFFFF\x1\x29";
		private const string DFA216_maxS =
			"\x1\x9A\x1\x9B\x2\xFFFF\x1\x9B";
		private const string DFA216_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA216_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA216_transitionS =
			{
				"\x1\x1\x23\xFFFF\x2\x2\x2\xFFFF\x2\x2\x2\xFFFF\x1\x2\x5\xFFFF\x1\x2"+
				"\x6\xFFFF\x3\x2\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\xF\xFFFF\x2\x2\xE\xFFFF\x1\x2\x1\xFFFF"+
				"\x2\x2",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x4\xFFFF\x3\x2\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF\x14\x2"+
				"\x1\xFFFF\x3\x2",
				"",
				"",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x4\xFFFF\x3\x2\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF\x14\x2"+
				"\x1\xFFFF\x3\x2"
			};

		private static readonly short[] DFA216_eot = DFA.UnpackEncodedString(DFA216_eotS);
		private static readonly short[] DFA216_eof = DFA.UnpackEncodedString(DFA216_eofS);
		private static readonly char[] DFA216_min = DFA.UnpackEncodedStringToUnsignedChars(DFA216_minS);
		private static readonly char[] DFA216_max = DFA.UnpackEncodedStringToUnsignedChars(DFA216_maxS);
		private static readonly short[] DFA216_accept = DFA.UnpackEncodedString(DFA216_acceptS);
		private static readonly short[] DFA216_special = DFA.UnpackEncodedString(DFA216_specialS);
		private static readonly short[][] DFA216_transition;

		static DFA216()
		{
			int numStates = DFA216_transitionS.Length;
			DFA216_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA216_transition[i] = DFA.UnpackEncodedString(DFA216_transitionS[i]);
			}
		}

		public DFA216( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 216;
			this.eot = DFA216_eot;
			this.eof = DFA216_eof;
			this.min = DFA216_min;
			this.max = DFA216_max;
			this.accept = DFA216_accept;
			this.special = DFA216_special;
			this.transition = DFA216_transition;
		}

		public override string Description { get { return "()* loopback of 451:23: ( ( LT !)* shiftOperator ^ ( LT !)* additiveExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA224 : DFA
	{
		private const string DFA224_eotS =
			"\x5\xFFFF";
		private const string DFA224_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA224_minS =
			"\x1\x2C\x1\x29\x2\xFFFF\x1\x29";
		private const string DFA224_maxS =
			"\x1\x9A\x1\x9B\x2\xFFFF\x1\x9B";
		private const string DFA224_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA224_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA224_transitionS =
			{
				"\x1\x1\x23\xFFFF\x2\x2\x1\x3\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1\x3\x1"+
				"\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1\x3\x1\xFFFF\x4\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\xF\xFFFF"+
				"\x2\x2\xE\xFFFF\x1\x2\x1\xFFFF\x2\x2",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x3\x2\x1\x3\x1\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\x3\x1\xFFFF\x2\x2"+
				"\x1\xFFFF\x3\x2\x2\xFFFF\x1\x3\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1"+
				"\xFFFF\x14\x2\x1\xFFFF\x3\x2",
				"",
				"",
				"\x1\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x3\x2\x1\x3\x1\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\x3\x1\xFFFF\x2\x2"+
				"\x1\xFFFF\x3\x2\x2\xFFFF\x1\x3\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x7\x2\x1"+
				"\xFFFF\x14\x2\x1\xFFFF\x3\x2"
			};

		private static readonly short[] DFA224_eot = DFA.UnpackEncodedString(DFA224_eotS);
		private static readonly short[] DFA224_eof = DFA.UnpackEncodedString(DFA224_eofS);
		private static readonly char[] DFA224_min = DFA.UnpackEncodedStringToUnsignedChars(DFA224_minS);
		private static readonly char[] DFA224_max = DFA.UnpackEncodedStringToUnsignedChars(DFA224_maxS);
		private static readonly short[] DFA224_accept = DFA.UnpackEncodedString(DFA224_acceptS);
		private static readonly short[] DFA224_special = DFA.UnpackEncodedString(DFA224_specialS);
		private static readonly short[][] DFA224_transition;

		static DFA224()
		{
			int numStates = DFA224_transitionS.Length;
			DFA224_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA224_transition[i] = DFA.UnpackEncodedString(DFA224_transitionS[i]);
			}
		}

		public DFA224( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 224;
			this.eot = DFA224_eot;
			this.eof = DFA224_eof;
			this.min = DFA224_min;
			this.max = DFA224_max;
			this.accept = DFA224_accept;
			this.special = DFA224_special;
			this.transition = DFA224_transition;
		}

		public override string Description { get { return "()* loopback of 470:20: ( ( LT !)* multiplicativeOperator ^ ( LT !)* unaryExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA238 : DFA
	{
		private const string DFA238_eotS =
			"\x4\xFFFF";
		private const string DFA238_eofS =
			"\x4\xFFFF";
		private const string DFA238_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA238_maxS =
			"\x2\x76\x2\xFFFF";
		private const string DFA238_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA238_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA238_transitionS =
			{
				"\x1\x1\x31\xFFFF\x1\x3\x17\xFFFF\x1\x2",
				"\x1\x1\x31\xFFFF\x1\x3\x17\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA238_eot = DFA.UnpackEncodedString(DFA238_eotS);
		private static readonly short[] DFA238_eof = DFA.UnpackEncodedString(DFA238_eofS);
		private static readonly char[] DFA238_min = DFA.UnpackEncodedStringToUnsignedChars(DFA238_minS);
		private static readonly char[] DFA238_max = DFA.UnpackEncodedStringToUnsignedChars(DFA238_maxS);
		private static readonly short[] DFA238_accept = DFA.UnpackEncodedString(DFA238_acceptS);
		private static readonly short[] DFA238_special = DFA.UnpackEncodedString(DFA238_specialS);
		private static readonly short[][] DFA238_transition;

		static DFA238()
		{
			int numStates = DFA238_transitionS.Length;
			DFA238_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA238_transition[i] = DFA.UnpackEncodedString(DFA238_transitionS[i]);
			}
		}

		public DFA238( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 238;
			this.eot = DFA238_eot;
			this.eof = DFA238_eof;
			this.min = DFA238_min;
			this.max = DFA238_max;
			this.accept = DFA238_accept;
			this.special = DFA238_special;
			this.transition = DFA238_transition;
		}

		public override string Description { get { return "()* loopback of 517:34: ( ( LT )* ',' ( ( LT )* assignmentExpression )? )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA237 : DFA
	{
		private const string DFA237_eotS =
			"\x4\xFFFF";
		private const string DFA237_eofS =
			"\x4\xFFFF";
		private const string DFA237_minS =
			"\x2\x29\x2\xFFFF";
		private const string DFA237_maxS =
			"\x2\x9B\x2\xFFFF";
		private const string DFA237_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA237_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA237_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x1\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x14"+
				"\xFFFF\x1\x2\x1\x3\x8\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF"+
				"\x2\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2",
				"\x1\x2\x2\xFFFF\x1\x1\x5\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x14"+
				"\xFFFF\x1\x2\x1\x3\x8\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF"+
				"\x2\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA237_eot = DFA.UnpackEncodedString(DFA237_eotS);
		private static readonly short[] DFA237_eof = DFA.UnpackEncodedString(DFA237_eofS);
		private static readonly char[] DFA237_min = DFA.UnpackEncodedStringToUnsignedChars(DFA237_minS);
		private static readonly char[] DFA237_max = DFA.UnpackEncodedStringToUnsignedChars(DFA237_maxS);
		private static readonly short[] DFA237_accept = DFA.UnpackEncodedString(DFA237_acceptS);
		private static readonly short[] DFA237_special = DFA.UnpackEncodedString(DFA237_specialS);
		private static readonly short[][] DFA237_transition;

		static DFA237()
		{
			int numStates = DFA237_transitionS.Length;
			DFA237_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA237_transition[i] = DFA.UnpackEncodedString(DFA237_transitionS[i]);
			}
		}

		public DFA237( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 237;
			this.eot = DFA237_eot;
			this.eof = DFA237_eof;
			this.min = DFA237_min;
			this.max = DFA237_max;
			this.accept = DFA237_accept;
			this.special = DFA237_special;
			this.transition = DFA237_transition;
		}

		public override string Description { get { return "517:43: ( ( LT )* assignmentExpression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA243 : DFA
	{
		private const string DFA243_eotS =
			"\x4\xFFFF";
		private const string DFA243_eofS =
			"\x4\xFFFF";
		private const string DFA243_minS =
			"\x2\x2C\x2\xFFFF";
		private const string DFA243_maxS =
			"\x2\x9A\x2\xFFFF";
		private const string DFA243_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA243_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA243_transitionS =
			{
				"\x1\x1\x31\xFFFF\x1\x3\x3B\xFFFF\x1\x2",
				"\x1\x1\x31\xFFFF\x1\x3\x3B\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA243_eot = DFA.UnpackEncodedString(DFA243_eotS);
		private static readonly short[] DFA243_eof = DFA.UnpackEncodedString(DFA243_eofS);
		private static readonly char[] DFA243_min = DFA.UnpackEncodedStringToUnsignedChars(DFA243_minS);
		private static readonly char[] DFA243_max = DFA.UnpackEncodedStringToUnsignedChars(DFA243_maxS);
		private static readonly short[] DFA243_accept = DFA.UnpackEncodedString(DFA243_acceptS);
		private static readonly short[] DFA243_special = DFA.UnpackEncodedString(DFA243_specialS);
		private static readonly short[][] DFA243_transition;

		static DFA243()
		{
			int numStates = DFA243_transitionS.Length;
			DFA243_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA243_transition[i] = DFA.UnpackEncodedString(DFA243_transitionS[i]);
			}
		}

		public DFA243( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 243;
			this.eot = DFA243_eot;
			this.eof = DFA243_eof;
			this.min = DFA243_min;
			this.max = DFA243_max;
			this.accept = DFA243_accept;
			this.special = DFA243_special;
			this.transition = DFA243_transition;
		}

		public override string Description { get { return "()* loopback of 522:33: ( ( LT )* ',' ( LT )* propertyNameAndValue )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _LT_in_program283 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _sourceElements_in_program286 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _LT_in_program289 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sourceElement_in_sourceElements313 = new BitSet(new ulong[]{0x4004120000000002UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_sourceElements316 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _sourceElement_in_sourceElements320 = new BitSet(new ulong[]{0x4004120000000002UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statement_in_sourceElement334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDeclaration_in_sourceElement339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _blockStatement_in_statement351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableStatement_in_statement356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _emptyStatement_in_statement361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionStatement_in_statement366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifStatement_in_statement371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iterationStatement_in_statement376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _continueStatement_in_statement381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _breakStatement_in_statement386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_statement391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _withStatement_in_statement396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labelledStatement_in_statement401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_statement406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _throwStatement_in_statement411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_statement416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _debuggerStatement_in_statement421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_blockStatement432 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0xC7FFE75UL});
		public static readonly BitSet _LT_in_blockStatement434 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0xC7FFE75UL});
		public static readonly BitSet _statementList_in_blockStatement437 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _LT_in_blockStatement440 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_blockStatement443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_statementList463 = new BitSet(new ulong[]{0x4004120000000002UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_statementList466 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statement_in_statementList470 = new BitSet(new ulong[]{0x4004120000000002UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _146_in_variableStatement483 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _LT_in_variableStatement486 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _variableDeclarationList_in_variableStatement490 = new BitSet(new ulong[]{0x100000000000UL,0x4000000000UL});
		public static readonly BitSet _set_in_variableStatement492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList510 = new BitSet(new ulong[]{0x100000000002UL,0x40000000UL});
		public static readonly BitSet _LT_in_variableDeclarationList513 = new BitSet(new ulong[]{0x100000000000UL,0x40000000UL});
		public static readonly BitSet _94_in_variableDeclarationList516 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _LT_in_variableDeclarationList518 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList521 = new BitSet(new ulong[]{0x100000000002UL,0x40000000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_variableDeclarationListNoIn543 = new BitSet(new ulong[]{0x100000000002UL,0x40000000UL});
		public static readonly BitSet _LT_in_variableDeclarationListNoIn546 = new BitSet(new ulong[]{0x100000000000UL,0x40000000UL});
		public static readonly BitSet _94_in_variableDeclarationListNoIn549 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _LT_in_variableDeclarationListNoIn551 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_variableDeclarationListNoIn554 = new BitSet(new ulong[]{0x100000000002UL,0x40000000UL});
		public static readonly BitSet _Identifier_in_variableDeclaration576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_variableDeclaration589 = new BitSet(new ulong[]{0x100000000000UL,0x80000000000UL});
		public static readonly BitSet _LT_in_variableDeclaration591 = new BitSet(new ulong[]{0x100000000000UL,0x80000000000UL});
		public static readonly BitSet _107_in_variableDeclaration594 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_variableDeclaration596 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclaration599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_variableDeclarationNoIn626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_variableDeclarationNoIn639 = new BitSet(new ulong[]{0x100000000000UL,0x80000000000UL});
		public static readonly BitSet _LT_in_variableDeclarationNoIn641 = new BitSet(new ulong[]{0x100000000000UL,0x80000000000UL});
		public static readonly BitSet _107_in_variableDeclarationNoIn644 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_variableDeclarationNoIn646 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_variableDeclarationNoIn649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_emptyStatement676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionStatement693 = new BitSet(new ulong[]{0x100000000000UL,0x4000000000UL});
		public static readonly BitSet _set_in_expressionStatement695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_ifStatement714 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_ifStatement716 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _87_in_ifStatement719 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_ifStatement721 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_ifStatement724 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _LT_in_ifStatement726 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_ifStatement729 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_ifStatement731 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statement_in_ifStatement734 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x2UL});
		public static readonly BitSet _LT_in_ifStatement736 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_ifStatement739 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_ifStatement741 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statement_in_ifStatement744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_ifStatement765 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_ifStatement767 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _87_in_ifStatement770 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_ifStatement772 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_ifStatement775 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _LT_in_ifStatement777 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_ifStatement780 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_ifStatement782 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statement_in_ifStatement785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _doWhileStatement_in_iterationStatement806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_iterationStatement811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_iterationStatement816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forInStatement_in_iterationStatement821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_doWhileStatement832 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_doWhileStatement834 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statement_in_doWhileStatement837 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x100000UL});
		public static readonly BitSet _LT_in_doWhileStatement839 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_doWhileStatement842 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_doWhileStatement844 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _87_in_doWhileStatement847 = new BitSet(new ulong[]{0x4004020000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_doWhileStatement849 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_doWhileStatement851 = new BitSet(new ulong[]{0x100000000000UL,0x4000000000UL});
		public static readonly BitSet _LT_in_doWhileStatement854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_doWhileStatement858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_whileStatement884 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_whileStatement886 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _87_in_whileStatement889 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_whileStatement891 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_whileStatement894 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _LT_in_whileStatement896 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_whileStatement899 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_whileStatement901 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statement_in_whileStatement904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_forStatement926 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_forStatement928 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _87_in_forStatement931 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020004198808008UL,0x84EA624UL});
		public static readonly BitSet _LT_in_forStatement934 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84EA624UL});
		public static readonly BitSet _forStatementInitialiserPart_in_forStatement937 = new BitSet(new ulong[]{0x100000000000UL,0x4000000000UL});
		public static readonly BitSet _LT_in_forStatement941 = new BitSet(new ulong[]{0x100000000000UL,0x4000000000UL});
		public static readonly BitSet _102_in_forStatement944 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020004198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_forStatement947 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_forStatement952 = new BitSet(new ulong[]{0x100000000000UL,0x4000000000UL});
		public static readonly BitSet _LT_in_forStatement956 = new BitSet(new ulong[]{0x100000000000UL,0x4000000000UL});
		public static readonly BitSet _102_in_forStatement959 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000199808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_forStatement962 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_forStatement967 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _LT_in_forStatement971 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_forStatement974 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_forStatement976 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statement_in_forStatement979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionNoIn_in_forStatementInitialiserPart1020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_forStatementInitialiserPart1025 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _LT_in_forStatementInitialiserPart1028 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _variableDeclarationListNoIn_in_forStatementInitialiserPart1032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_forInStatement1044 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_forInStatement1046 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _87_in_forInStatement1049 = new BitSet(new ulong[]{0x4004120000000000UL,0x20000000800008UL,0x44A624UL});
		public static readonly BitSet _LT_in_forInStatement1051 = new BitSet(new ulong[]{0x4004120000000000UL,0x20000000800008UL,0x44A624UL});
		public static readonly BitSet _forInStatementInitialiserPart_in_forInStatement1054 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _LT_in_forInStatement1056 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _135_in_forInStatement1059 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_forInStatement1061 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_forInStatement1064 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _LT_in_forInStatement1066 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_forInStatement1069 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_forInStatement1071 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statement_in_forInStatement1074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_forInStatementInitialiserPart1100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_forInStatementInitialiserPart1105 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _LT_in_forInStatementInitialiserPart1108 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_forInStatementInitialiserPart1112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_continueStatement1123 = new BitSet(new ulong[]{0x120000000000UL,0x4000000000UL});
		public static readonly BitSet _Identifier_in_continueStatement1125 = new BitSet(new ulong[]{0x100000000000UL,0x4000000000UL});
		public static readonly BitSet _LT_in_continueStatement1129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_continueStatement1133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_breakStatement1158 = new BitSet(new ulong[]{0x120000000000UL,0x4000000000UL});
		public static readonly BitSet _Identifier_in_breakStatement1160 = new BitSet(new ulong[]{0x100000000000UL,0x4000000000UL});
		public static readonly BitSet _LT_in_breakStatement1164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_breakStatement1168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_returnStatement1193 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020004198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_returnStatement1195 = new BitSet(new ulong[]{0x100000000000UL,0x4000000000UL});
		public static readonly BitSet _LT_in_returnStatement1199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_returnStatement1203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_withStatement1225 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_withStatement1227 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _87_in_withStatement1230 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_withStatement1232 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_withStatement1235 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _LT_in_withStatement1237 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_withStatement1240 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_withStatement1242 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statement_in_withStatement1245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_labelledStatement1264 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _LT_in_labelledStatement1266 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _101_in_labelledStatement1269 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_labelledStatement1271 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statement_in_labelledStatement1274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_switchStatement1296 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_switchStatement1298 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _87_in_switchStatement1301 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_switchStatement1303 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_switchStatement1306 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _LT_in_switchStatement1308 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_switchStatement1311 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _LT_in_switchStatement1313 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _caseBlock_in_switchStatement1316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_caseBlock1338 = new BitSet(new ulong[]{0x100000000000UL,0x4400000000000000UL,0x4000000UL});
		public static readonly BitSet _LT_in_caseBlock1342 = new BitSet(new ulong[]{0x100000000000UL,0x400000000000000UL});
		public static readonly BitSet _caseClause_in_caseBlock1346 = new BitSet(new ulong[]{0x100000000000UL,0x4400000000000000UL,0x4000000UL});
		public static readonly BitSet _LT_in_caseBlock1351 = new BitSet(new ulong[]{0x100000000000UL,0x4000000000000000UL});
		public static readonly BitSet _defaultClause_in_caseBlock1355 = new BitSet(new ulong[]{0x100000000000UL,0x400000000000000UL,0x4000000UL});
		public static readonly BitSet _LT_in_caseBlock1358 = new BitSet(new ulong[]{0x100000000000UL,0x400000000000000UL});
		public static readonly BitSet _caseClause_in_caseBlock1362 = new BitSet(new ulong[]{0x100000000000UL,0x400000000000000UL,0x4000000UL});
		public static readonly BitSet _LT_in_caseBlock1368 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_caseBlock1372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_caseClause1384 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_caseClause1386 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_caseClause1389 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _LT_in_caseClause1391 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _101_in_caseClause1394 = new BitSet(new ulong[]{0x4004120000000002UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_caseClause1396 = new BitSet(new ulong[]{0x4004120000000002UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statementList_in_caseClause1399 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_defaultClause1422 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _LT_in_defaultClause1424 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _101_in_defaultClause1427 = new BitSet(new ulong[]{0x4004120000000002UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_defaultClause1429 = new BitSet(new ulong[]{0x4004120000000002UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statementList_in_defaultClause1432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_throwStatement1453 = new BitSet(new ulong[]{0x4004020000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_throwStatement1455 = new BitSet(new ulong[]{0x100000000000UL,0x4000000000UL});
		public static readonly BitSet _LT_in_throwStatement1458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_throwStatement1462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_tryStatement1482 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _LT_in_tryStatement1484 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _blockStatement_in_tryStatement1487 = new BitSet(new ulong[]{0x100000000000UL,0x800000000000000UL,0x8UL});
		public static readonly BitSet _LT_in_tryStatement1489 = new BitSet(new ulong[]{0x100000000000UL,0x800000000000000UL,0x8UL});
		public static readonly BitSet _finallyClause_in_tryStatement1493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catchClause_in_tryStatement1497 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x8UL});
		public static readonly BitSet _LT_in_tryStatement1500 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x8UL});
		public static readonly BitSet _finallyClause_in_tryStatement1503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_catchClause1540 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_catchClause1542 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _87_in_catchClause1545 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _LT_in_catchClause1547 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _Identifier_in_catchClause1550 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _LT_in_catchClause1552 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_catchClause1555 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _LT_in_catchClause1557 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _blockStatement_in_catchClause1560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_finallyClause1586 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _LT_in_finallyClause1588 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _blockStatement_in_finallyClause1591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_debuggerStatement1610 = new BitSet(new ulong[]{0x100000000000UL,0x4000000000UL});
		public static readonly BitSet _LT_in_debuggerStatement1613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_debuggerStatement1617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_functionDeclaration1634 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _LT_in_functionDeclaration1636 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _Identifier_in_functionDeclaration1639 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_functionDeclaration1641 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _formalParameterList_in_functionDeclaration1644 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _LT_in_functionDeclaration1646 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _functionBody_in_functionDeclaration1649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_functionExpression1678 = new BitSet(new ulong[]{0x120000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_functionExpression1680 = new BitSet(new ulong[]{0x120000000000UL,0x800000UL});
		public static readonly BitSet _Identifier_in_functionExpression1683 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_functionExpression1686 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _formalParameterList_in_functionExpression1689 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _LT_in_functionExpression1691 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _functionBody_in_functionExpression1694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_formalParameterList1723 = new BitSet(new ulong[]{0x120000000000UL,0x1000000UL});
		public static readonly BitSet _LT_in_formalParameterList1727 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _formalParameter_in_formalParameterList1731 = new BitSet(new ulong[]{0x100000000000UL,0x41000000UL});
		public static readonly BitSet _LT_in_formalParameterList1734 = new BitSet(new ulong[]{0x100000000000UL,0x40000000UL});
		public static readonly BitSet _94_in_formalParameterList1738 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _LT_in_formalParameterList1741 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _formalParameter_in_formalParameterList1745 = new BitSet(new ulong[]{0x100000000000UL,0x41000000UL});
		public static readonly BitSet _LT_in_formalParameterList1751 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_formalParameterList1755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_formalParameter1768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_functionBody1792 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0xC7FFE75UL});
		public static readonly BitSet _LT_in_functionBody1794 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0xC7FFE75UL});
		public static readonly BitSet _sourceElements_in_functionBody1797 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _LT_in_functionBody1800 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_functionBody1803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression1824 = new BitSet(new ulong[]{0x100000000002UL,0x40000000UL});
		public static readonly BitSet _LT_in_expression1827 = new BitSet(new ulong[]{0x100000000000UL,0x40000000UL});
		public static readonly BitSet _94_in_expression1831 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_expression1834 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpression_in_expression1838 = new BitSet(new ulong[]{0x100000000002UL,0x40000000UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn1853 = new BitSet(new ulong[]{0x100000000002UL,0x40000000UL});
		public static readonly BitSet _LT_in_expressionNoIn1856 = new BitSet(new ulong[]{0x100000000000UL,0x40000000UL});
		public static readonly BitSet _94_in_expressionNoIn1860 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_expressionNoIn1863 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn1867 = new BitSet(new ulong[]{0x100000000002UL,0x40000000UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression1881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_assignmentExpression1886 = new BitSet(new ulong[]{0x100000000000UL,0x10A0A1224480000UL,0x1000000UL});
		public static readonly BitSet _LT_in_assignmentExpression1888 = new BitSet(new ulong[]{0x100000000000UL,0x10A0A1224480000UL,0x1000000UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpression1891 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_assignmentExpression1893 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpression_in_assignmentExpression1896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpressionNoIn_in_assignmentExpressionNoIn1920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_assignmentExpressionNoIn1925 = new BitSet(new ulong[]{0x100000000000UL,0x10A0A1224480000UL,0x1000000UL});
		public static readonly BitSet _LT_in_assignmentExpressionNoIn1927 = new BitSet(new ulong[]{0x100000000000UL,0x10A0A1224480000UL,0x1000000UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpressionNoIn1930 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_assignmentExpressionNoIn1932 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_assignmentExpressionNoIn1935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callExpression_in_leftHandSideExpression1958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newExpression_in_leftHandSideExpression1963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberExpression_in_newExpression1974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_newExpression1979 = new BitSet(new ulong[]{0x4004120000000000UL,0x20000000800008UL,0x40A624UL});
		public static readonly BitSet _LT_in_newExpression1981 = new BitSet(new ulong[]{0x4004120000000000UL,0x20000000800008UL,0x40A624UL});
		public static readonly BitSet _newExpression_in_newExpression1984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_memberExpression2005 = new BitSet(new ulong[]{0x100000000002UL,0x20000400000000UL});
		public static readonly BitSet _functionExpression_in_memberExpression2012 = new BitSet(new ulong[]{0x100000000002UL,0x20000400000000UL});
		public static readonly BitSet _newMemberExpression_in_memberExpression2019 = new BitSet(new ulong[]{0x100000000002UL,0x20000400000000UL});
		public static readonly BitSet _LT_in_memberExpression2031 = new BitSet(new ulong[]{0x100000000000UL,0x20000400000000UL});
		public static readonly BitSet _memberExpressionSuffix_in_memberExpression2034 = new BitSet(new ulong[]{0x100000000002UL,0x20000400000000UL});
		public static readonly BitSet _137_in_newMemberExpression2047 = new BitSet(new ulong[]{0x4004120000000000UL,0x20000000800008UL,0x40A624UL});
		public static readonly BitSet _LT_in_newMemberExpression2049 = new BitSet(new ulong[]{0x4004120000000000UL,0x20000000800008UL,0x40A624UL});
		public static readonly BitSet _memberExpression_in_newMemberExpression2052 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_newMemberExpression2054 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _arguments_in_newMemberExpression2057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexSuffix_in_memberExpressionSuffix2078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyReferenceSuffix_in_memberExpressionSuffix2083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberExpression_in_callExpression2094 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_callExpression2096 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _arguments_in_callExpression2099 = new BitSet(new ulong[]{0x100000000002UL,0x20000400800000UL});
		public static readonly BitSet _LT_in_callExpression2102 = new BitSet(new ulong[]{0x100000000000UL,0x20000400800000UL});
		public static readonly BitSet _callExpressionSuffix_in_callExpression2105 = new BitSet(new ulong[]{0x100000000002UL,0x20000400800000UL});
		public static readonly BitSet _arguments_in_callExpressionSuffix2133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexSuffix_in_callExpressionSuffix2138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyReferenceSuffix_in_callExpressionSuffix2143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_arguments2154 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000199808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_arguments2158 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _argument_in_arguments2162 = new BitSet(new ulong[]{0x100000000000UL,0x41000000UL});
		public static readonly BitSet _LT_in_arguments2165 = new BitSet(new ulong[]{0x100000000000UL,0x40000000UL});
		public static readonly BitSet _94_in_arguments2169 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_arguments2172 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _argument_in_arguments2176 = new BitSet(new ulong[]{0x100000000000UL,0x41000000UL});
		public static readonly BitSet _LT_in_arguments2182 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_arguments2186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_argument2199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_indexSuffix2219 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_indexSuffix2221 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_indexSuffix2224 = new BitSet(new ulong[]{0x100000000000UL,0x40000000000000UL});
		public static readonly BitSet _LT_in_indexSuffix2226 = new BitSet(new ulong[]{0x100000000000UL,0x40000000000000UL});
		public static readonly BitSet _118_in_indexSuffix2229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_propertyReferenceSuffix2250 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _LT_in_propertyReferenceSuffix2252 = new BitSet(new ulong[]{0x120000000000UL});
		public static readonly BitSet _Identifier_in_propertyReferenceSuffix2255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalORExpression_in_conditionalExpression2333 = new BitSet(new ulong[]{0x100000000000UL,0x10000000000000UL});
		public static readonly BitSet _LT_in_conditionalExpression2336 = new BitSet(new ulong[]{0x100000000000UL,0x10000000000000UL});
		public static readonly BitSet _116_in_conditionalExpression2339 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_conditionalExpression2341 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression2344 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _LT_in_conditionalExpression2346 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _101_in_conditionalExpression2349 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_conditionalExpression2351 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression2354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalORExpressionNoIn_in_conditionalExpression2376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalORExpressionNoIn_in_conditionalExpressionNoIn2387 = new BitSet(new ulong[]{0x100000000000UL,0x10000000000000UL});
		public static readonly BitSet _LT_in_conditionalExpressionNoIn2390 = new BitSet(new ulong[]{0x100000000000UL,0x10000000000000UL});
		public static readonly BitSet _116_in_conditionalExpressionNoIn2393 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_conditionalExpressionNoIn2395 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_conditionalExpressionNoIn2398 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _LT_in_conditionalExpressionNoIn2400 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _101_in_conditionalExpressionNoIn2403 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_conditionalExpressionNoIn2405 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_conditionalExpressionNoIn2408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalORExpressionNoIn_in_conditionalExpressionNoIn2428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression2439 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x2000000UL});
		public static readonly BitSet _LT_in_logicalORExpression2442 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x2000000UL});
		public static readonly BitSet _logicalOROperator_in_logicalORExpression2446 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_logicalORExpression2449 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression2453 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x2000000UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn2467 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x2000000UL});
		public static readonly BitSet _LT_in_logicalORExpressionNoIn2470 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x2000000UL});
		public static readonly BitSet _logicalOROperator_in_logicalORExpressionNoIn2474 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_logicalORExpressionNoIn2477 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn2481 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x2000000UL});
		public static readonly BitSet _153_in_logicalOROperator2494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression2513 = new BitSet(new ulong[]{0x100000000002UL,0x100000UL});
		public static readonly BitSet _LT_in_logicalANDExpression2516 = new BitSet(new ulong[]{0x100000000000UL,0x100000UL});
		public static readonly BitSet _logicalANDOperator_in_logicalANDExpression2520 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_logicalANDExpression2523 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression2527 = new BitSet(new ulong[]{0x100000000002UL,0x100000UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn2541 = new BitSet(new ulong[]{0x100000000002UL,0x100000UL});
		public static readonly BitSet _LT_in_logicalANDExpressionNoIn2544 = new BitSet(new ulong[]{0x100000000000UL,0x100000UL});
		public static readonly BitSet _logicalANDOperator_in_logicalANDExpressionNoIn2548 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_logicalANDExpressionNoIn2551 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn2555 = new BitSet(new ulong[]{0x100000000002UL,0x100000UL});
		public static readonly BitSet _84_in_logicalANDOperator2568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression2587 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x800000UL});
		public static readonly BitSet _LT_in_bitwiseORExpression2590 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x800000UL});
		public static readonly BitSet _bitwiseOROperator_in_bitwiseORExpression2594 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_bitwiseORExpression2597 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression2601 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x800000UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn2615 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x800000UL});
		public static readonly BitSet _LT_in_bitwiseORExpressionNoIn2618 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x800000UL});
		public static readonly BitSet _bitwiseOROperator_in_bitwiseORExpressionNoIn2622 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_bitwiseORExpressionNoIn2625 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn2629 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_bitwiseOROperator2642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression2662 = new BitSet(new ulong[]{0x100000000002UL,0x80000000000000UL});
		public static readonly BitSet _LT_in_bitwiseXORExpression2665 = new BitSet(new ulong[]{0x100000000000UL,0x80000000000000UL});
		public static readonly BitSet _bitwiseXOROperator_in_bitwiseXORExpression2669 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_bitwiseXORExpression2672 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression2676 = new BitSet(new ulong[]{0x100000000002UL,0x80000000000000UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn2690 = new BitSet(new ulong[]{0x100000000002UL,0x80000000000000UL});
		public static readonly BitSet _LT_in_bitwiseXORExpressionNoIn2693 = new BitSet(new ulong[]{0x100000000000UL,0x80000000000000UL});
		public static readonly BitSet _bitwiseXOROperator_in_bitwiseXORExpressionNoIn2697 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_bitwiseXORExpressionNoIn2700 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn2704 = new BitSet(new ulong[]{0x100000000002UL,0x80000000000000UL});
		public static readonly BitSet _119_in_bitwiseXOROperator2717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression2736 = new BitSet(new ulong[]{0x100000000002UL,0x200000UL});
		public static readonly BitSet _LT_in_bitwiseANDExpression2739 = new BitSet(new ulong[]{0x100000000000UL,0x200000UL});
		public static readonly BitSet _bitwiseANDOperator_in_bitwiseANDExpression2743 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_bitwiseANDExpression2746 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression2750 = new BitSet(new ulong[]{0x100000000002UL,0x200000UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn2763 = new BitSet(new ulong[]{0x100000000002UL,0x200000UL});
		public static readonly BitSet _LT_in_bitwiseANDExpressionNoIn2766 = new BitSet(new ulong[]{0x100000000000UL,0x200000UL});
		public static readonly BitSet _bitwiseANDOperator_in_bitwiseANDExpressionNoIn2770 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_bitwiseANDExpressionNoIn2773 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn2777 = new BitSet(new ulong[]{0x100000000002UL,0x200000UL});
		public static readonly BitSet _85_in_bitwiseANDOperator2790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression2810 = new BitSet(new ulong[]{0x100000000002UL,0x300000030000UL});
		public static readonly BitSet _LT_in_equalityExpression2813 = new BitSet(new ulong[]{0x100000000000UL,0x300000030000UL});
		public static readonly BitSet _equalityOperator_in_equalityExpression2817 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_equalityExpression2820 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression2824 = new BitSet(new ulong[]{0x100000000002UL,0x300000030000UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn2837 = new BitSet(new ulong[]{0x100000000002UL,0x300000030000UL});
		public static readonly BitSet _LT_in_equalityExpressionNoIn2840 = new BitSet(new ulong[]{0x100000000000UL,0x300000030000UL});
		public static readonly BitSet _equalityOperator_in_equalityExpressionNoIn2844 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_equalityExpressionNoIn2847 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn2851 = new BitSet(new ulong[]{0x100000000002UL,0x300000030000UL});
		public static readonly BitSet _108_in_equalityOperator2864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_equalityOperator2877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_equalityOperator2890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_equalityOperator2903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression2922 = new BitSet(new ulong[]{0x100000000002UL,0xC48000000000UL,0x180UL});
		public static readonly BitSet _LT_in_relationalExpression2925 = new BitSet(new ulong[]{0x100000000000UL,0xC48000000000UL,0x180UL});
		public static readonly BitSet _relationalOperator_in_relationalExpression2929 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_relationalExpression2932 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression2936 = new BitSet(new ulong[]{0x100000000002UL,0xC48000000000UL,0x180UL});
		public static readonly BitSet _relationalOperatorNoIn_in_relationalOperator2949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_relationalOperator2954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn2973 = new BitSet(new ulong[]{0x100000000002UL,0xC48000000000UL,0x100UL});
		public static readonly BitSet _LT_in_relationalExpressionNoIn2976 = new BitSet(new ulong[]{0x100000000000UL,0xC48000000000UL,0x100UL});
		public static readonly BitSet _relationalOperatorNoIn_in_relationalExpressionNoIn2980 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_relationalExpressionNoIn2983 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn2987 = new BitSet(new ulong[]{0x100000000002UL,0xC48000000000UL,0x100UL});
		public static readonly BitSet _103_in_relationalOperatorNoIn3000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_relationalOperatorNoIn3013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_relationalOperatorNoIn3026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_relationalOperatorNoIn3039 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_relationalOperatorNoIn3052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression3071 = new BitSet(new ulong[]{0x100000000002UL,0x5010000000000UL});
		public static readonly BitSet _LT_in_shiftExpression3074 = new BitSet(new ulong[]{0x100000000000UL,0x5010000000000UL});
		public static readonly BitSet _shiftOperator_in_shiftExpression3078 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_shiftExpression3081 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression3085 = new BitSet(new ulong[]{0x100000000002UL,0x5010000000000UL});
		public static readonly BitSet _104_in_shiftOperator3098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_shiftOperator3111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_shiftOperator3124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression3143 = new BitSet(new ulong[]{0x100000000002UL,0x88000000UL});
		public static readonly BitSet _LT_in_additiveExpression3146 = new BitSet(new ulong[]{0x100000000000UL,0x88000000UL});
		public static readonly BitSet _additiveOperator_in_additiveExpression3150 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_additiveExpression3153 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression3157 = new BitSet(new ulong[]{0x100000000002UL,0x88000000UL});
		public static readonly BitSet _91_in_additiveOperator3170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_additiveOperator3183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression3202 = new BitSet(new ulong[]{0x100000000002UL,0x802040000UL});
		public static readonly BitSet _LT_in_multiplicativeExpression3205 = new BitSet(new ulong[]{0x100000000000UL,0x802040000UL});
		public static readonly BitSet _multiplicativeOperator_in_multiplicativeExpression3209 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_multiplicativeExpression3212 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression3216 = new BitSet(new ulong[]{0x100000000002UL,0x802040000UL});
		public static readonly BitSet _89_in_multiplicativeOperator3229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_multiplicativeOperator3242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_multiplicativeOperator3255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfixExpression_in_unaryExpression3274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryOperator_in_unaryExpression3279 = new BitSet(new ulong[]{0x4004020000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression3282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_unaryOperator3293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_unaryOperator3306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_unaryOperator3319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_unaryOperator3332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_unaryOperator3345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_unaryOperator3358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_unaryOperator3371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_unaryOperator3384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_unaryOperator3397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_postfixExpression3415 = new BitSet(new ulong[]{0x0UL,0x110000000UL});
		public static readonly BitSet _postfixOperator_in_postfixExpression3418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_postfixExpression3423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_postfixOperator3434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_postfixOperator3447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_primaryExpression3466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_primaryExpression3471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression3484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayLiteral_in_primaryExpression3489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectLiteral_in_primaryExpression3494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_primaryExpression3499 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_primaryExpression3502 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_primaryExpression3506 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _LT_in_primaryExpression3508 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_primaryExpression3512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_arrayLiteral3525 = new BitSet(new ulong[]{0x4004120000000000UL,0x80600001D8808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_arrayLiteral3527 = new BitSet(new ulong[]{0x4004120000000000UL,0x80600001D8808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpression_in_arrayLiteral3530 = new BitSet(new ulong[]{0x100000000000UL,0x40000040000000UL});
		public static readonly BitSet _LT_in_arrayLiteral3534 = new BitSet(new ulong[]{0x100000000000UL,0x40000000UL});
		public static readonly BitSet _94_in_arrayLiteral3537 = new BitSet(new ulong[]{0x4004120000000000UL,0x80600001D8808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_arrayLiteral3540 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpression_in_arrayLiteral3543 = new BitSet(new ulong[]{0x100000000000UL,0x40000040000000UL});
		public static readonly BitSet _LT_in_arrayLiteral3549 = new BitSet(new ulong[]{0x100000000000UL,0x40000000000000UL});
		public static readonly BitSet _118_in_arrayLiteral3552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_objectLiteral3573 = new BitSet(new ulong[]{0x4120000000000UL,0x8UL});
		public static readonly BitSet _LT_in_objectLiteral3575 = new BitSet(new ulong[]{0x4120000000000UL,0x8UL});
		public static readonly BitSet _propertyNameAndValue_in_objectLiteral3578 = new BitSet(new ulong[]{0x100000000000UL,0x40000000UL,0x4000000UL});
		public static readonly BitSet _LT_in_objectLiteral3581 = new BitSet(new ulong[]{0x100000000000UL,0x40000000UL});
		public static readonly BitSet _94_in_objectLiteral3584 = new BitSet(new ulong[]{0x4120000000000UL,0x8UL});
		public static readonly BitSet _LT_in_objectLiteral3586 = new BitSet(new ulong[]{0x4120000000000UL,0x8UL});
		public static readonly BitSet _propertyNameAndValue_in_objectLiteral3589 = new BitSet(new ulong[]{0x100000000000UL,0x40000000UL,0x4000000UL});
		public static readonly BitSet _LT_in_objectLiteral3593 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_objectLiteral3596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyName_in_propertyNameAndValue3616 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _LT_in_propertyNameAndValue3618 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _101_in_propertyNameAndValue3621 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_propertyNameAndValue3623 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpression_in_propertyNameAndValue3626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_propertyName3647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_propertyName3660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NumericLiteral_in_propertyName3673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_literal3694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_literal3705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_literal3718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NumericLiteral_in_literal3731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_literal3744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RegularExpressionLiteral_in_literal3757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred1_JavaScript283 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred6_JavaScript334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _blockStatement_in_synpred7_JavaScript351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionStatement_in_synpred10_JavaScript366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labelledStatement_in_synpred17_JavaScript401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred21_JavaScript434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_synpred47_JavaScript714 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _LT_in_synpred47_JavaScript716 = new BitSet(new ulong[]{0x100000000000UL,0x800000UL});
		public static readonly BitSet _87_in_synpred47_JavaScript719 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_synpred47_JavaScript721 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _expression_in_synpred47_JavaScript724 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _LT_in_synpred47_JavaScript726 = new BitSet(new ulong[]{0x100000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_synpred47_JavaScript729 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_synpred47_JavaScript731 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statement_in_synpred47_JavaScript734 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x2UL});
		public static readonly BitSet _LT_in_synpred47_JavaScript736 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_synpred47_JavaScript739 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _LT_in_synpred47_JavaScript741 = new BitSet(new ulong[]{0x4004120000000000UL,0xB220004198808008UL,0x87FFE75UL});
		public static readonly BitSet _statement_in_synpred47_JavaScript744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_synpred54_JavaScript816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred109_JavaScript1396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred112_JavaScript1429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred129_JavaScript1680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred139_JavaScript1794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_synpred148_JavaScript1881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpressionNoIn_in_synpred151_JavaScript1920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callExpression_in_synpred154_JavaScript1958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberExpression_in_synpred155_JavaScript1974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred160_JavaScript2031 = new BitSet(new ulong[]{0x100000000000UL,0x20000400000000UL});
		public static readonly BitSet _memberExpressionSuffix_in_synpred160_JavaScript2034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred166_JavaScript2102 = new BitSet(new ulong[]{0x100000000000UL,0x20000400800000UL});
		public static readonly BitSet _callExpressionSuffix_in_synpred166_JavaScript2105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalORExpression_in_synpred193_JavaScript2333 = new BitSet(new ulong[]{0x100000000000UL,0x10000000000000UL});
		public static readonly BitSet _LT_in_synpred193_JavaScript2336 = new BitSet(new ulong[]{0x100000000000UL,0x10000000000000UL});
		public static readonly BitSet _116_in_synpred193_JavaScript2339 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_synpred193_JavaScript2341 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpression_in_synpred193_JavaScript2344 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _LT_in_synpred193_JavaScript2346 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _101_in_synpred193_JavaScript2349 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_synpred193_JavaScript2351 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpression_in_synpred193_JavaScript2354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalORExpressionNoIn_in_synpred198_JavaScript2387 = new BitSet(new ulong[]{0x100000000000UL,0x10000000000000UL});
		public static readonly BitSet _LT_in_synpred198_JavaScript2390 = new BitSet(new ulong[]{0x100000000000UL,0x10000000000000UL});
		public static readonly BitSet _116_in_synpred198_JavaScript2393 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_synpred198_JavaScript2395 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_synpred198_JavaScript2398 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _LT_in_synpred198_JavaScript2400 = new BitSet(new ulong[]{0x100000000000UL,0x2000000000UL});
		public static readonly BitSet _101_in_synpred198_JavaScript2403 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_synpred198_JavaScript2405 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_synpred198_JavaScript2408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred256_JavaScript3146 = new BitSet(new ulong[]{0x100000000000UL,0x88000000UL});
		public static readonly BitSet _additiveOperator_in_synpred256_JavaScript3150 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _LT_in_synpred256_JavaScript3153 = new BitSet(new ulong[]{0x4004120000000000UL,0x8020000198808008UL,0x84AA624UL});
		public static readonly BitSet _multiplicativeExpression_in_synpred256_JavaScript3157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_synpred272_JavaScript3415 = new BitSet(new ulong[]{0x0UL,0x110000000UL});
		public static readonly BitSet _postfixOperator_in_synpred272_JavaScript3418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred281_JavaScript3527 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace JavaScriptTranslatorActivities
